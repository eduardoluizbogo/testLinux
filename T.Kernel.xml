<?xml version="1.0"?>
<doc>
    <assembly>
        <name>T.Kernel</name>
    </assembly>
    <members>
        <member name="T:T.Kernel.Core.ArrayObj`1">
            <summary>
            Define class for Array objects
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="F:T.Kernel.Core.ArrayObj`1.array">
            <summary>
            Array
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ArrayObj`1.dims">
            <summary>
            Number of dimensions
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ArrayObj`1.size">
            <summary>
            Array containg size of each dimension
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ArrayObj`1.userType">
            <summary>
            Zero-based index of userName parentType, if defined
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ArrayObj`1.isRefOnlyLocal">
            <summary>
            Flag indicating whether Reference objects are local
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ArrayObj`1.syncRoot">
            <summary>
            Object used to synchronize access
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ArrayObj`1.IsFlagSnapshot">
            <summary>
            Flag used by snapshot
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ArrayObj`1.OriginalSize">
            <summary>
            Original size
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ArrayObj`1.virtualLength">
            <summary>
            Variable used when Resize method decreases array lenth
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ArrayObj`1.ObjServer">
            <summary>
            Reference to ObjectServer instance
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ArrayObj`1.Array">
            <summary>
            Get array
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ArrayObj`1.ArraySize">
            <summary>
            Get length
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ArrayObj`1.LastArrayIndex">
            <summary>
            Get length
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ArrayObj`1.Length">
            <summary>
            Get length
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ArrayObj`1.LongLength">
            <summary>
            Get length
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ArrayObj`1.Item(System.Int32[])">
            <summary>
            Get element of the array
            </summary>
            <param name="indexes">Array indexes</param>
            <returns>Element of the array</returns>
        </member>
        <member name="P:T.Kernel.Core.ArrayObj`1.Item(System.String)">
            <summary>
            Get element of the array
            </summary>
            <param name="name">named index</param>
            <returns>Element of the array</returns>
        </member>
        <member name="P:T.Kernel.Core.ArrayObj`1.Rank">
            <summary>
            Get the number of dimensions of the array
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ArrayObj`1.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="size">Size of each dimension</param>
        </member>
        <member name="M:T.Kernel.Core.ArrayObj`1.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Int32[],System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="size">Size of each dimension</param>
            <param name="isRefOnlyLocal">Flag indicating whether Reference objects are local</param>
        </member>
        <member name="M:T.Kernel.Core.ArrayObj`1.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Int32[],System.Int16)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="size">Size of each dimension</param>
            <param name="userType">Zero-based index of userName parentType</param>
        </member>
        <member name="M:T.Kernel.Core.ArrayObj`1.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Int32[],System.Int16,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="size">Size of each dimension</param>
            <param name="userType">Zero-based index of userName parentType</param>
            <param name="isRefOnlyLocal">Flag indicating whether Reference objects are local</param>
        </member>
        <member name="M:T.Kernel.Core.ArrayObj`1.Initialize(System.Int32[],System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="size">Size of each dimension</param>
            <param name="isRefOnlyLocal">Flag indicating whether Reference objects are local</param>
        </member>
        <member name="M:T.Kernel.Core.ArrayObj`1.IsInUse(System.Int32[])">
            <summary>
            Returns if element of the array is in use
            </summary>
            <param name="indexes">Array indexes</param>
            <returns>Flag indicang whether element of the array is in use</returns>
        </member>
        <member name="M:T.Kernel.Core.ArrayObj`1.GetElement(System.Int32[])">
            <summary>
            Get element of the array
            </summary>
            <param name="indexes">Array indexes</param>
            <returns>Element of the array</returns>
        </member>
        <member name="M:T.Kernel.Core.ArrayObj`1.GetLength(System.Int32)">
            <summary>
            Get the number of elements of a specified dimension
            </summary>
            <param name="dimension">A zero-based dimension of the array</param>
            <returns>Number of elements</returns>
        </member>
        <member name="M:T.Kernel.Core.ArrayObj`1.Resize(System.Int32)">
            <summary>
            Set new size of array
            </summary>
            <param name="newSize">New size</param>
        </member>
        <member name="M:T.Kernel.Core.ArrayObj`1.GetSize">
            <summary>
            Get the Size of the array
            </summary>
            <param name="newSize"></param>
            <returns>size</returns>
        </member>
        <member name="T:T.Kernel.Core.AuditTrail">
            <summary>
            Class to access diagnostics system
            </summary>
        </member>
        <member name="F:T.Kernel.Core.AuditTrail.module">
            <summary>
            Reference to Alarm module
            </summary>
        </member>
        <member name="F:T.Kernel.Core.AuditTrail.miAddAuditTrailInAlarmModule">
            <summary>
            Reference to method AddAuditTrail in Alarm module
            </summary>
        </member>
        <member name="F:T.Kernel.Core.AuditTrail.objServer">
            <summary>
            Reference to the object objServer
            </summary>
        </member>
        <member name="P:T.Kernel.Core.AuditTrail.IsEnabled">
            <summary>
            Get flag indicating whether Audit Trail is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.AuditTrail.IsAuditModifyDatasetsEnabled">
            <summary>
            Get flag indicating whether AuditTrail ModifyDatasets is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.AuditTrail.IsAuditLoadDatasetsEnabled">
            <summary>
            Get flag indicating whether Audit Trail AuditLoadDatasets is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.AuditTrail.IsOpenCloseDisplaysEnabled">
            <summary>
            Get flag indicating whether Audit Trail/OpenCloseDisplays is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.AuditTrail.IsOperatorActionsEnabled">
            <summary>
            Get flag indicating whether Audit Trail/OperatorActions is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.AuditTrail.IsSaveReportsEnabled">
            <summary>
            Get flag indicating whether Audit Trail/SaveReports is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.AuditTrail.IsLogonLogoffSecurityEnabled">
            <summary>
            Get flag indicating whether Audit Trail/LogonLogoffSecurity is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.AuditTrail.IsSystemWarningsEnabled">
            <summary>
            Get flag indicating whether Audit Trail/SystemWarnings is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.AuditTrail.IsTagChangesEnabled">
            <summary>
            Get flag indicating whether Audit Trail/TagChanges is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.AuditTrail.IsRemoteConnectionsEnabled">
            <summary>
            Get flag indicating whether Audit Trail/RemoteConnections is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.AuditTrail.IsCustomMessagesEnabled">
            <summary>
            Get flag indicating whether Audit Trail/CustomMessages is enabled
            </summary>
        </member>
        <member name="M:T.Kernel.Core.AuditTrail.#ctor(T.Kernel.Core.ObjectServer)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objServer">Reference to the object objServer</param>
        </member>
        <member name="M:T.Kernel.Core.AuditTrail.Add(System.String,System.String,T.TSystem.eAlarmAuditTrail)">
            <summary>
            Add event
            </summary>
            <param name="message">Message</param>
            <param name="type">Audit Trail type</param>
            <param name="objectName">Object name</param>
        </member>
        <member name="M:T.Kernel.Core.AuditTrail.SendUserChangedWarningAsync(System.String,System.String)">
            <summary>
            Add event
            </summary>
            <param name="message">Message</param>
            <param name="userName">Audit Trail type</param>
            <param name="objectName">Object name</param>
        </member>
        <member name="M:T.Kernel.Core.AuditTrail.Add(T.TSystem.eAlarmAuditTrail,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add event
            </summary>
            <param name="type">Audit Trail type</param>
            <param name="message">Message</param>
            <param name="areaName">Area name</param>
            <param name="objectName">Object name</param>   
            <param name="value">Object value</param>
            <param name="itemName">Item name</param>
            <param name="auxValue">Auxiliar value</param>
            <param name="comments">Comments</param>
            <param name="auxValue2">Auxiliar2 value</param>
            <param name="auxValue3">Auxiliar3 value</param>
            <param name="userName">User name</param>
        </member>
        <member name="M:T.Kernel.Core.AuditTrail.Post(T.TSystem.eAlarmAuditTrail,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Post event without wait a response
            </summary>
            <param name="type">Audit Trail type</param>
            <param name="message">Message</param>
            <param name="areaName">Area name</param>
            <param name="objectName">Object name</param>
            <param name="value">Object value</param>
            <param name="itemName">Item name</param>
            <param name="auxValue">Auxiliar value</param>
            <param name="comments">Comments</param>
            <param name="auxValue2">Auxiliar2 value</param>
            <param name="auxValue3">Auxiliar3 value</param>
            <param name="userName">User name</param>
        </member>
        <member name="M:T.Kernel.Core.BuildReferenceList.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Kernel.Core.BuildReferenceList.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Kernel.Core.BuildReference.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="M:T.Kernel.Core.BuildReference.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Kernel.Core.BuildReference.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Kernel.Core.DB">
            <summary>
            Main class to access the tags database
            </summary>
            <summary>
            Main class to access the tags database
            </summary>
            <summary>
            Main class to access the tags database
            </summary>
            <summary>
            Main class to access the tags database
            </summary>
        </member>
        <member name="T:T.Kernel.Core.DB.Errors">
            <summary>
            Possible return errors
            </summary>
        </member>
        <member name="T:T.Kernel.Core.DB.ValidationStatus">
            <summary>
            Tag validation return status
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.objServer">
            <summary>
            Reference to the ObjectServer
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.types">
            <summary>
            Reference to the DataSet objects containg definition of the all object types
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.changedTypes">
            <summary>
            Reference to the DataSet objects containg definition of changed types
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.scriptClasses">
            <summary>
            Reference to the DataSet objects containg definition of the all userName classes
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.changedScriptClasses">
            <summary>
            Reference to the DataSet objects containg definition of changed userName classes
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.DBServerRef">
            <summary>
            Reference to an instance of DBServer of the solutionName
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.runDB">
            <summary>
            Root of Runtime DB
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.dbVersion">
            <summary>
            Database version
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.opening">
            <summary>
            Flag indicating if DB is being open
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.closing">
            <summary>
            Flag indicating if DB is being closed
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.schemaVersion">
            <summary>
            Schema version of project
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.listOfFlagsByThreadWaitValueFromServer">
            <summary>
            List of flags by thread indicating if should wait objType from objServer
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.retentiveDB">
            <summary>
            Object used to Save and Load Retentive Values
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.hashOfValueWaitingFromServer">
            <summary>
            Hash of values waiting from server
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.cacheTables">
            <summary>
            Cache of Table references
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.setOfTableChanges">
            <summary>
            Set of tableInfo changes
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.cacheofImages">
            <summary>
            Cache of resources
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.dicOfEventHandlersByResourceID">
            <summary>
            Dictionary of event handlers by resource ids
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.cacheOfSymbols">
            <summary>
            Cache of symbols
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.cacheOfSymbolObjects">
            <summary>
            Cache of Symbol Objects
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.dicOfContentsTablesByName">
            <summary>
            Dictionary of Contents tables
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.listOfTagObjectsUsed">
            <summary>
            List of tags used
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.listOfObjsForAddOnRedundancy">
            <summary>
            List of objects for adding on redundancy
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.listOfArrayObjectsUsed">
            <summary>
            List of ArrayObjs used
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.isInsideGetObjRef">
            <summary>
            Flag used to protect againt reentrant called for GetObjRef
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.dicOfUsedTokensByToken">
            <summary>
            Dictionary of objects used on Device module (Read On Display or OPCServer)
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.listOfUsedTokens">
            <summary>
            List of objects used on Device module (Read On Display or OPCServer)
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.numberOfChangeUsedTokensOnDevice">
            <summary>
            Number of changes of used tokens
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.hasAnyAccessTypeReadPollingOnDisplay">
            <summary>
            Flag indicating whether has any ReadPolling/OnDisplay Acccess Type
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.dicOfObjRefsByName">
            <summary>
            Dictionary containg ObjRef's
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.dicOfObjRefsByExpression">
            <summary>
            Dictionary containg ObjRef's
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.dicOfAssetFolderNameByID">
            <summary>
            Dictionary containg AssetFolder names by AssetFolder ids
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.listOfDisplayValues">
            <summary>
            List containg references to OvjectValues for DisplayValue's
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.versionOfListOfDisplayValues">
            <summary>
            Version of 'listOfDisplayValues'
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.dicOfCurrentArrayIndexes">
            <summary>
            Dictionary containg current array indexes
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.listOfTagsUsedByViewClient">
            <summary>
            List containg tags used by View client
            </summary>
        </member>
        <member name="P:T.Kernel.Core.DB.CanUseLocalCache">
            <summary>
            Flag indicating wether can use local cache
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB.invalidValues">
            <summary>
            Indicates invalid values
            </summary>
        </member>
        <member name="P:T.Kernel.Core.DB.ObjServer">
            <summary>
            Get reference to the object objServer
            </summary>
        </member>
        <member name="P:T.Kernel.Core.DB.Types">
            <summary>
            Get reference to the DataSet objects containg definition of the all object typesDataSet
            </summary>
        </member>
        <member name="P:T.Kernel.Core.DB.ScriptClasses">
            <summary>
            Get reference to the DataSet objects containg definition of the all userName classes
            </summary>
        </member>
        <member name="P:T.Kernel.Core.DB.RunDB">
            <summary>
            Get reference to the root of RunDB
            </summary>
        </member>
        <member name="P:T.Kernel.Core.DB.IsOpening">
            <summary>
            Get flag indicating if DB is being open
            </summary>
        </member>
        <member name="P:T.Kernel.Core.DB.IsClosing">
            <summary>
            Get flag indicating if DB is being closed
            </summary>
        </member>
        <member name="P:T.Kernel.Core.DB.RetentiveDB">
            <summary>
            Object used to Save and Load Retentive Values
            </summary>
        </member>
        <member name="P:T.Kernel.Core.DB.SchemaVersion">
            <summary>
            Get schema version of project
            </summary>
        </member>
        <member name="P:T.Kernel.Core.DB.HasAnyAccessTypeReadPollingOnDisplay">
            <summary>
            Get flag indicating whether has any ReadPolling/OnDisplay Acccess Type
            </summary>
        </member>
        <member name="F:T.Kernel.Core.DB._displayValueMode">
            <summary>
            Get flag indicating whether has used device points is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.DB.DisplayValueMode">
            <summary>
            Get current display value type
            </summary>
        </member>
        <member name="P:T.Kernel.Core.DB.InvalidValues">
            <summary>
            Get array containg invalid values;
            </summary>
        </member>
        <member name="M:T.Kernel.Core.DB.#ctor(T.Kernel.Core.ObjectServer)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objServer"></param>
        </member>
        <member name="M:T.Kernel.Core.DB.CheckDBVersion(System.Int32)">
            <summary>
            Check version of the database
            </summary>
            <param name="dbVersion">Version for comparing</param>
            <returns>Flag indicating if version is equal to current database version</returns>
        </member>
        <member name="P:T.Kernel.Core.DB.Version">
            <summary>
            Return the current database version
            </summary>
        </member>
        <member name="M:T.Kernel.Core.DB.GetObjTokenFromName(System.String,System.Boolean)">
            <summary>
            Returns the reference to the object in database
            </summary>
            <param name="types">Reference to typesDataSet DataSet</param>
            <param name="objectName">Object name</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>Reference to the object in database</returns>         
        </member>
        <member name="M:T.Kernel.Core.DB.GetObjTokenFromName(System.String,System.Boolean,T.TSystem.ObjToken@,System.Int32@)">
            <summary>
            Returns the reference to the object in database
            </summary>
            <param name="typesDataSet">Reference to typesDataSet DataSet</param>
            <param name="objectName">Object name</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <param name="objToken">Reference to object in database</param>
            <param name="index">Index of last position of 'objectName' parsed. It can be used to identify where an error occurred</param>
            <returns>Return result</returns>         
        </member>
        <member name="M:T.Kernel.Core.DB.TokenizeObjectName(System.String)">
            <summary>
            Tokenize object name
            </summary>
            <param name="typesDataSet">Reference to typesDataSet DataSet</param>
            <param name="objectName">Object name</param>
            <returns>String containg object name tokenized</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.UntokenizeObjectName(System.String,System.Boolean)">
            <summary>
            Untokenize object name
            </summary>
            <param name="typesDataSet">Reference to typesDataSet DataSet</param>
            <param name="objectToken">String containg object name tokenized</param>
            <param name="removeStartTag">Optional flag indicating whether "Tag" should to be removed</param>
            <returns>String containg object name</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.TokenizeExpression(System.String)">
            <summary>
            Tokenize expression
            </summary>
            <param name="typesDataSet">Reference to typesDataSet DataSet</param>
            <param name="expression">Expression</param>
            <returns>String containg expression tokenized</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.UntokenizeExpression(System.String)">
            <summary>
            Get resolved expression from expression in ObjToken format
            </summary>
            <param name="typesDataSet">Reference to typesDataSet DataSet</param>
            <param name="expression">String containg expression tokenized</param>
            <returns>String containg expression untokenized</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.TokenizeString(System.String)">
            <summary>
            Tokenize string
            </summary>
            <param name="typesDataSet">Reference to typesDataSet DataSet</param>
            <param name="str">String</param>
            <returns>String containg string tokenized</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.UntokenizeString(System.String)">
            <summary>
            Get resolved string from string in ObjToken format
            </summary>
            <param name="typesDataSet">Reference to typesDataSet DataSet</param>
            <param name="str">String in Object format</param>
            <returns>Resolved string </returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetObjTokensFromExpression(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get references to ObjToken objects from an expression
            </summary>
            <param name="typesDataSet">Reference to typesDataSet DataSet</param>
            <param name="expression">Expression</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>Array containg references to ObjToken objects</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetObjTokensFromString(System.String,System.Boolean)">
            <summary>
            Get references to ObjToken objects from a string
            </summary>
            <param name="typesDataSet">Reference to typesDataSet DataSet</param>
            <param name="str">String</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>Array containg references to ObjToken objects</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.CompileExpression(System.String)">
            <summary>
            Compile expression
            </summary>
            <param name="expression">Expression to compile</param>
            <returns>String containg error or null if success</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetAssemblyOfExpressionsFromDisplay(System.Int32)">
            <summary>
            Get assembly of expressions from a display
            </summary>
            <param name="displayID">Display ID</param>
            <returns>Reference to a stream that will filled with array bytes of compiled assembly</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.Locale(System.String)">
            <summary>
            Get translated text
            </summary>
            <param name="text">Original text</param>
            <returns>Translated text</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.AddObjectValueWaitingFromServer(System.Object)">
            <summary>
            Add ObjectValue object waiting from server
            </summary>
            <param name="objValue">Reference to ObjectValue object</param>
        </member>
        <member name="M:T.Kernel.Core.DB.RemoveObjectValueWaitingFromServer(System.Object)">
            <summary>
            Remove ObjectValue object waiting from server
            </summary>
            <param name="objValue">Reference to ObjectValue object</param>
        </member>
        <member name="M:T.Kernel.Core.DB.HasAnyObjectValueWaitingFromServer">
            <summary>
            Chack if any ObjectValue object is waiting value from server
            </summary>
            <returns></returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetObjRef(System.String)">
            <summary>
            Returns the reference to the object in database
            </summary>
            <param name="objectName">Object name</param>
            <returns>Reference to the object in database</returns>         
        </member>
        <member name="M:T.Kernel.Core.DB.GetObjRef(System.String,System.Boolean)">
            <summary>
            Returns the reference to the object in database
            </summary>
            <param name="objectName">Object name</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>Reference to the object in database</returns>         
        </member>
        <member name="M:T.Kernel.Core.DB.GetObjRefNoPreload(System.String,System.Boolean)">
            <summary>
            Returns the reference to the object in database
            </summary>
            <param name="objectName">Object name</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>Reference to the object in database</returns>         
        </member>
        <member name="M:T.Kernel.Core.DB.GetObjRefsFromExpression(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Return references to the objects in database from an expression
            </summary>
            <param name="expression">Expression</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>References to the objects in database</returns>         
        </member>
        <member name="M:T.Kernel.Core.DB.GetObjRefsFromString(System.String,System.Boolean)">
            <summary>
            Returns references to the objects in database from a string
            </summary>
            <param name="str">String</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>References to the objects in database</returns>         
        </member>
        <member name="M:T.Kernel.Core.DB.GetObjRefsFromScript(System.String)">
            <summary>
            Return references to the objects in database from script
            </summary>
            <param name="contents">Contents of script already tokenized</param>
            <returns>References to the objects in database</returns>         
        </member>
        <member name="M:T.Kernel.Core.DB.GetObjRefsFromXaml(System.String)">
            <summary>
            Return references to the objects in database from Xaml
            </summary>
            <param name="contents">Contents of Xaml already tokenized</param>
            <returns>References to the objects in database</returns>         
        </member>
        <member name="M:T.Kernel.Core.DB.LoadRunDB">
            <summary>
            Load RunDB
            </summary>
        </member>
        <member name="M:T.Kernel.Core.DB.Open(System.Object)">
            <summary>
            Open database
            </summary>
            <param name="dbServerRef">Reference to an instance of DBServer of the solutionName</param>
            <returns>Success(OK) or an error code</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.Close">
            <summary>
            Close the database
            </summary>
        </member>
        <member name="M:T.Kernel.Core.DB.ShouldWaitValueFromServer">
            <summary>
            Return if should wait tag objType from objServer
            </summary>
            <returns>Flag indicating if should wait tag objType from objServer (true) or not (false)</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.SetFlagWaitValueFromServer(System.Boolean)">
            <summary>
            Set new flag objType if should wait tag objType from objServer
            </summary>
            <param name="flag">Flag objType</param>
            <returns>Previous flag objType indicating if should wait tag objType from objServer (true) or not (false)</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetNumberOfObjects(System.Int32)">
            <summary>
            Get number of runtime objects
            </summary>
            <param name="parentType">Object parentType</param>
            <returns>Number of runtime objects</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetRowOfObject(System.Int32,System.Int32)">
            <summary>
            Get row of the runtime object
            </summary>
            <param name="parentType">Object parentType</param>
            <param name="id">ID of the runtime object</param>
            <returns>Reference to row</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetValueOfObject``1(System.Int32,System.Int32,T.TSystem.eObjTypeProperty)">
            <summary>
            Get objType of the runtime object
            </summary>
            <param name="parentType">Object parentType</param>
            <param name="id">ID of the runtime object</param>
            <returns>Reference to row</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetAllPropertyNames(System.Int32)">
            <summary>
            Get all property names from a type
            </summary>
            <param name="parentType">Object parentType</param>
            <returns>Dictionary containg all property names and your ids</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetPropertyID(System.Int32,System.String)">
            <summary>
            Get property id based to name
            </summary>
            <param name="parentType">Object parentType</param>
            <param name="name">Name to get</param>
            <returns>ID</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetPropertyName(System.Int32,System.Int32)">
            <summary>
            Get property name based to id
            </summary>
            <param name="parentType">Object parentType</param>
            <param name="id">ID to get</param>
            <returns>Name</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetPropertyVersionID(System.Int32,System.Int32)">
            <summary>
            Get property name based to id
            </summary>
            <param name="parentType">Object parentType</param>
            <param name="id">ID to get</param>
            <returns>VersionID</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetPropertyType(System.Int32,System.Int32)">
            <summary>
            Get property type based to id
            </summary>
            <param name="parentType">Object parentType</param>
            <param name="id">ID to get</param>
            <returns>Type</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetPropertyDomain(System.Int32,System.Int32)">
            <summary>
            Get property domain based to id
            </summary>
            <param name="parentType">Object parentType</param>
            <param name="id">ID to get</param>
            <returns>eDomain</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetPropertyRefType(System.Int32,System.Int32)">
            <summary>
            Get property RefType based to id
            </summary>
            <param name="type">Object type</param>
            <param name="id">ID to get</param>
            <returns>RefType</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetPropertyArraySize(System.Int32,System.Int32)">
            <summary>
            Get property array size based to id
            </summary>
            <param name="type">Object type</param>
            <param name="id">ID to get</param>
            <returns>Array size</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetPropertyMemberTypes(System.Int32,System.Int32)">
            <summary>
            Get member type
            </summary>
            <param name="parentType">Object parentType</param>
            <param name="id">ID to get</param>
            <returns>MemberTypes</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetPropertyDescription(System.Int32,System.Int32)">
            <summary>
            Get property description based to id
            </summary>
            <param name="parentType">Object parentType</param>
            <param name="id">ID to get</param>
            <returns>String</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetAllPropertyName(T.Kernel.Core.RunObj)">
            <summary>
            Get All property name based to id
            </summary>
            <param name="parentType">Object parentType</param>
            <param name="id">ID to get</param>
            <returns>Name</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetAllPropertyName(T.Kernel.Core.RunObj,System.Boolean)">
            <summary>
            Get All property name based to id
            </summary>
            <param name="type">Object type</param>
            <param name="allowBrowsableAdvanced">Flag whether only property is browsable is Advanced</param>
            <returns>Name</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataTableFromTypes(T.TSystem.eObjType)">
            <summary>
            Get a specific tableInfo from Types DataSet
            </summary>
            <param name="parentType">Object parentType</param>
            <returns>DataTable found from Type dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataTableFromTypes(System.Int32)">
            <summary>
            Get a specific tableInfo from Types DataSet
            </summary>
            <param name="parentType">Index of tableInfo</param>
            <returns>DataTable found from Type dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.RefreshTable(System.String)">
            <summary>
            Refresh table
            </summary>
            <param name="tableName">Table name</param>
        </member>
        <member name="M:T.Kernel.Core.DB.RefreshTableAsync(System.String)">
            <summary>
            Refresh table
            </summary>
            <param name="tableName">Table name</param>
        </member>
        <member name="M:T.Kernel.Core.DB.GetSolutionDateModified">
            <summary>
            Get last modified project
            </summary>
            <returns>Last modified int utc ticks</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetLastModifiedSolutionAsync">
            <summary>
            Get last modified project
            </summary>
            <returns>Last modified int utc ticks</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetChildrenSolutionNames">
            <summary>
            Get names of chil projects
            </summary>
            <returns>String containg names of child projects</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataTable(T.TSystem.eObjType)">
            <summary>
            Get a specific tableInfo from Main DataSet
            </summary>
            <param name="objType">Table name</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataTableAsync(T.TSystem.eObjType)">
            <summary>
            Get a specific tableInfo from Main DataSet
            </summary>
            <param name="objType">Table name</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataTable(System.String)">
            <summary>
            Get a specific tableInfo from Main DataSet
            </summary>
            <param name="tableName">Table name</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataTableAsync(System.String)">
            <summary>
            Get a specific tableInfo from Main DataSet
            </summary>
            <param name="tableName">Table name</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataTableFromDatabase(T.TSystem.eObjType)">
            <summary>
            Get a specific tableInfo from database
            </summary>
            <param name="objType">Table name</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataTableFromDatabaseAsync(T.TSystem.eObjType)">
            <summary>
            Get a specific tableInfo from database
            </summary>
            <param name="objType">Table name</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataTableFromDatabase(System.String)">
            <summary>
            Get a specific tableInfo from database
            </summary>
            <param name="tableName">Table name</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataTableFromDatabaseAsync(System.String)">
            <summary>
            Get a specific tableInfo from database
            </summary>
            <param name="tableName">Table name</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataRow(T.TSystem.eObjType,System.String)">
            <summary>
            Get a specific row from Main DataSet
            </summary>
            <param name="objType">Table enum</param>
            <param name="name">name to find the row</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataRow(T.TSystem.eObjType,System.Int32)">
            <summary>
            Get a specific row from Main DataSet
            </summary>
            <param name="objType">Table enum</param>
            <param name="id">ID of row</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataRow(System.String,System.Int32)">
            <summary>
            Get a specific row from Main DataSet
            </summary>
            <param name="tableName">Table name</param>
            <param name="id">ID of row</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataRowFromDatabase(T.TSystem.eObjType,System.Int32)">
            <summary>
            Get a specific row from datatase
            </summary>
            <param name="objType">Table name</param>
            <param name="id">ID of row</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataRowFromDatabaseAsync(T.TSystem.eObjType,System.Int32)">
            <summary>
            Get a specific row from datatase
            </summary>
            <param name="objType">Table name</param>
            <param name="id">ID of row</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataRowFromDatabase(System.String,System.Int32)">
            <summary>
            Get a specific row from datatase
            </summary>
            <param name="tableName">Table name</param>
            <param name="id">ID of row</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataRowFromDatabaseAsync(System.String,System.Int32)">
            <summary>
            Get a specific row from datatase
            </summary>
            <param name="tableName">Table name</param>
            <param name="id">ID of row</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataRow(System.String,System.String)">
            <summary>
            Get a specific row from Main DataSet
            </summary>
            <param name="tableName">Table name</param>
            <param name="name">Name</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataRowAsync(System.String,System.String)">
            <summary>
            Get a specific row from Main DataSet
            </summary>
            <param name="tableName">Table name</param>
            <param name="name">Name</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataRow(System.Data.DataTable,System.String)">
            <summary>
            Get data row
            </summary>
            <param name="tableInfo">Reference to tableInfo</param>
            <param name="name">Name</param>
            <returns>Reference to row</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataRow(System.Data.DataTable,System.Int32)">
            <summary>
            Get data row
            </summary>
            <param name="tableInfo">Reference to tableInfo</param>
            <param name="id">ID</param>
            <returns>Reference to row</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataRowFromDatabase(System.String,System.String)">
            <summary>
            Get a specific row from datatase
            </summary>
            <param name="tableName">Table name</param>
            <param name="name">Name</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDataRowFromDatabaseAsync(System.String,System.String)">
            <summary>
            Get a specific row from datatase
            </summary>
            <param name="tableName">Table name</param>
            <param name="name">Name</param>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetImage(System.Int32)">
            <summary>
            Get a specific resource from Main DataSet
            </summary>
            <param name="imageID">Resource ID</param>
            <returns>Stream containg resource</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetImageAsync(System.Int32)">
            <summary>
            Get a specific Image from Main DataSet
            </summary>
            <param name="imageID">Image ID</param>
            <returns>Stream containg resource</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetImageFromDatabase(System.Int32)">
            <summary>
            Get a specific image from datatase
            </summary>
            <param name="imageID">Image ID</param>
            <returns>Stream containg resource</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetSymbol(System.String)">
            <summary>
            Get Xaml from symbol
            </summary>
            <param name="symbolName">Symbol name</param>
            <returns>Xaml code</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetSymbolAsync(System.String)">
            <summary>
            Get Xaml from symbol
            </summary>
            <param name="symbolName">Symbol name</param>
            <returns>Xaml code</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetSymbolFromDatabase(System.String)">
            <summary>
            Get Xaml from symbol
            </summary>
            <param name="symbolName">Symbol name</param>
            <returns>Xaml code</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetSymbolFromDatabaseAsync(System.String)">
            <summary>
            Get Xaml from symbol
            </summary>
            <param name="symbolName">Symbol name</param>
            <returns>Xaml code</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDateModifieldAllDisplays">
            <summary>
            Get datemodified of all displays
            </summary>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetDateModifieldAllDisplaysAsync">
            <summary>
            Get datemodified of all displays
            </summary>
            <returns>DataTable found from main dataset</returns>
        </member>
        <member name="M:T.Kernel.Core.DB.GetRuntimeUsersTableScript">
            <summary>
            Get script of a runtime user tableInfo
            </summary>
            <param name="tableName">Table name</param>
            <returns>Script content</returns>
        </member>
        <member name="T:T.Kernel.Core.eRunEvent">
            <summary>
            Event running
            </summary>
        </member>
        <member name="T:T.Kernel.Core.EventPriority">
            <summary>
            EventPriority: Priority of an event
            </summary>
        </member>
        <member name="T:T.Kernel.Core.eService">
            <summary>
            eService: TcpService: TCPIP Remote Services
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:T.Kernel.Core.EvaluateExpression.Run(System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object}[])" -->
        <member name="T:T.Kernel.Core.AfterChangeValue">
            <summary>
            Define signature of the method that is called after changing objType
            </summary>
            <param name="evObj">Reference to EventBase object</param>
            <param name="objRef">Reference to ObjRef object</param>
            <param name="value">Value</param>
            <param name="sourceModuleID">Source module ID</param>
            <param name="extendSourceModuleID">Extended source module ID</param>
            <param name="uniqueEventNumber">Unique event number</param>
        </member>
        <member name="T:T.Kernel.Core.EnterModuleList">
            <summary>
            Define signature of the method that is called before event object enters in module list
            </summary>
            <param name="evModule">Reference to EventModule object entering</param>
            <returns>Flag indicating if event module should be added to module list</returns>
        </member>
        <member name="T:T.Kernel.Core.ExitModuleList">
            <summary>
            Define signature of the method that is called after event object exits of module list
            </summary>
            <param name="evObj">Event object exiting</param>
        </member>
        <member name="T:T.Kernel.Core.EventBase">
            <summary>
            EventBase: Event of a object
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventBase.disposed">
            <summary>
            Flag indicating if this object already was disposed
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventBase.priority">
            <summary>
            Priority of the event
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventBase.eventID">
            <summary>
            Event ID
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventBase.extendEvent1">
            <summary>
            Extended event ID 1
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventBase.linkEventModule">
            <summary>
            Reference to the event in module list
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventBase.Priority">
            <summary>
            Get priority of the event
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventBase.EventID">
            <summary>
            Event ID
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventBase.ExtendEvent1">
            <summary>
            Extended event ID 1
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventBase.ExtendEvent2">
            <summary>
            Extended event ID 2
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventBase.LinkEventModule">
            <summary>
            Set and get reference to the event in module list
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventBase.ProtectRecursiveEvent">
            <summary>
            Get number to protect against recursive generate event
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:T.Kernel.Core.EventBase.ReceiveForChangingReferences" -->
        <member name="P:T.Kernel.Core.EventBase.Thread">
            <summary>
            Get thread when instance was created
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventBase.IsDisposed">
            <summary>
            Get flag indicating if this object already was disposed
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventBase.EnterModuleList">
            <summary>
            Get define signature of the method that is called before event object enters in module list
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventBase.ExitModuleList">
            <summary>
            Get define signature of the method that is called after event object exits of module list
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventBase.AfterChangeValue">
            <summary>
            Get define signature of the method that is called after changing objType
            </summary>
        </member>
        <member name="M:T.Kernel.Core.EventBase.#ctor">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Kernel.Core.EventBase.#ctor(System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
        </member>
        <member name="M:T.Kernel.Core.EventBase.#ctor(System.Int32,System.Object)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
        </member>
        <member name="M:T.Kernel.Core.EventBase.#ctor(System.Int32,T.Kernel.Core.EventPriority)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="priority">Priority of the event</param>
        </member>
        <member name="M:T.Kernel.Core.EventBase.#ctor(System.Int32,System.Object,T.Kernel.Core.EventPriority)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
            <param name="priority">Priority of the event</param>
        </member>
        <member name="M:T.Kernel.Core.EventBase.Init(System.Int32,System.Object,T.Kernel.Core.EventPriority)">
            <summary>
            Initialize the instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
            <param name="priority">Priority of the event</param>
        </member>
        <member name="M:T.Kernel.Core.EventBase.Clone">
            <summary>
            Clone the instance of this class
            </summary>
            <returns>New instance</returns>
        </member>
        <member name="T:T.Kernel.Core.EventImmediately">
            <summary>
            EventImmediately: Event of a object, EventPriority.Immediately
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventImmediately.thread">
            <summary>
            Thread when instance was created
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventImmediately.Thread">
            <summary>
            Get thread when instance was created
            </summary>
        </member>
        <member name="M:T.Kernel.Core.EventImmediately.#ctor">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Kernel.Core.EventImmediately.#ctor(System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
        </member>
        <member name="M:T.Kernel.Core.EventImmediately.#ctor(System.Int32,System.Object)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
        </member>
        <member name="M:T.Kernel.Core.EventImmediately.#ctor(System.Int32,T.Kernel.Core.EventPriority)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="priority">Priority of the event</param>
        </member>
        <member name="M:T.Kernel.Core.EventImmediately.#ctor(System.Int32,System.Object,T.Kernel.Core.EventPriority)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
            <param name="priority">Priority of the event</param>
        </member>
        <member name="M:T.Kernel.Core.EventImmediately.Clone">
            <summary>
            Clone the instance of this class
            </summary>
            <returns>New instance</returns>
        </member>
        <member name="T:T.Kernel.Core.EventProtectionRecursive">
            <summary>
            EventImmediately: Event of a object with protection recursive
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventProtectionRecursive.protectRecursiveEvent">
            <summary>
            Protect against recursive generate event
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventProtectionRecursive.ProtectRecursiveEvent">
            <summary>
            Get thread when instance was created
            </summary>
        </member>
        <member name="M:T.Kernel.Core.EventProtectionRecursive.#ctor">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Kernel.Core.EventProtectionRecursive.#ctor(System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
        </member>
        <member name="M:T.Kernel.Core.EventProtectionRecursive.#ctor(System.Int32,System.Object)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
        </member>
        <member name="M:T.Kernel.Core.EventProtectionRecursive.#ctor(System.Int32,T.Kernel.Core.EventPriority)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="priority">Priority of the event</param>
        </member>
        <member name="M:T.Kernel.Core.EventProtectionRecursive.#ctor(System.Int32,System.Object,T.Kernel.Core.EventPriority,System.Int64)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
            <param name="priority">Priority of the event</param>
        </member>
        <member name="M:T.Kernel.Core.EventProtectionRecursive.Clone">
            <summary>
            Clone the instance of this class
            </summary>
            <returns>New instance</returns>
        </member>
        <member name="T:T.Kernel.Core.EventAdvanced">
            <summary>
            EventBase: Event of a object: All properties
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventAdvanced.extendEvent2">
            <summary>
            Extended event ID 2
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventAdvanced.protectRecursiveEvent">
            <summary>
            Protect against recursive generate event
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventAdvanced.receiveForChangingReferences">
            <summary>
            Flag indicating whether should receive for changings references
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventAdvanced.thread">
            <summary>
            Thread when instance was created
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventAdvanced.enterModuleList">
            <summary>
            Delegate method that is called before event object enters in module list
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventAdvanced.exitModuleList">
            <summary>
            Delegate method that is called after event object exits of module list
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventAdvanced.afterChangeValue">
            <summary>
            Delegate method that is called after changing objType
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventAdvanced.ExtendEvent2">
            <summary>
            Extended event ID 2
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventAdvanced.ProtectRecursiveEvent">
            <summary>
            Get number to protect against recursive generate event
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:T.Kernel.Core.EventAdvanced.ReceiveForChangingReferences" -->
        <member name="P:T.Kernel.Core.EventAdvanced.Thread">
            <summary>
            Get thread when instance was created
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventAdvanced.EnterModuleList">
            <summary>
            Get define signature of the method that is called before event object enters in module list
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventAdvanced.ExitModuleList">
            <summary>
            Get define signature of the method that is called after event object exits of module list
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventAdvanced.AfterChangeValue">
            <summary>
            Get define signature of the method that is called after changing objType
            </summary>
        </member>
        <member name="M:T.Kernel.Core.EventAdvanced.#ctor">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Kernel.Core.EventAdvanced.#ctor(System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
        </member>
        <member name="M:T.Kernel.Core.EventAdvanced.#ctor(System.Int32,System.Object)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
        </member>
        <member name="M:T.Kernel.Core.EventAdvanced.#ctor(System.Int32,System.Object,System.Object)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
            <param name="extendEvent2">Extended event ID 2</param>
        </member>
        <member name="M:T.Kernel.Core.EventAdvanced.#ctor(System.Int32,T.Kernel.Core.EventPriority)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="priority">Priority of the event</param>
        </member>
        <member name="M:T.Kernel.Core.EventAdvanced.#ctor(System.Int32,System.Object,T.Kernel.Core.EventPriority)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
            <param name="priority">Priority of the event</param>
        </member>
        <member name="M:T.Kernel.Core.EventAdvanced.#ctor(System.Int32,System.Object,System.Object,T.Kernel.Core.EventPriority)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
            <param name="extendEvent2">Extended event ID 2</param>
            <param name="priority">Priority of the event</param>
        </member>
        <member name="M:T.Kernel.Core.EventAdvanced.#ctor(System.Int32,System.Object,System.Object,T.Kernel.Core.EventPriority,System.Int64)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
            <param name="extendEvent2">Extended event ID 2</param>
            <param name="priority">Priority of the event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
        </member>
        <member name="M:T.Kernel.Core.EventAdvanced.#ctor(System.Int32,System.Object,System.Object,T.Kernel.Core.EventPriority,System.Int64,T.Kernel.Core.EnterModuleList,T.Kernel.Core.ExitModuleList,T.Kernel.Core.AfterChangeValue)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
            <param name="extendEvent2">Extended event ID 2</param>
            <param name="priority">Priority of the event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="enterModuleList">Delegate method that is called before event object enters in module list</param>
            <param name="exitModuleList">Delegate method that is called after event object exits of module list</param>
            <param name="afterChangeValue">Delegate method that is called after changing objType</param>
        </member>
        <member name="M:T.Kernel.Core.EventAdvanced.#ctor(System.Int32,System.Object,System.Object,T.Kernel.Core.EventPriority,System.Int64,T.Kernel.Core.EnterModuleList,T.Kernel.Core.ExitModuleList,T.Kernel.Core.AfterChangeValue,System.Boolean)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
            <param name="extendEvent2">Extended event ID 2</param>
            <param name="priority">Priority of the event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="enterModuleList">Delegate method that is called before event object enters in module list</param>
            <param name="exitModuleList">Delegate method that is called after event object exits of module list</param>
            <param name="afterChangeValue">Delegate method that is called after changing objType</param>
            <param name="receiveForChangingReferences">Flag indicating whether should receive for changings references</param>
        </member>
        <member name="M:T.Kernel.Core.EventAdvanced.Init(System.Object,System.Int64,T.Kernel.Core.EnterModuleList,T.Kernel.Core.ExitModuleList,T.Kernel.Core.AfterChangeValue,System.Boolean)">
            <summary>
            Initialize the instance of this class
            </summary>
            <param name="extendEvent2">Extended event ID 2</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="enterModuleList">Delegate method that is called before event object enters in module list</param>
            <param name="exitModuleList">Delegate method that is called after event object exits of module list</param>
            <param name="afterChangeValue">Delegate method that is called after changing objType</param>
            <param name="receiveForChangingReferences">Flag indicating whether should receive for changings references</param>
        </member>
        <member name="M:T.Kernel.Core.EventAdvanced.Clone">
            <summary>
            Clone the instance of this class
            </summary>
            <returns>New instance</returns>
        </member>
        <member name="T:T.Kernel.Core.EventWriteChanhge">
            <summary>
            EventChangeUp: Event of a object when value is down
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventWriteChanhge.protectRecursiveEvent">
            <summary>
            Protect against recursive generate event
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventWriteChanhge.enterModuleList">
            <summary>
            Delegate method that is called before event object enters in module list
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventWriteChanhge.ProtectRecursiveEvent">
            <summary>
            Get number to protect against recursive generate event
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventWriteChanhge.EnterModuleList">
            <summary>
            Get define signature of the method that is called before event object enters in module list
            </summary>
        </member>
        <member name="M:T.Kernel.Core.EventWriteChanhge.#ctor(System.Int32,System.Object,T.Kernel.Core.EventPriority,System.Int64,T.Kernel.Core.EnterModuleList)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
            <param name="priority">Priority of the event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="enterModuleList">Delegate method that is called before event object enters in module list</param>
        </member>
        <member name="M:T.Kernel.Core.EventWriteChanhge.Clone">
            <summary>
            Clone the instance of this class
            </summary>
            <returns>New instance</returns>
        </member>
        <member name="T:T.Kernel.Core.EventChangeDown">
            <summary>
            EventChangeDown: Event of a object when value is down
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventChangeDown.protectRecursiveEvent">
            <summary>
            Protect against recursive generate event
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventChangeDown.enterModuleList">
            <summary>
            Delegate method that is called before event object enters in module list
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventChangeDown.ProtectRecursiveEvent">
            <summary>
            Get number to protect against recursive generate event
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventChangeDown.EnterModuleList">
            <summary>
            Get define signature of the method that is called before event object enters in module list
            </summary>
        </member>
        <member name="M:T.Kernel.Core.EventChangeDown.#ctor(System.Int32,System.Object,T.Kernel.Core.EventPriority,System.Int64,T.Kernel.Core.EnterModuleList)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
            <param name="priority">Priority of the event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="enterModuleList">Delegate method that is called before event object enters in module list</param>
        </member>
        <member name="M:T.Kernel.Core.EventChangeDown.Clone">
            <summary>
            Clone the instance of this class
            </summary>
            <returns>New instance</returns>
        </member>
        <member name="T:T.Kernel.Core.EventChangeUp">
            <summary>
            EventChangeUp: Event of a object when value is down
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventChangeUp.protectRecursiveEvent">
            <summary>
            Protect against recursive generate event
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventChangeUp.enterModuleList">
            <summary>
            Delegate method that is called before event object enters in module list
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventChangeUp.ProtectRecursiveEvent">
            <summary>
            Get number to protect against recursive generate event
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventChangeUp.EnterModuleList">
            <summary>
            Get define signature of the method that is called before event object enters in module list
            </summary>
        </member>
        <member name="M:T.Kernel.Core.EventChangeUp.#ctor(System.Int32,System.Object,T.Kernel.Core.EventPriority,System.Int64,T.Kernel.Core.EnterModuleList)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1</param>
            <param name="priority">Priority of the event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="enterModuleList">Delegate method that is called before event object enters in module list</param>
        </member>
        <member name="M:T.Kernel.Core.EventChangeUp.Clone">
            <summary>
            Clone the instance of this class
            </summary>
            <returns>New instance</returns>
        </member>
        <member name="T:T.Kernel.Core.EventModule">
            <summary>
            EventModule: Event of a TModule
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventModule.objRef">
            <summary>
            Reference to object in database
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventModule.linkEventBase">
            <summary>
            Reference to the event in datatase
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventModule.source">
            <summary>
            Source TModule ID
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventModule.extendedSource">
            <summary>
            Extended TModule ID
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventModule.value">
            <summary>
            Value
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventModule.quality">
            <summary>
            Quality
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventModule.timestamp">
            <summary>
            TimeStamp
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventModule.userName">
            <summary>
            User name changes the value 
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventModule.raiseEvent">
            <summary>
            Event handler
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventModule.uniqueEventNumber">
            <summary>
            Unique event number
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventModule.isReferenceChanged">
            <summary>
            Flag indicating whether reference was changed
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventModule.isValueForced">
            <summary>
            Flag indicating whether objType was forced
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventModule.ObjRef">
            <summary>
            Get reference to object in database
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventModule.LinkEventBase">
            <summary>
            Get reference to the event in datatase
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventModule.Source">
            <summary>
            Get source TModule id
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventModule.ExtendedSource">
            <summary>
            Get extended source TModule id
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventModule.Value">
            <summary>
            Get objType
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventModule.UserName">
            <summary>
            Get user name changes the value 
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventModule.Quality">
            <summary>
            Get quality
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventModule.Timestamp">
            <summary>
            Get time stamp
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventModule.IsValueForced">
            <summary>
            Get and set flag indicating whether objType was forced
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventModule.RaiseEvent">
            <summary>
            Get event handler
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventModule.UniqueEventNumber">
            <summary>
            Get unique event number
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventModule.IsReferenceChanged">
            <summary>
            Get flag indicating whether reference was changed
            </summary>
        </member>
        <member name="M:T.Kernel.Core.EventModule.#ctor">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Kernel.Core.EventModule.#ctor(T.Kernel.Core.ObjRef,T.Kernel.Core.EventBase,System.Int32,System.Int32,System.Object,System.Delegate)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objRef">Reference to object in database</param>
            <param name="linkEventBase">Reference to the event in datatase</param>
            <param name="source">Source TModule ID</param>
            <param name="extendedSource">Extended TModule ID</param>
            <param name="objType">Value</param>
            <param name="raiseEvent">Event handler</param>
        </member>
        <member name="M:T.Kernel.Core.EventModule.#ctor(T.Kernel.Core.ObjRef,T.Kernel.Core.EventBase,System.Int32,System.Int32,System.Object,System.Boolean,System.Delegate)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objRef">Reference to object in database</param>
            <param name="linkEventBase">Reference to the event in datatase</param>
            <param name="source">Source TModule ID</param>
            <param name="extendedSource">Extended TModule ID</param>
            <param name="objType">Value</param>
            <param name="isValueForced">Flag indicating whether objType was forced</param>
            <param name="raiseEvent">Event handler</param>
        </member>
        <member name="M:T.Kernel.Core.EventModule.#ctor(T.Kernel.Core.ObjRef,T.Kernel.Core.EventBase,System.Int32,System.Int32,System.Object,System.Int32,System.DateTimeOffset,System.Boolean,System.Delegate)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objRef">Reference to object in database</param>
            <param name="linkEventBase">Reference to the event in datatase</param>
            <param name="source">Source TModule ID</param>
            <param name="extendedSource">Extended TModule ID</param>
            <param name="objType">Value</param>
            <param name="quality">Quality</param>
            <param name="timestamp">Timestamp</param>
            <param name="isValueForced">Flag indicating whether objType was forced</param>
            <param name="raiseEvent">Event handler</param>
        </member>
        <member name="M:T.Kernel.Core.EventModule.#ctor(T.Kernel.Core.ObjRef,T.Kernel.Core.EventBase,System.Int32,System.Int32,System.Object,System.Int32,System.DateTimeOffset,System.Boolean,System.Delegate,System.Boolean,System.String)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objRef">Reference to object in database</param>
            <param name="linkEventBase">Reference to the event in datatase</param>
            <param name="source">Source TModule ID</param>
            <param name="extendedSource">Extended TModule ID</param>
            <param name="quality">Quality</param>
            <param name="timestamp">Timestamp</param>
            <param name="isValueForced">Flag indicating whether objType was forced</param>
            <param name="raiseEvent">Event handler</param>
            <param name="isReferenceChanged">Flag indicating whether reference was changed</param>
            <param name="userName">User name changes the value</param>
        </member>
        <member name="M:T.Kernel.Core.EventModule.Init(T.Kernel.Core.ObjRef,T.Kernel.Core.EventBase,System.Int32,System.Int32,System.Object,System.Int32,System.DateTimeOffset,System.Boolean,System.Delegate,System.Boolean,System.String)">
            <summary>
            Initialize the instance of this class
            </summary>
            <param name="objRef">Reference to object in database</param>
            <param name="linkEventBase">Reference to the event in datatase</param>
            <param name="source">Source TModule ID</param>
            <param name="extendedSource">Extended TModule ID</param>
            <param name="quality">Quality</param>
            <param name="timestamp">Timestamp</param>
            <param name="isValueForced">Flag indicating whether objType was forced</param>
            <param name="raiseEvent">Event handler</param>
            <param name="isReferenceChanged">Flag indicating whether reference was changed</param>
            <param name="userName">User name changes the value</param>
        </member>
        <member name="M:T.Kernel.Core.EventModule.Clone">
            <summary>
            Clone the instance of this class
            </summary>
            <returns>New instance</returns>
        </member>
        <member name="M:T.Kernel.Core.EventModule.Reset">
            <summary>
            Reset fields
            </summary>
        </member>
        <member name="T:T.Kernel.Core.GlobalModuleInfo">
            <summary>
            Define information about module
            </summary>
        </member>
        <member name="F:T.Kernel.Core.GlobalModuleInfo.Name">
            <summary>
            Module name
            </summary>
        </member>
        <member name="F:T.Kernel.Core.GlobalModuleInfo.AdditionalName">
            <summary>
            Additional name
            </summary>
        </member>
        <member name="F:T.Kernel.Core.GlobalModuleInfo.IP">
            <summary>
            IP address
            </summary>
        </member>
        <member name="F:T.Kernel.Core.GlobalModuleInfo.isClientModule">
            <summary>
            Flag indicating if module is running on client computer
            </summary>
        </member>
        <member name="F:T.Kernel.Core.GlobalModuleInfo.isViewClient">
            <summary>
            Flag indicating if module is a View Client
            </summary>
        </member>
        <member name="F:T.Kernel.Core.GlobalModuleInfo.ObjID">
            <summary>
            Reference to object
            </summary>
        </member>
        <member name="M:T.Kernel.Core.GlobalModuleInfo.#ctor(System.String,System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Construct an instance
            </summary>
            <param name="name">Module name</param>
            <param name="additionalName">Additional name</param>
            <param name="ip">IP address</param>
            <param name="isClientModule">Flag indicating if module is running on client computer</param>
            <param name="objID">Reference to object</param>
        </member>
        <member name="T:T.Kernel.Core.GlobalModuleInfoList">
            <summary>
            Define the global list of modules
            </summary>
        </member>
        <member name="F:T.Kernel.Core.GlobalModuleInfoList.globalModuleInfo">
            <summary>
            Array with a list of modules
            </summary>
        </member>
        <member name="M:T.Kernel.Core.GlobalModuleInfoList.AddModule(System.String,System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Add information about module
            </summary>
            <param name="name">Module name</param>
            <param name="additionalName">Additional name</param>
            <param name="ip">IP address</param>
            <param name="isClientModule">Flag indicating if module is running on client computer</param>
            <param name="objID">Reference to object</param>
            <returns>Return id of the module added</returns>
        </member>
        <member name="M:T.Kernel.Core.GlobalModuleInfoList.RemoveModule(System.Object)">
            <summary>
            Remove module
            </summary>
            <param name="objID">Reference to object</param>
        </member>
        <member name="M:T.Kernel.Core.GlobalModuleInfoList.GetModuleInfo(System.Object)">
            <summary>
            Get information about a module 
            </summary>
            <param name="objID">Reference to object</param>
            <returns>Information about a module</returns>
        </member>
        <member name="M:T.Kernel.Core.GlobalModuleInfoList.GetModuleInfoID(System.Object)">
            <summary>
            Get ID from module
            </summary>
            <param name="objID">Reference to object</param>
            <returns>ID</returns>
        </member>
        <member name="M:T.Kernel.Core.GlobalModuleInfoList.GetModuleInfoCount">
            <summary>
            Get number of module infos
            </summary>
            <returns>Number of module infos</returns>
        </member>
        <member name="M:T.Kernel.Core.GlobalModuleInfoList.GetModuleInfos">
            <summary>
            Get module infos
            </summary>
            <returns>Module infos</returns>
        </member>
        <member name="M:T.Kernel.Core.GlobalModuleInfoList.GetModuleInfoName(System.Int32)">
            <summary>
            Get name of the module
            </summary>
            <param name="id">ID of the module</param>
            <returns>Module name</returns>
        </member>
        <member name="M:T.Kernel.Core.GlobalModuleInfoList.GetModuleInfoIP(System.Int32)">
            <summary>
            Get IP of the module
            </summary>
            <param name="id">ID of the module</param>
            <returns>IP address</returns>
        </member>
        <member name="M:T.Kernel.Core.GlobalModuleInfoList.IsRunningOnClient(System.Int32)">
            <summary>
            Return if module is running on client computer
            </summary>
            <param name="id">ID of the module</param>
            <returns>Flag indicating if module is running on client computer</returns>
        </member>
        <member name="M:T.Kernel.Core.GlobalModuleInfoList.IsRunningOnViewClient(System.Int32)">
            <summary>
            Return if module is a View Client
            </summary>
            <param name="id">ID of the module</param>
            <returns>Flag indicating if module is running on client computer</returns>
        </member>
        <member name="M:T.Kernel.Core.GlobalModuleInfoList.HasAnyClientRunning(System.String[])">
            <summary>
            Check if any module client is running
            </summary>
            <returns>Flag indicating whether any module client is running</returns>
        </member>
        <member name="M:T.Kernel.Core.GlobalModuleInfoList.IsModuleRunningLocal(System.String)">
            <summary>
            Return whether module is running locally
            </summary>
            <param name="name">Module name</param>
            <returns>Flag indicating whether module is running locally</returns>
        </member>
        <member name="M:T.Kernel.Core.GlobalModuleInfoList.IsModuleAdditionalRunning(System.String,System.String)">
            <summary>
            Return whether module is running locally
            </summary>
            <param name="name">Module name</param>
            <param name="additionalName">Additional name</param>
            <returns>Flag indicating whether module is running locally</returns>
        </member>
        <member name="M:T.Kernel.Core.GlobalModuleInfoList.GetModuleAdditionalIP(System.String,System.String)">
            <summary>
            Return whether module is running locally
            </summary>
            <param name="name">Module name</param>
            <param name="additionalName">Additional name</param>
            <returns>Flag indicating whether module is running locally</returns>
        </member>
        <member name="T:T.Kernel.Core.IModuleRun">
            <summary>
            Define the mandatory methods and properties for modules
            </summary>
        </member>
        <member name="P:T.Kernel.Core.IModuleRun.CanPauseAndContinue">
            <summary>
            Get a objType indicating whether the module can be paused and resumed.
            </summary>
        </member>
        <member name="P:T.Kernel.Core.IModuleRun.CanStop">
            <summary>
            Get a objType indicating whether the module can be stopped once it has started.
            </summary>
        </member>
        <member name="M:T.Kernel.Core.IModuleRun.OnStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="IsHotReload">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Kernel.Core.IModuleRun.OnAfterStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module after starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotReloaad">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Kernel.Core.IModuleRun.OnInitialWaitingValueFromServer(System.Int32)">
            <summary>
            Specifies actions to take when the module waiting initial value from server.
            </summary>
        </member>
        <member name="M:T.Kernel.Core.IModuleRun.OnPause">
            <summary>
            Specifies actions to take when a module pauses.
            </summary>
        </member>
        <member name="M:T.Kernel.Core.IModuleRun.OnContinue">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being paused.
            </summary>
        </member>
        <member name="M:T.Kernel.Core.IModuleRun.OnDeactivate">
            <summary>
            Specifies actions to take when a module is deactivated.
            </summary>
        </member>
        <member name="M:T.Kernel.Core.IModuleRun.OnActivate">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being deactivated.
            </summary>
        </member>
        <member name="M:T.Kernel.Core.IModuleRun.OnStop(System.Boolean)">
            <summary>
            Specifies actions to take when a module stops running.
            </summary>
            <param name="isHotStarting">Flag indicating whether module should shutdown prepared to after hot starting</param>
        </member>
        <member name="T:T.Kernel.Core.IModuleRunAsync">
            <summary>
            Define the mandatory methods and properties for modules
            </summary>
        </member>
        <member name="M:T.Kernel.Core.IModuleRunAsync.OnStartAsync(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotReload">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Kernel.Core.IModuleRunAsync.OnStopAsync(System.Boolean)">
            <summary>
            Specifies actions to take when a module stops running.
            </summary>
            <param name="isHotStarting">Flag indicating whether module should shutdown prepared to after hot starting</param>
        </member>
        <member name="T:T.Kernel.Core.IArrayObj">
            <summary>
            Define the mandatory methods and properties for Array classes
            </summary>
        </member>
        <member name="P:T.Kernel.Core.IArrayObj.Rank">
            <summary>
            Get the number of dimensions of the array
            </summary>
        </member>
        <member name="P:T.Kernel.Core.IArrayObj.Length">
            <summary>
            Get length
            </summary>
        </member>
        <member name="M:T.Kernel.Core.IArrayObj.GetSize">
            <summary>
             Get the Size of the Array (elements in Use)
            </summary>
            <returns>size</returns>
        </member>
        <member name="M:T.Kernel.Core.IArrayObj.Resize(System.Int32)">
            <summary>
            Resize the Array
            </summary>
            <param name="newSize"></param>
            <returns></returns>
        </member>
        <member name="M:T.Kernel.Core.IArrayObj.GetLength(System.Int32)">
            <summary>
            Get the number of elements of a specified dimension
            </summary>
            <param name="dimension">A zero-based dimension of the array</param>
            <returns>Number of elements</returns>
        </member>
        <member name="M:T.Kernel.Core.IArrayObj.GetElement(System.Int32[])">
            <summary>
            Get element of the array
            </summary>
            <param name="indexes">Array indexes</param>
            <returns>Element of the array</returns>
        </member>
        <member name="M:T.Kernel.Core.IArrayObj.IsInUse(System.Int32[])">
            <summary>
            Returns if element of the array is in use
            </summary>
            <param name="indexes">Array indexes</param>
            <returns>Flag indicang whether element of the array is in use</returns>
        </member>
        <member name="P:T.Kernel.Core.IArrayObj.IsFlagSnapshot">
            <summary>
            Flag used by snapshot
            </summary>
        </member>
        <member name="P:T.Kernel.Core.IArrayObj.OriginalSize">
            <summary>
            Original size
            </summary>
        </member>
        <member name="T:T.Kernel.Core.ITagObj">
            <summary>
            Define the mandatory methods and properties for Tag classes
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ITagObj.Quality">
            <summary>
            Get and set quality of a tag
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ITagObj.Timestamp">
            <summary>
            Get timestamp of a tag
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ITagObj.GetValue">
            <summary>
            Get objType of the object
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:T.Kernel.Core.ITagObj.GetValueAsync">
            <summary>
            Get objType of the object
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:T.Kernel.Core.ITagObj.GetValue(System.Boolean)">
            <summary>
            Get objType of the object
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:T.Kernel.Core.ITagObj.GetValueAsync(System.Boolean)">
            <summary>
            Get objType of the object
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:T.Kernel.Core.ITagObj.GetFormatedValue(System.Boolean)">
            <summary>
            Get formated value
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:T.Kernel.Core.ITagObj.GetFormatedValueAsync(System.Boolean)">
            <summary>
            Get formated value
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:T.Kernel.Core.ITagObj.SetValue(System.Object,System.Int32,System.DateTimeOffset)">
            <summary>
            Set objType of a tag
            </summary>
            <param name="objType">New objType</param>
            <param name="quality">Quality</param>
            <param name="timestamp">Timestamp</param>
        </member>
        <member name="M:T.Kernel.Core.ITagObj.SetValue(System.Object,System.Int32,System.DateTimeOffset,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64)">
            <summary>
            Set objType of a tag
            </summary>
            <param name="objType">New objType</param>
            <param name="quality">Quality</param>
            <param name="timestamp">Timestamp</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended module ID</param>
            <param name="flags">Flags</param>
            <param name="protectRecursiveEvent">Protection ID</param>
        </member>
        <member name="M:T.Kernel.Core.ITagObj.SetValue(System.Object,System.Int32,System.DateTimeOffset,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set objType of a tag
            </summary>
            <param name="objType">New objType</param>
            <param name="quality">Quality</param>
            <param name="timestamp">Timestamp</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended module ID</param>
            <param name="flags">Flags</param>
            <param name="protectRecursiveEvent">Protection ID</param>
            <param name="canSetValue">Callback method that is called for ckecking whether should set value</param>
            <param name="userName">User name changes the value</param>
        </member>
        <member name="M:T.Kernel.Core.ITagObj.CanAddUsedTags(System.Int32)">
            <summary>
            Can add in used tags
            </summary>
            <param name="id">ID</param>
            <returns>Flag</returns>
        </member>
        <member name="M:T.Kernel.Core.ITagObj.PreloadMainProperties">
            <summary>
            Preload main properties
            </summary>
        </member>
        <member name="M:T.Kernel.Core.IDatasetQuery.BeginSelectCommandAsync(System.AsyncCallback)">
            <summary>
            Begin execution of select command 
            </summary>
            <param name="layoutName"></param>
        </member>
        <member name="M:T.Kernel.Core.IDatasetQuery.EndSelectCommand(System.IAsyncResult)">
            <summary>
            end execution of select command 
            </summary>
            <param name="layoutName"></param>
        </member>
        <member name="M:T.Kernel.Core.IDatasetQuery.SelectCommandWithStatusAsync(T.Library.TRef{System.Int32})">
            <summary>
            Select command
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:T.Kernel.Core.IDatasetTable.BeginSelectCommandAsync(System.AsyncCallback)">
            <summary>
            Begin execution of select command 
            </summary>
            <param name="layoutName"></param>
        </member>
        <member name="M:T.Kernel.Core.IDatasetTable.EndSelectCommand(System.IAsyncResult)">
            <summary>
            end execution of select command 
            </summary>
            <param name="layoutName"></param>
        </member>
        <member name="M:T.Kernel.Core.IDatasetTable.BeginUpdateCommandAsync(System.AsyncCallback,System.Data.DataTable)">
            <summary>
            Begin execution of update command 
            </summary>
            <param name="layoutName"></param>
        </member>
        <member name="M:T.Kernel.Core.IDatasetTable.EndUpdateCommand(System.IAsyncResult)">
            <summary>
            end execution of update command 
            </summary>
            <param name="layoutName"></param>
        </member>
        <member name="M:T.Kernel.Core.IDatasetTable.UpdateCommandAsync(System.Data.DataTable)">
            <summary>
            Update command
            </summary>
            <param name="newTable"></param>
            <param name="statusMessage"></param>
            <returns></returns>
        </member>
        <member name="M:T.Kernel.Core.IDatasetTable.SelectCommandWithStatusAsync(T.Library.TRef{System.Int32})">
            <summary>
            Select command
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="F:T.Kernel.Core.Licensing.server">
            <summary>
            Reference to the object objServer
            </summary>
        </member>
        <member name="M:T.Kernel.Core.Licensing.#ctor(T.Kernel.Core.ObjectServer)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objServer"></param>
        </member>
        <member name="M:T.Kernel.Core.Licensing.IsModuleAllowed(System.String,System.String,System.String@)">
            <summary>
            Check is module is valid
            </summary>
            <param name="moduleName">Module name</param>
            <param name="additionalName">Additional module name</param>
            <returns>Flag indicating whether module is allowed</returns>
        </member>
        <member name="F:T.Kernel.Core.LimitAccessInWindows.mtInternal1EnableTaskSwitching">
            <summary>
            Mutex for enable task switching
            </summary>
        </member>
        <member name="F:T.Kernel.Core.LimitAccessInWindows.mtInternal1DisableTaskSwitching">
            <summary>
            Mutex for disable task switching
            </summary>
        </member>
        <member name="F:T.Kernel.Core.LimitAccessInWindows.updateThread">
            <summary>
            Thread to update internal tags
            </summary>
        </member>
        <member name="F:T.Kernel.Core.LimitAccessInWindows.startedUpdateThread">
            <summary>
            Flag indicating if the update thread started
            </summary>
        </member>
        <member name="F:T.Kernel.Core.LimitAccessInWindows.stopUpdateThread">
            <summary>
            Flag indicating if the update thread should stop
            </summary>
        </member>
        <member name="F:T.Kernel.Core.LimitAccessInWindows.hasError">
            <summary>
            Flag indicating if thread was created successfully
            </summary>
        </member>
        <member name="F:T.Kernel.Core.LimitAccessInWindows.enableAccessToWindows">
            <summary>
            Flag indicating if access to Windows is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.LimitAccessInWindows.callEnableAccessToWindows">
            <summary>
            Flag indicating if should enable access to Windows
            </summary>
        </member>
        <member name="F:T.Kernel.Core.LimitAccessInWindows.callDisableAccessToWindows">
            <summary>
            Flag indicating if should disable access to Windows
            </summary>
        </member>
        <member name="P:T.Kernel.Core.LimitAccessInWindows.HasError">
            <summary>
            Get flag indicating if thread was created successfully
            </summary>
        </member>
        <member name="P:T.Kernel.Core.LimitAccessInWindows.Enable">
            <summary>
            Get and set enable or disable access to Windows
            </summary>
        </member>
        <member name="M:T.Kernel.Core.LimitAccessInWindows.#ctor">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Kernel.Core.LimitAccessInWindows.Dispose">
            <summary>
            Dispose instance
            </summary>
        </member>
        <member name="M:T.Kernel.Core.LimitAccessInWindows.ThreadMethod">
            <summary>
            Thread method
            </summary>
        </member>
        <member name="M:T.Kernel.Core.LimitAccessInWindows.WaitProcessInternal1ReleaseMutex(System.Boolean)">
            <summary>
            Wait process Internal1 set flag indicating that this thread can get mutex again
            </summary>
            <param name="flag">Indicate which mutex is releasing: enable (true) or disable (false)</param>
        </member>
        <member name="M:T.Kernel.Core.LimitAccessInWindows.ResetReleaseMutexFlag(System.Boolean)">
            <summary>
            Reset release mutex flag
            </summary>
            <param name="flag">Indicate which mutex is releasing: enable (true) or disable (false)</param>
        </member>
        <member name="T:T.Kernel.Core.ListObj">
            <summary>
            Contain list of runtime objects
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ListObj.runtimeObjects">
            <summary>
            List of runtime objects
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ListObj.runtimeObjectsCount">
            <summary>
            Number of runtime objects
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ListObj.isObjTypeTagObj">
            <summary>
            Flag indicating whether Object Type is TagObj
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ListObj.isFirstAccessTagObj">
            <summary>
            Flag indicating whether if first access for TagObj
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ListObj.dicOfNames">
            <summary>
            Dictionary containg ids by name
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ListObj.arrayIndexes">
            <summary>
            Array indexes if parent is ArrayObj
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ListObj.dicOfNamesTagObj">
            <summary>
            Dictionary containg ids by name from any TagObj derived class
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ListObj.Count">
            <summary>
            Get the number of elements in the list of the runtime objects
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ListObj.Item(System.Int32)">
            <summary>
            Get runtime object based in an ID
            </summary>
            <param name="id">ID of the runtime object</param>
            <returns>Runtime object</returns>
        </member>
        <member name="P:T.Kernel.Core.ListObj.Item(System.String)">
            <summary>
            Get runtime object based in an ID
            </summary>
            <param name="id">ID of the runtime object</param>
            <returns>Runtime object</returns>
        </member>
        <member name="P:T.Kernel.Core.ListObj.ArrayIndexes">
            <summary>
            Get array indexes if parent is ArrayObj
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ListObj.ObjServer">
            <summary>
            Reference to ObjectServer instance
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ListObj.SyncRoot">
            <summary>
            Object used to synchronize access
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ListObj.#ctor(T.Kernel.Core.ObjectServer)">
            <summary>
            Construct the instance
            </summary>
            <param name="objServer">Reference to main object</param>
        </member>
        <member name="M:T.Kernel.Core.ListObj.#ctor(T.Kernel.Core.RunObj,T.TSystem.eObjType,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="type">Object parentType</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Kernel.Core.ListObj.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="type">Object parentType</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Kernel.Core.ListObj.#ctor(T.Kernel.Core.RunObj,T.TSystem.eObjType,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="parentType">Object parentType</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Core.ListObj.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="parentType">Object parentType</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Core.ListObj.GetName(System.Int32)">
            <summary>
            Get name of the runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Name of the runtime object</returns>
        </member>
        <member name="M:T.Kernel.Core.ListObj.CreateObj(System.Int32)">
            <summary>
            Create runtime object only whether if it does not exit yet
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Core.ListObj.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Core.ListObj.OnResolveID(System.Int32)">
            <summary>
            Resolve ID
            </summary>
            <param name="id">ID</param>
            <returns>Resolved ID</returns>
        </member>
        <member name="M:T.Kernel.Core.ListObj._GetObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Core.ListObj.GetObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Core.ListObj.GetObjAsObject(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Core.ListObj.GetObjAsDynamic(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Core.ListObj.IsInUse(System.Int32)">
            <summary>
            Return whether object is in use
            </summary>
            <param name="id">ID to check</param>
            <returns>Number of instances the object is in use</returns>
        </member>
        <member name="M:T.Kernel.Core.ListObj.GetObj``2(``1)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Core.ListObj.GetObj``1(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Core.ListObj.GetObj(System.String)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Core.ListObj.SetObj(System.Int32,T.Kernel.Core.RunObj)">
            <summary>
            Set runtime object
            </summary>
            <param name="id">ID to set</param>
            <param name="obj">Runtime object</param>
        </member>
        <member name="M:T.Kernel.Core.ListObj.SetObj(System.String,T.Kernel.Core.RunObj)">
            <summary>
            Set runtime object
            </summary>
            <param name="id">ID to set</param>
            <param name="obj">Runtime object</param>
        </member>
        <member name="M:T.Kernel.Core.ListObj.GetID(System.String)">
            <summary>
            Get ID of runtime object based to name
            </summary>
            <param name="name">Name of runtime object</param>
            <returns>ID</returns>
        </member>
        <member name="M:T.Kernel.Core.ListObj.ClearCacheNames">
            <summary>
            Clear cache
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ListObj.CheckRuntimeObjects">
            <summary>
            Check runtime objects
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ListObj.CheckRuntimeObjectsTagObj(System.Int32)">
            <summary>
            Check runtime objects of TagObj's
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ListObj.UpdateRuntimeObjects">
            <summary>
            Check runtimeobjects objects
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ListObj.PreloadRunObj(System.Int32)">
            <summary>
            Preload runtime object
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ListObj.StartPreloadRunObjs(System.Boolean)">
            <summary>
            Start preload runtime objects
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ListObj.StartPreloadRunObjs(System.String[],System.Boolean)">
            <summary>
            Start preload runtime objects
            </summary>
            <param name="excludeNames">Exclude names</param>
        </member>
        <member name="T:T.Kernel.Core.ListObj`1">
            <summary>
            Contain list of runtime objects
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ListObj`1.Item(System.Int32)">
            <summary>
            Get runtime object based in an ID
            </summary>
            <param name="id">ID of the runtime object</param>
            <returns>Runtime object</returns>
        </member>
        <member name="P:T.Kernel.Core.ListObj`1.Item(System.String)">
            <summary>
            Get runtime object based in an ID
            </summary>
            <param name="id">ID of the runtime object</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Core.ListObj`1.#ctor(T.Kernel.Core.ObjectServer)">
            <summary>
            Construct the instance
            </summary>
            <param name="objServer">Reference to main object</param>
        </member>
        <member name="M:T.Kernel.Core.ListObj`1.#ctor(T.Kernel.Core.RunObj,T.TSystem.eObjType,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="type">Object parentType</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Kernel.Core.ListObj`1.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="type">Object parentType</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Kernel.Core.ListObj`1.#ctor(T.Kernel.Core.RunObj,T.TSystem.eObjType,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="type">Object parentType</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Core.ListObj`1.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="parentType">Object parentType</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="T:T.Kernel.Core.ModuleBase">
            <summary>
            Base class for all runtime objects
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleBase.tmodule">
            <summary>
            Reference to module
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleBase.TModule">
            <summary>
            Get reference to module
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ModuleBase.#ctor(T.Kernel.Core.ObjectServer)">
            <summary>
            Construct the instance
            </summary>
            <param name="objServer">Reference to main object</param>
        </member>
        <member name="M:T.Kernel.Core.ModuleBase.#ctor(T.Kernel.Core.RunObj,T.TSystem.eObjType,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="type">Object parentType</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Kernel.Core.ModuleBase.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="type">Object parentType</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="P:T.Kernel.Core.ModuleBase`1.Item(System.Int32)">
            <summary>
            Get runtime object based in an ID
            </summary>
            <param name="id">ID of the runtime object</param>
            <returns>Runtime object</returns>
        </member>
        <member name="P:T.Kernel.Core.ModuleBase`1.Item(System.String)">
            <summary>
            Get runtime object based in an ID
            </summary>
            <param name="id">ID of the runtime object</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Core.ModuleBase`1.#ctor(T.Kernel.Core.ObjectServer)">
            <summary>
            Construct the instance
            </summary>
            <param name="objServer">Reference to main object</param>
        </member>
        <member name="M:T.Kernel.Core.ModuleBase`1.#ctor(T.Kernel.Core.RunObj,T.TSystem.eObjType,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="type">Object parentType</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Kernel.Core.ModuleBase`1.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="type">Object parentType</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="T:T.Kernel.Core.ObjectServer">
            <summary>
            Main class to access object database, security system, etc.
            </summary>
        </member>
        <member name="T:T.Kernel.Core.ObjectServer.eErrors">
            <summary>
            Possible return errors
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.solutionNameParameter">
            <summary>
            solutionName
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.compactSolutionName">
            <summary>
            String containg compact solution name
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.isReleaseFile">
            <summary>
            Flag indicating whether FileType property of solution is Release
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.isPublishedFile">
            <summary>
            Flag indicating whether Published property of solution is Release
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.isAdvancedLogEnabled">
            <summary>
            Flag indicating whether Advanced Diagnostic Log is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.newSolutionFullName">
            <summary>
            New solution full name
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.userName">
            <summary>
            User name
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.pass">
            <summary>
            Password
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.serverName">
            <summary>
            Server Name used when Server must connect with Remote DBServer Service
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.serverVersionPath">
            <summary>
            Server Version Path used when Server must connect with Remote DBServer Service
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.syncObject">
            <summary>
            Reference to the SyncObject object
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.serviceClient">
            <summary>
            Reference to the ServiceClient object
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.openError">
            <summary>
            String containing information to help indicate error in Open method
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.errorCodeSyncConnection">
            <summary>
            Contain an error code while sync module is trying to connect to server
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.shouldClose">
            <summary>
            Flag to indicate if the module using this object should close
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.shutDownCalled">
            <summary>
            Flag to indicate whether Server.Shutdown was called
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.shutDownCalledTime">
            <summary>
            DateTime when Server.Shutdown was called
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.shouldRestartUpdatingProject">
            <summary>
            Flag to indicate if the server should be restart with update project
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.limitAccessInWindows">
            <summary>
            Limit acess of some features of Windows (Alt+Esc, Ctrl+Esc, WinKeys, TaskBar)
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.dicOfThreadIDByModuleID">
            <summary>
            Contain a map of thread ID by module ID
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.appDomainModuleID">
            <summary>
            TModule ID from AppDomain
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.onlineConfig">
            <summary>
            Flag indicating whether oline configuration is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.profile">
            <summary>
            Integer indicating the profile number in execution
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.isActivated">
            <summary>
            Flag indicating whether server is activated
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.isHotReloading">
            <summary>
            Flag indicating whether server is starting as hot startup
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.cultureInfo">
            <summary>
            Current culture info
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.runException">
            <summary>
            Reference to RunException object
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.modules">
            <summary>
            List of all modules
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.runningOnDocker">
            <summary>
            Flag indicating whether runinng on docker
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.mutexOfServerPort">
            <summary>
            Object used to identify any server is running in main port
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.mutexOfServerSolutionNamePort">
            <summary>
            Object used to identify that solution is running in main port
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.isFallback">
            <summary>
            Flag indicating whether fallback is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.isRedundancyEnabled">
            <summary>
            Flag indicating whether redundancy is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.isSwitchToPrimaryEnabled">
            <summary>
            Flag indicating whether should switch to primary when it is started
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.timeToSwicthToPrimary">
            <summary>
            Timespan to switch to primary
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.listOfModuleList">
            <summary>
            Reference to list containg information about modules
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.wasConnectedToPairRedundant">
            <summary>
            Flag indicating whether server was connected to pair redundant during server.shutdown
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.startedUTCTime">
            <summary>
            Started time in UTC
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.listOfDataSetObjects">
            <summary>
            List containg DataSet objects
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.isOpen">
            <summary>
             Flag indicating whether ObjectServer is open
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.mainThread">
            <summary>
            Reference to the main thread
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.Guid">
            <summary>
            Get unique identification for ObjectServer object
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.MainModuleName">
            <summary>
            Get name of the main module that instanced ObjectServer object
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.AssemblyPath">
            <summary>
            Get full path of the assemblies that will be loaded dynamically
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.DB">
            <summary>
            Get reference to the databsae
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.Security">
            <summary>
            Get reference to the security system
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.TraceSetup">
            <summary>
            Get reference to the diagnostics system
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.Licensing">
            <summary>
            Get reference to the licensing system
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.RunningAtServer">
            <summary>
            Get if it is running at objServer
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.RunningAtClient">
            <summary>
            Get if it is running at client
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.ConnectTimeout">
            <summary>
            Get and set connect timeout
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.RedundancyConnectionRetry">
            <summary>
            Get and set redundancy connection retry
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.MyIP">
            <summary>
            Gets and sets my IP Address
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:T.Kernel.Core.ObjectServer.IP1" -->
        <member name="P:T.Kernel.Core.ObjectServer.PortNumber1">
            <summary>
            Get primary data objServer port number
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:T.Kernel.Core.ObjectServer.IP2" -->
        <member name="P:T.Kernel.Core.ObjectServer.PortNumber2">
            <summary>
            Get secondary data objServer port number
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:T.Kernel.Core.ObjectServer.isPrimary" -->
        <!-- Badly formed XML comment ignored for member "F:T.Kernel.Core.ObjectServer.isSecondary" -->
        <member name="P:T.Kernel.Core.ObjectServer.SolutionName">
            <summary>
            Get solutionName
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.SolutionUID">
            <summary>
            Get solution UID
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.NewSolutionFullName">
            <summary>
            Get new solution full name
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.CompactSolutionName">
            <summary>
            Get string containg compact solution name
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsReleaseFile">
            <summary>
            Get flag indicating whether FileType property of project is Release
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsPublishedFile">
            <summary>
            Get flag indicating whether Published property of project is Release
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.UserName">
            <summary>
            Get and set userName name
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.UserPassword">
            <summary>
            Get and set userName password
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.OpenError">
            <summary>
            Get string containing information to help indicate error in Open method
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.ErrorCodeSyncConnection">
            <summary>
            Get error code while sync module is trying to connect to server
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.TagIndicator">
            <summary>
            Get indicator of tag
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.TypeSeparator">
            <summary>
            Get separator of parentType
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.PropertySeparator">
            <summary>
            Get separator of property
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.ServiceClient">
            <summary>
            Get reference to the ServiceClient object
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.ShouldClose">
            <summary>
            Get flag to indicate if the module using this object should close
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.ServerRestart">
            <summary>
            Get flag to indicate if the server is restarting
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.ShutDownCalled">
            <summary>
            Get flag to indicate whether Server.Shutdown was called
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.ShutDownCalledTime">
            <summary>
            Get dateTime when Server.Shutdown was called
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.ShouldRestartUpdatingSolution">
            <summary>
            Get flag to indicate if the server should be restart with update project
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.DefModuleID">
            <summary>
            Get and set the module ID associated to current thread ID
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.SetAppDomainModuleID(System.Int32)">
            <summary>
            Set app domain module ID
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsViewClient">
            <summary>
            Check if module running is Browser or Visualizer Client
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsDataAccess">
            <summary>
            Check if module running is DataqAccess
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsToolClient">
            <summary>
            Check if module running is a tool (PropertyWatch, Log or ModuleInformation)
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsScriptServerTask">
            <summary>
            Check if module running is Script Server Task 
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.DisplayPreviewMode">
            <summary>
            Get flag indicating whether module should start in test licenseType
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsWebCommandsDisabled">
            <summary>
            Get flag indicating whether is web commands is disabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsClientCommandsDisabled">
            <summary>
            Get flag indicating whether is client commands is disabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.ExecutionPath">
            <summary>
            Path used to save retentive, etc...
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.OnlineConfig">
            <summary>
            Get flag indicating whether online configuration is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.Profile">
            <summary>
            Get Integer indicating the execution profile
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.ProfileName">
            <summary>
            Get Integer indicating the execution profile
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsActivated">
            <summary>
            Get flag indicating whether server is activated
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsSmartDevice">
            <summary>
            Get flag indicating whether it is running on Smart Device
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsIPhone">
            <summary>
            Get flag indicating whether it is running on iPhone
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsIPad">
            <summary>
            Get flag indicating whether it is running on iPad
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsHotReloading">
            <summary>
            Get flag indicating whether server is hot startuping
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.CultureInfo">
            <summary>
            Get and set current culture info
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.RunException">
            <summary>
            Get reference to RunException object
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.RunningAsService">
            <summary>
            Get and set flag indicating whether is running as a Windows Service
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.RunningOnDocker">
            <summary>
            Get and set flag indicating whether runinng on docker
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectServer.hashSyncThreads">
            <summary>
            List containg sync threads
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsRedundancyEnabled">
            <summary>
            Get flag indicating whether redundancy is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsFallback">
            <summary>
            Get flag indicating whether fallback is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsSwitchToPrimaryEnabled">
            <summary>
            Get flag indicating whether should switch to primary when it is started
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.TimeToSwicthToPrimary">
            <summary>
            Get timespan to switch to primary
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.GlobalModuleInfoList">
            <summary>
            Reference to list containg information about modules
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.WasConnectedToPairRedundant">
            <summary>
            Flag indicating whether server was connected to pair redundant during saerver.shutdown
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.StartedUTCTime">
            <summary>
            Get started time in UTC
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.NumberOfAllowedTagElements">
            <summary>
            Get number of allowed tag elements in the solution
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsProjectToOPCServerFamily">
            <summary>
            Get flag indicating whether project is to OPCServer family
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsProjectToHMIFamily">
            <summary>
            Get flag indicating whether project is to HMI family
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsOpen">
            <summary>
             Get flag indicating whether ObjectServer is open
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.LimitValuesMinMax">
            <summary>
            Get flag indicating whether project limits values Min Max
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.IsRunningDeviceInternal">
            <summary>
            Flag indicating whether Device module is running on main process (TServer)
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.NoLocalCache">
            <summary>
            Get and set flag indicating whether local cache can be used
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.SetValueLevel">
            <summary>
            Get and set level of protection while setting value of objetcs
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.#ctor">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.#ctor(System.String,System.Boolean)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="mainModuleName">Name of the module that is instancing this class</param>
            <param name="isViewOnly">Flag ViewOnly</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="mainModuleName">Name of the module that is instancing this class</param>
            <param name="assemblyPath">Full path of the assemblies that will be loaded dynamically</param>
            <param name="isViewOnly">Flag ViewOnly</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.Finalize">
            <summary>
            Destruct the instance of this class
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a userName's code. 
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects.
            </summary>
            <param name="disposing">Flag true or false</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.Dispose">
            <summary>
            Dispose access
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.OpenSolution(System.String)">
            <summary>
            Open the access for others classes
            </summary>
            <param name="solutionName">Primary solutionName</param>
            <returns>Error code</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.Open(System.String,System.Int32)">
            <summary>
            Open the access for others classes
            </summary>
            <param name="ip1">Primary data objServer IP address</param>
            <param name="portNumber1">Primary data objServer port number</param>
            <returns>Error code</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.Open(System.String,System.String,System.String)">
            <summary>
            Open the access for others classes
            </summary>
            <param name="ip1">Primary data objServer IP address</param>
            <param name="userName">User name</param>
            <param name="pass">Password</param>
            <returns>Error code</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.Open(System.String,System.Int32,System.String,System.String)">
            <summary>
            Open the access for others classes
            </summary>
            <param name="ip1">Primary data objServer IP address</param>
            <param name="portNumber1">Primary data objServer port number</param>
            <param name="userName">User name</param>
            <param name="pass">Password</param>
            <returns>Error code</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.Open(System.String,System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
            Open the access for others classes
            </summary>
            <param name="ip1">Primary data objServer IP address</param>
            <param name="portNumber1">Primary data objServer port number</param>
            <param name="ip2">Secondary data objServer IP address</param>
            <param name="portNumber2">Secondary data objServer port number</param>
            <param name="user">User name</param>
            <param name="pass">Password</param>
            <returns>Error code</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.OpenTest(System.Object)">
            <summary>
            Open the access for others classes
            </summary>
            <param name="dbServerRef">Reference to an instance of DBServer of the solutionName</param>
            <returns>Error code</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.Open(System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Object)">
            <summary>
            Open the access for others classes
            </summary>
            <param name="ip1">Primary data objServer IP address</param>
            <param name="portNumber1">Primary data objServer port number</param>
            <param name="ip2">Secondary data objServer IP address</param>
            <param name="portNumber2">Secondary data objServer port number</param>
            <param name="solutionName">solutionName</param>
            <param name="user">User name</param>
            <param name="pass">Password</param>
            <returns>Error code</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.OpenAsync(System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Object)">
            <summary>
            Open the access for others classes
            </summary>
            <param name="ip1">Primary data objServer IP address</param>
            <param name="portNumber1">Primary data objServer port number</param>
            <param name="ip2">Secondary data objServer IP address</param>
            <param name="portNumber2">Secondary data objServer port number</param>
            <param name="solution">SolutionName</param>
            <param name="user">User name</param>
            <param name="pass">Password</param>
            <returns>Error code</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.SetRunningAtServerFlag">
            <summary>
            Set flag that indicates if it is running at objServer
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.CreateSyncObject">
            <summary>
            Create SyncObject module
            </summary>
            <returns>Flag indicating success (true) or error (false)</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.StartSyncBindings">
            <summary>
            Start sync bindings
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectServer.SyncObject">
            <summary>
            Get reference to the SyncObject object
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.GetEncryptedFilePassword">
            <summary>
            Return password of encrypted files
            </summary>
            <returns></returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.ForceClose">
            <summary>
            Set flag to indicate that module should close
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.LimitAccessInWindows(System.Boolean)">
            <summary>
            Limit access in Windows
            </summary>
            <param name="flag">Flag indicating if should limit (true) or not (false)</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.AddModule(System.String,System.Boolean,T.Kernel.Core.TModule)">
            <summary>
            Add module
            </summary>
            <param name="name">Module name</param>
            <param name="isInternalSyncObjectModule">Flag indicating whether module is SyncObj</param>
            <param name="module">Reference to module</param>
            <returns>If error then returns -1 eles module ID</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.RemoveModule(System.Int32)">
            <summary>
            Remove module
            </summary>
            <param name="id">Module ID</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.GetModule(System.Int32)">
            <summary>
            Get reference to the module
            </summary>
            <param name="id">Module ID</param>
            <returns>Reference to the TModule</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.GetModule(System.String)">
            <summary>
            Get reference to the module
            </summary>
            <param name="name">Module name</param>
            <returns>Reference to the TModule</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.IsModuleSync(System.Int32)">
            <summary>
            Return if TModule is SyncObject
            </summary>
            <param name="id">Module ID</param>
            <returns>Flag indicating if TModule is SyncObject (true) or not (false)</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.GetIDFromModuleSync">
            <summary>
            Return if Module is SyncObject
            </summary>
            <param name="id">Module ID</param>
            <returns>Flag indicating if TModule is SyncObject (true) or not (false)</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.IsModuleTCPServer(System.Int32)">
            <summary>
            Return if TModule is TCPServer
            </summary>
            <param name="id">Module ID</param>
            <returns>Flag indicating if TModule is TCPServer (true) or not (false)</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.IsModuleFromThisDomain(System.Int32)">
            <summary>
            Return if TModule is running from this domain
            </summary>
            <param name="id">Module ID</param>
            <returns>Reference to the TModule</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.DisposeAllModules">
            <summary>
            Dispose all modules
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjectServer.UpdateModuleID(System.Int32,System.Int32,T.Kernel.Core.TModule)">
            <summary>
            Update module ID
            </summary>
            <param name="oldID">Old module ID</param>
            <param name="newID">New module ID</param>
            <param name="module">Reference to module</param>
        </member>
        <member name="T:T.Kernel.Core.BasicPropertyValue`1">
            <summary>
            Define a property
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:T.Kernel.Core.BasicPropertyValue`1.Value">
            <summary>
            Get and set objType
            </summary>
        </member>
        <member name="M:T.Kernel.Core.BasicPropertyValue`1.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="isObjectName">IsObjectName the content of object value</param>
        </member>
        <member name="M:T.Kernel.Core.BasicPropertyValue`1.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Core.BasicPropertyValue`1.#ctor(T.Kernel.Core.RunObj,System.Int32,T.Kernel.Core.ObjectValue.eStringFormat)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="strFormat">String format</param>
        </member>
        <member name="M:T.Kernel.Core.BasicPropertyValue`1.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="associatedToValueProperty">Flag indicating whether property is associated to Value propery (ex: Quality, TimeStamp, Bits)</param>
            <param name="isObjectName">IsObjectName the content of object value</param>
        </member>
        <member name="M:T.Kernel.Core.BasicPropertyValue`1.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Boolean,System.Boolean,T.Kernel.Core.ObjectValue.eStringFormat,System.Object,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="associatedToValueProperty">Flag indicating whether property is associated to Value propery (ex: Quality, TimeStamp, Bits)</param>
            <param name="local">Flag indicating whether objType is only local and it should not be synchronized</param>
            <param name="strFormat">String format</param>
            <param name="initialValue">Initial objType</param>
            <param name="id">IsObjectName the content of object value</param>
        </member>
        <member name="T:T.Kernel.Core.PropertyValueSetParent`1">
            <summary>
            Define a property
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:T.Kernel.Core.PropertyValueSetParent`1._setValueFromParent">
            <summary>
            Reference to delegate to set objType from Parent
            </summary>
        </member>
        <member name="P:T.Kernel.Core.PropertyValueSetParent`1.setValueFromParent">
            <summary>
            Reference to delegate to set objType from Parent
            </summary>
        </member>
        <member name="M:T.Kernel.Core.PropertyValueSetParent`1.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="isObjectName">IsObjectName the content of object value</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValueSetParent`1.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValueSetParent`1.#ctor(T.Kernel.Core.RunObj,System.Int32,T.Kernel.Core.ObjectValue.SetValueFromParent)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="setValue">Delegate that will be called when objType should be set by parent</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValueSetParent`1.#ctor(T.Kernel.Core.RunObj,System.Int32,T.Kernel.Core.ObjectValue.eStringFormat)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="strFormat">String format</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValueSetParent`1.#ctor(T.Kernel.Core.RunObj,System.Int32,T.Kernel.Core.ObjectValue.SetValueFromParent,T.Kernel.Core.ObjectValue.eStringFormat)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="setValue">Delegate that will be called when objType should be set by parent</param>
            <param name="strFormat">String format</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValueSetParent`1.#ctor(T.Kernel.Core.RunObj,System.Int32,T.Kernel.Core.ObjectValue.SetValueFromParent,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="setValue">Delegate that will be called when objType should be set by parent</param>
            <param name="associatedToValueProperty">Flag indicating whether property is associated to Value propery (ex: Quality, TimeStamp, Bits)</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValueSetParent`1.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="associatedToValueProperty">Flag indicating whether property is associated to Value propery (ex: Quality, TimeStamp, Bits)</param>
            <param name="isObjectName">IsObjectName the content of object value</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValueSetParent`1.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Boolean,System.Boolean,T.Kernel.Core.ObjectValue.eStringFormat,System.Object,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="associatedToValueProperty">Flag indicating whether property is associated to Value propery (ex: Quality, TimeStamp, Bits)</param>
            <param name="local">Flag indicating whether objType is only local and it should not be synchronized</param>
            <param name="strFormat">String format</param>
            <param name="initialValue">Initial objType</param>
            <param name="id">IsObjectName the content of object value</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValueSetParent`1.#ctor(T.Kernel.Core.RunObj,System.Int32,T.Kernel.Core.ObjectValue.SetValueFromParent,System.Boolean,System.Boolean,T.Kernel.Core.ObjectValue.eStringFormat,System.Object,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="setValue">Delegate that will be called when objType should be set by parent</param>
            <param name="associatedToValueProperty">Flag indicating whether property is associated to Value propery (ex: Quality, TimeStamp, Bits)</param>
            <param name="local">Flag indicating whether objType is only local and it should not be synchronized</param>
            <param name="strFormat">String format</param>
            <param name="initialValue">Initial objType</param>
            <param name="id">IsObjectName the content of object value</param>
        </member>
        <member name="T:T.Kernel.Core.PropertyValue`1">
            <summary>
            Define a property
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:T.Kernel.Core.PropertyValue`1.valueType">
            <summary>
            Type of the type
            </summary>
        </member>
        <member name="F:T.Kernel.Core.PropertyValue`1.valueChanges">
            <summary>
            Changes of objType
            </summary>
        </member>
        <member name="F:T.Kernel.Core.PropertyValue`1._getValueCustomized">
            <summary>
            Reference to delegate to get value
            </summary>
        </member>
        <member name="F:T.Kernel.Core.PropertyValue`1._customizeAssignmentValue">
            <summary>
            Reference to delegate cstomize assignment of objType
            </summary>
        </member>
        <member name="P:T.Kernel.Core.PropertyValue`1.ValueTypeCode">
            <summary>
            Return the parentType of the objType
            </summary>
        </member>
        <member name="P:T.Kernel.Core.PropertyValue`1.ValueChanges">
            <summary>
            Reference to delegate cstomize assignment of objType
            </summary>
        </member>
        <member name="P:T.Kernel.Core.PropertyValue`1.ValueType">
            <summary>
            Return the parentType of the objType
            </summary>
        </member>
        <member name="P:T.Kernel.Core.PropertyValue`1.getValueCustomized">
            <summary>
            Reference to delegate to get value
            </summary>
        </member>
        <member name="P:T.Kernel.Core.PropertyValue`1.customizeAssignmentValue">
            <summary>
            Reference to delegate cstomize assignment of objType
            </summary>
        </member>
        <member name="M:T.Kernel.Core.PropertyValue`1.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Boolean,T.Kernel.Core.ObjectValue.GetValueCustomized)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="id">IsObjectName the content of object value</param>
            <param name="getValueCustomized">Define signature of the method that is called when getting value</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValue`1.#ctor(T.Kernel.Core.RunObj,System.Int32,T.Kernel.Core.ObjectValue.GetValueCustomized)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="getValueCustomized">Define signature of the method that is called when getting value</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValue`1.#ctor(T.Kernel.Core.RunObj,System.Int32,T.Kernel.Core.ObjectValue.eStringFormat,T.Kernel.Core.ObjectValue.GetValueCustomized)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="strFormat">String format</param>
            <param name="getValueCustomized">Define signature of the method that is called when getting value</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValue`1.#ctor(T.Kernel.Core.RunObj,System.Int32,T.Kernel.Core.ObjectValue.SetValueFromParent,T.Kernel.Core.ObjectValue.GetValueCustomized)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="setValue">Delegate that will be called when objType should be set by parent</param>
            <param name="getValueCustomized">Define signature of the method that is called when getting value</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValue`1.#ctor(T.Kernel.Core.RunObj,System.Int32,T.Kernel.Core.ObjectValue.SetValueFromParent,T.Kernel.Core.ObjectValue.eStringFormat,T.Kernel.Core.ObjectValue.GetValueCustomized)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="setValue">Delegate that will be called when objType should be set by parent</param>
            <param name="getValueCustomized">Define signature of the method that is called when getting value</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValue`1.#ctor(T.Kernel.Core.RunObj,System.Int32,T.Kernel.Core.ObjectValue.CustomizeAssignmentValue,T.Kernel.Core.ObjectValue.GetValueCustomized)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="customizeAssignmentValue">Delegate that will be called when new objType should be assigmented</param>
            <param name="getValueCustomized">Define signature of the method that is called when getting value</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValue`1.#ctor(T.Kernel.Core.RunObj,System.Int32,T.Kernel.Core.ObjectValue.SetValueFromParent,System.Boolean,T.Kernel.Core.ObjectValue.GetValueCustomized)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="setValue">Delegate that will be called when objType should be set by parent</param>
            <param name="associatedToValueProperty">Flag indicating whether property is associated to Value propery (ex: Quality, TimeStamp, Bits)</param>
            <param name="getValueCustomized">Define signature of the method that is called when getting value</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValue`1.#ctor(T.Kernel.Core.RunObj,System.Int32,T.Kernel.Core.ObjectValue.SetValueFromParent,T.Kernel.Core.ObjectValue.CustomizeAssignmentValue,System.Boolean,T.Kernel.Core.ObjectValue.GetValueCustomized)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="setValue">Delegate that will be called when objType should be set by parent</param>
            <param name="customizeAssignmentValue">Delegate that will be called when new objType should be assigmented</param>
            <param name="associatedToValueProperty">Flag indicating whether property is associated to Value propery (ex: Quality, TimeStamp, Bits)</param>
            <param name="getValueCustomized">Define signature of the method that is called when getting value</param>
        </member>
        <member name="M:T.Kernel.Core.PropertyValue`1.#ctor(T.Kernel.Core.RunObj,System.Int32,T.Kernel.Core.ObjectValue.SetValueFromParent,T.Kernel.Core.ObjectValue.CustomizeAssignmentValue,System.Boolean,System.Boolean,T.Kernel.Core.ObjectValue.eStringFormat,System.Object,System.Boolean,T.Kernel.Core.ObjectValue.GetValueCustomized)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="setValue">Delegate that will be called when objType should be set by parent</param>
            <param name="customizeAssignmentValue">Delegate that will be called when new objType should be assigmented</param>
            <param name="associatedToValueProperty">Flag indicating whether property is associated to Value propery (ex: Quality, TimeStamp, Bits)</param>
            <param name="local">Flag indicating whether objType is only local and it should not be synchronized</param>
            <param name="strFormat">String format</param>
            <param name="initialValue">Initial objType</param>
            <param name="id">IsObjectName the content of object value</param>
            <param name="getValueCustomized">Define signature of the method that is called when getting value</param>
        </member>
        <member name="T:T.Kernel.Core.ObjectValueEventBinding">
            <summary>
            Helper for ObjectValue class
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectValueEventBinding.module">
            <summary>
            Reference to module
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectValueEventBinding.bindID">
            <summary>
            Reference to bind ID
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectValueEventBinding.flagPointerChanged">
            <summary>
            Indicate if event binding is pointer changed
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjectValueEventBinding.#ctor(T.Kernel.Core.TModule,System.Object,System.Boolean)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="module">Reference to module</param>
            <param name="bindID">Reference to bind ID</param>
            <param name="flagPointerChanged">Flag indicating if event binding is pointer changed</param>
        </member>
        <member name="P:T.Kernel.Core.ObjectValueEventBinding.ModuleID">
            <summary>
            Get Module ID
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValueEventBinding.Module">
            <summary>
            Get Module
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValueEventBinding.BindID">
            <summary>
            Get reference to bind ID
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValueEventBinding.PointerChanged">
            <summary>
            Get flag indicating if event binding is pointer changed
            </summary>
        </member>
        <member name="T:T.Kernel.Core.ObjectValue">
            <summary>
            ObjectValue: Value of the runtime object in the database
            </summary>
        </member>
        <member name="T:T.Kernel.Core.ObjectValue.SetValueFromParent">
            <summary>
            Define signature of the method that is called when objType should be set by parent
            </summary>
            <param name="newValue">New parent</param>
            <param name="moduleID">Module ID</param>
            <param name="extendedModuleID">Extende module ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="canSetValue">Callback method that is called for ckecking whether should set value</param>
            <param name="userName">User name changes the value</param>
        </member>
        <member name="T:T.Kernel.Core.ObjectValue.GetValueCustomized">
            <summary>
            Define signature of the method that is called when getting value
            </summary>
            <returns></returns>
        </member>
        <member name="T:T.Kernel.Core.ObjectValue.CustomizeAssignmentValue">
            <summary>
            Customize assignment of the new objType
            </summary>
            <param name="newValue">New objType</param>
            <param name="value">Value</param>
            <param name="valueChanges">Value changes</param>
            <param name="flags">Indicate when generate event</param>
            <returns>Flag indicating whether new objType was assignment successfully</returns>
        </member>
        <member name="F:T.Kernel.Core.ObjectValue.value">
            <summary>
            Object objType
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectValue.moduleID">
            <summary>
            Module ID
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectValue.bitFlags">
            <summary>
            Bit flags
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectValue.valueTypeCode">
            <summary>
            Return the type code of type
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectValue.token">
            <summary>
            Token
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectValue.listOfEventBinding">
            <summary>
            List of event binding IDs
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjectValue.lockSetValue">
            <summary>
            Object used to ensure unique access in SetValue method
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.ModuleID">
            <summary>
            Get module ID of last updating objType
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.CanSet">
            <summary>
            Get flag indicating whether objType can be set
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.CanSetRetentive">
            <summary>
            Get flag indicating whether objType can be set
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.ValueWaitingFromServer">
            <summary>
            Get and set flag that indicates whether the value of this instance is coming from server
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.ValueWasForced">
            <summary>
            Get and set flag that indicates if the value is being forced by client
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.IsUsedBySync">
            <summary>
            Get flag indicating if this object is being used in sincronization
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.IsLastValue">
            <summary>
            Get and set flag that indicate if modules will receive only last value
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.IsLogging">
            <summary>
            Get flag indicating if this object is being monitored for changing
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.IsInitializingInstance">
            <summary>
            Get flag indicating whether this instance is being initialized
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.IsArrivedAtFirstTimeByServer">
            <summary>
            Get flag indicating whether current value arrived at first time by server
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.IsFlagSnapshot">
            <summary>
            Get flag indicating whether current value arrived at first time by server
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.ValueTypeCode">
            <summary>
            Return the parentType of the objType
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.HasAnyBinding">
            <summary>
            Gets if any binding exist to this object
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.setValueFromParent">
            <summary>
            Reference to delegate to set objType from Parent
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.getValueCustomized">
            <summary>
            Reference to delegate to get value
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjectValue.customizeAssignmentValue">
            <summary>
            Reference to delegate cstomize assignment of objType
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="parentType">Type of the objType</param>
            <param name="getValueCustomized">Define signature of the method that is called when getting value</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.Initialize(System.Type,System.Boolean,System.Boolean,T.Kernel.Core.ObjectValue.eStringFormat,System.Object,System.Boolean)">
            <summary>
            Initialize the instance
            </summary>
            <param name="type">Type of the objType</param>
            <param name="associatedToValueProperty">Flag indicating whether property is associated to Value propery (ex: Quality, TimeStamp, Bits)</param>
            <param name="local">Flag indicating whether objType is only local and it should not be synchronized</param>
            <param name="strFormat">String format</param>
            <param name="initialValue">Initial objType</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.AddEventBinding(T.Kernel.Core.TModule,System.Object,System.Boolean)">
            <summary>
            Add event binding
            </summary>
            <param name="module">Reference to module</param>
            <param name="bindID">Reference to bind ID</param>
            <param name="flagPointerWasChanged">Flag indicating if event binding is pointer changed</param>
            <returns>Reference to object of the event binding to after removing</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.RemoveEventBinding(System.Object)">
            <summary>
            Remove event binding
            </summary> 
            <param name="evBind">Reference to object of the event binding to remove</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.RemoveAllEventBinding">
            <summary>
            Remove all event binding
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.AddSyncEventChange(T.Kernel.Core.IObjRefLink)">
            <summary>
            Add sync event
            </summary>
            <param name="action">Action</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.RemoveSyncEventChange(T.Kernel.Core.IObjRefLink)">
            <summary>
            Remove sync event
            </summary>
            <param name="action">Action</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.GenerateSyncEventChanges(System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.LinkedList{T.Kernel.Core.IObjRefLink})">
            <summary>
            Generate events for modules
            </summary>
            <param name="sourceModuleID">Source module ID</param>
            <param name="extendedModuleID">Extended module ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="value">Value</param>
            <param name="quality">Quality</param>
            <param name="timeStamp">Time stamp</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.GenerateEventsForModules(System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Boolean,System.String,System.Boolean)">
            <summary>
            Generate events for modules
            </summary>
            <param name="sourceModuleID">Source module ID</param>
            <param name="extendedModuleID">Extended module ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="targetModuleID">Specific target Module ID. -1 for any module</param>
            <param name="quality">Quality</param>
            <param name="timeStamp">Time stamp</param>
            <param name="valueMemberWasChanged">Flag indicating whether Value member was changed</param>
            <param name="userName">User name changes the value</param>
            <param name="notSync">Flag indicating whether value can syncronize</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.GenerateEventsForSpecificModule(System.Int32,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64)">
            <summary>
            Generate events for an specific module
            </summary>
            <param name="targetModuleID">Target module ID</param>
            <param name="sourceModuleID">Source module ID</param>
            <param name="extendedModuleID">Extended module ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.WaitValueArrivesFromServerAsync(System.Boolean)">
            <summary>
            Wait tag objType arrives from objServer
            </summary>
            <param name="forceWait">Force wait until value arrives from server</param>
            <exception cref="T:System.TimeoutException">Timeout waiting objType from objServer</exception>
            <returns>Value</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.WaitValueArrivesFromServer(System.Boolean)">
            <summary>
            Wait tag objType arrives from objServer
            </summary>
            <param name="forceWait">Force wait until value arrives from server</param>
            <exception cref="T:System.TimeoutException">Timeout waiting objType from objServer</exception>
            <returns>Value</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.GetValueChanges">
            <summary>
            Get the changes of objType
            </summary>
            <returns>Value changes</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.GetValue">
            <summary>
            Get the object objType as object
            </summary>
            <exception cref="T:System.TimeoutException">Timeout waiting objType from objServer</exception>
            <returns>Value as object</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.GetValue(System.Boolean)">
            <summary>
            Get the object objType as object
            </summary>
            <param name="forceWait">Force wait until value arrives from server</param>
            <exception cref="T:System.TimeoutException">Timeout waiting objType from objServer</exception>
            <returns>Value as object</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.GetValueAsync(System.Boolean)">
            <summary>
            Get the object objType as object
            </summary>
            <param name="forceWait">Force wait until value arrives from server</param>
            <exception cref="T:System.TimeoutException">Timeout waiting objType from objServer</exception>
            <returns>Value as object</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.GetValue``1">
            <summary>
            Get the object objType as "T" parentType
            </summary>
            <returns>Value as "T" Type</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.GetValue``1(System.Boolean)">
            <summary>
            Get the object objType as "T" parentType
            </summary>
            <param name="forceWait">Force wait until value arrives from server</param>
            <exception cref="T:System.TimeoutException">Timeout waiting objType from objServer</exception>
            <returns>Value as "T" Type</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.SetValue(System.Object)">
            <summary>
            Set the objType of the object, checking whether object can be written
            </summary>
            <param name="newValue">New objType</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.SetValue(System.Object,System.Int32)">
            <summary>
            Set the objType of the object, checking whether object can be written
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">Module ID</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.SetValue(System.Object,System.Int32,T.Kernel.Core.eRunEvent)">
            <summary>
            Set the objType of the object, checking whether object can be written
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">Module ID</param>
            <param name="flags">Indicate when generate event</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.SetValue(System.Object,System.Int32,System.Int32,T.Kernel.Core.eRunEvent)">
            <summary>
            Set the objType of the object, checking whether object can be written
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">Module ID</param>
            <param name="extendedModuleID">Extended Module ID</param>
            <param name="flags">Indicate when generate event</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.SetValue(System.Object,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean})">
            <summary>
            Set the objType of the object, checking whether object can be written
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">Module ID</param>
            <param name="extendedModuleID">Extended Module ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="canSetValue">Callback method that is called for ckecking whether should set value</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.SetValue(System.Object,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset})">
            <summary>
            Set the objType of the object, checking whether object can be written
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">Module ID</param>
            <param name="extendedModuleID">Extended Module ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="canSetValue">Callback method that is called for ckecking whether should set value</param>
            <param name="userName">User name changes the value</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.Write(System.Object)">
            <summary>
            Write the objType of the object, no checking whether object can be written
            </summary>
            <param name="newValue">New objType</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.Write(System.Object,T.Kernel.Core.eRunEvent)">
            <summary>
            Write the objType of the object, no checking whether object can be written
            </summary>
            <param name="newValue">New objType</param>
            <param name="flags">Indicate when generate event</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.Write(System.Object,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64)">
            <summary>
            Write the objType of the object, no checking whether object can be written
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">Module ID</param>
            <param name="extendedModuleID">Extended Module ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.Write(System.Object,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset})">
            <summary>
            Write the objType of the object, no checking whether object can be written
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">Module ID</param>
            <param name="extendedModuleID">Extended Module ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="quality">Quality</param>
            <param name="timeStamp">Time stamp</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.Write(System.Object,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Boolean)">
            <summary>
            Write the objType of the object, no checking whether object can be written
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">Module ID</param>
            <param name="extendedModuleID">Extended Module ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="quality">Quality</param>
            <param name="timeStamp">Time stamp</param>
            <param name="valueMemberWasChanged">Flag indicating whether Value member was changed</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.Write(System.Object,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Boolean,System.Func{System.Boolean})">
            <summary>
            Write the objType of the object, no checking whether object can be written
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">Module ID</param>
            <param name="extendedModuleID">Extended Module ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="quality">Quality</param>
            <param name="timeStamp">Time stamp</param>
            <param name="valueMemberWasChanged">Flag indicating whether Value member was changed</param>
            <param name="canSetValue">Callback method that is called for ckecking whether should set value</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.Write(System.Object,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Boolean,System.Func{System.Boolean},System.String,System.Boolean)">
            <summary>
            Write the objType of the object, no checking whether object can be written
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">Module ID</param>
            <param name="extendedModuleID">Extended Module ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="quality">Quality</param>
            <param name="timeStamp">Time stamp</param>
            <param name="valueMemberWasChanged">Flag indicating whether Value member was changed</param>
            <param name="canSetValue">Callback method that is called for ckecking whether should set value</param>
            <param name="userName">User name changes the value</param>
            <param name="notSync">Flag indicating whether value can syncronize</param>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.ToString">
            <summary>
            Format objType to its equivalent string representation
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.SetIsReferecingToTagValueMemberFlag">
            <summary>
            Set flag is referecing to Value member of a tag
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.SetIsReferecingToTagValueOrBitMemberFlag">
            <summary>
            Set flag is referecing to Value or Bit member of a tag
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.SetIsReferecingToQualityOrTimeStampMemberFlag">
            <summary>
            Set flag is referecing to Quality or Timestamp member of a tag
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.GetEventBase(System.Int32,System.Int32,System.Object,System.Object)">
            <summary>
            Get reference to EventBase object based to event ID
            </summary>
            <param name="moduleID">Module ID</param>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1. Use null to despise this parameter</param>
            <param name="extendEvent2">Extended event ID 2. Use null to despise this parameter</param>
            <returns>Reference to EventBase object based to eventID or null</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjectValue.GetEventBaseList(System.Int32,System.Int32,System.Object,System.Object)">
            <summary>
            Get list of references to EventBase objects based to event ID
            </summary>
            <param name="moduleID">Module ID</param>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1. Use null to despise this parameter</param>
            <param name="extendEvent2">Extended event ID 2. Use null to despise this parameter</param>
            <returns>Reference to EventBase object based to eventID or null</returns>
        </member>
        <member name="T:T.Kernel.Core.ObjRef">
            <summary>
            ObjRef: Reference of the object in database
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjRef.objServer">
            <summary>
            Reference to main object
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjRef.refToTValue">
            <summary>
            Reference to ObjectValue object represented by this instance
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ObjRef.hasOtherObjs">
            <summary>
            Flag indicating if this instance has objects configured in nodes
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.ObjServer">
            <summary>
            Reference to main object
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.RunObj">
            <summary>
            Get reference to the object
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.MainRunObj">
            <summary>
            Get reference to the main object.
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.Previous">
            <summary>
            Get reference to the previous ObjRef.
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.IsFlagLastValue">
            <summary>
            Get and set flag that indicate if modules will receive only last value
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.ValueWaitingFromServer">
            <summary>
            Get flag that indicates is the objType is coming from objServer
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.IsArrivedAtFirstTimeByServer">
            <summary>
            Get flag indicating whether current value arrived at first time by server
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.CanSyncronize">
            <summary>
            Get flag indicating whether ObjRef object can syncronize to server
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.IsClientDomain">
            <summary>
            Get flag indicating whether ObjRef object is a Client domain
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.IsServerDomain">
            <summary>
            Get flag indicating whether ObjRef object is a Server domain
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.IsTagNamespace">
            <summary>
            Get flag indicating whether ObjRef object is referencing to Tag namespace
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.IsTagOrVarNamespace">
            <summary>
            Get flag indicating whether ObjRef object is referencing to Tag or Var namespace
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.IsDatasetNamespace">
            <summary>
            Get flag indicating whether ObjRef object is referencing to Dataset namespace
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.IsReportNamespace">
            <summary>
            Get flag indicating whether ObjRef object is referencing to Report namespace
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.Type">
            <summary>
            Get Type
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.ResolvedType">
            <summary>
            Get resolved type. If Type is Reference then it retruns RefType else retunrs Type
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.TypeString">
            <summary>
            Get typeCode name
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.Description">
            <summary>
            Get description
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.IsArray">
            <summary>
            Get flag indicating whether is referencing to array
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ObjRef.Dimensions">
            <summary>
            Get array indexes of this instance whether is referencing to array
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.#ctor(T.Kernel.Core.ObjectServer,T.TSystem.ObjToken)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objServer">Reference to main object</param>
            <param name="objToken">Reference to object</param>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.#ctor(T.Kernel.Core.ObjectServer,T.Kernel.Core.ObjRef)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objServer">Reference to main object</param>
            <param name="objRef">Reference to object</param>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.IsValid">
            <summary>
            Check if the instance of the class is valid
            </summary>
            <returns>If the instance is valid</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.IsFullValid">
            <summary>
            Check if full instance of the class is valid
            </summary>
            <returns>If the instance is valid</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetRunObj(System.Boolean)">
            <summary>
            Get reference to the object
            </summary>
            <returns>Reference to the object or null</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.IsInUse">
            <summary>
            Return if object is in use
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.Preload">
            <summary>
            Preload object
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.CanSet">
            <summary>
            Check whether this instance references to property of internal namespace objects (no Tag namespace) that has permission for setting new value. 
            </summary>
            <returns>Returns flag indicating whether has permission for setting new value</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetNodeObject(T.Kernel.Core.ListObj,T.TSystem.ObjTokenNode,System.Boolean,System.Boolean)">
            <summary>
            Get reference to node of the object in database
            </summary>
            <param name="parent">Parent</param>
            <param name="thisNode">Parent node</param>
            <returns>Reference to the object</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetResolvedIndex(T.TSystem.ObjTokenIndex)">
            <summary>
            Get resolved index
            </summary>
            <param name="objRefIndex">Reference to object index</param>
            <returns>Resolved index</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetRunObj(T.TSystem.ePredefinedTagObjID)">
            <summary>
            Get reference to the object ObjectValue or TagObj
            </summary>
            <param name="id">Predefined ID</param>
            <returns>Reference to the object or null</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetValueTypeCode">
            <summary>
            Get parentType code of the object objType
            </summary>
            <returns>Type code</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetValueType">
            <summary>
            Get parentType code of the object objType
            </summary>
            <returns>Type code</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetValue">
            <summary>
            Get the object objType as object
            </summary>
            <returns>Value as Object</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetValueAsync">
            <summary>
            Get the object objType as object
            </summary>
            <returns>Value as Object</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetValue(System.Boolean)">
            <summary>
            Get the object objType as object
            </summary>
            <param name="forceWait">Force wait until value arrives from server</param>
            <returns>Value as Object</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetValue(T.TSystem.ePredefinedTagObjID)">
            <summary>
            Get reference to the objType
            </summary>
            <param name="id">Predefined ID</param>
            <returns>Reference to the object or null</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetValue(T.TSystem.ePredefinedTagObjID,System.Boolean)">
            <summary>
            Get reference to the objType
            </summary>
            <param name="id">Predefined ID</param>
            <returns>Reference to the object or null</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetValueAsync(T.TSystem.ePredefinedTagObjID,System.Boolean)">
            <summary>
            Get reference to the objType
            </summary>
            <param name="id">Predefined ID</param>
            <returns>Reference to the object or null</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetValue(T.TSystem.ePredefinedTagObjID,System.Boolean,System.Boolean)">
            <summary>
            Get reference to the objType
            </summary>
            <param name="id">Predefined ID</param>
            <returns>Reference to the object or null</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetValueAsync(T.TSystem.ePredefinedTagObjID,System.Boolean,System.Boolean)">
            <summary>
            Get reference to the objType
            </summary>
            <param name="id">Predefined ID</param>
            <returns>Reference to the object or null</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetValue``1">
            <summary>
            Get the object objType as "T" parentType
            </summary>
            <returns>Value as "T" Type</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetValue``1(System.Boolean)">
            <summary>
            Get the object objType as "T" parentType
            </summary>
            <param name="forceWait">Force wait until value arrives from server</param>
            <returns>Value as "T" Type</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetValueAsync``1(System.Boolean)">
            <summary>
            Get the object objType as "T" parentType
            </summary>
            <param name="forceWait">Force wait until value arrives from server</param>
            <returns>Value as "T" Type</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetFormatedValue(System.Boolean)">
            <summary>
            Get the object objType as Formated String
            </summary>
            <returns>Value as Object</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetFormatedValueAsync(System.Boolean)">
            <summary>
            Get the object objType as Formated String
            </summary>
            <returns>Value as Object</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.SetValue(System.Object)">
            <summary>
            Set the value of the object
            </summary>
            <param name="newValue">New objType</param>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.SetValue(System.Object,T.Kernel.Core.eRunEvent)">
            <summary>
            Set the value of the object
            </summary>
            <param name="newValue">New objType</param>
            <param name="flags">Indicate when generate event</param>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.SetValue(System.Object,System.Int32)">
            <summary>
            Set the value of the object
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">TModule ID</param>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.SetValue(System.Object,System.Int32,System.Int64)">
            <summary>
            Set the value of the object
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">TModule ID</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.SetValue(System.Object,T.Kernel.Core.eRunEvent,System.Int32,System.Int64)">
            <summary>
            Set the value of the object
            </summary>
            <param name="newValue">New objType</param>
            <param name="flags">Indicate when generate event</param>
            <param name="moduleID">TModule ID</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.SetValue(System.Object,System.Int32,T.Kernel.Core.eRunEvent,System.Int32,System.DateTimeOffset,System.Int64)">
            <summary>
            Set the value of the object
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="quality">Quality</param>
            <param name="dt">Date and time</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.SetValue(System.Object,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int32,System.DateTimeOffset)">
            <summary>
            Set the value of the object
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended module ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="quality">Quality</param>
            <param name="dt">Date and time</param>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.SetValue(System.Object,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int32,System.DateTimeOffset,System.Int64)">
            <summary>
            Set the value of the object
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended module ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="quality">Quality</param>
            <param name="dt">Date and time</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.SetValue(System.Object,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int32,System.DateTimeOffset,System.Int64,System.Func{System.Boolean})">
            <summary>
            Set the value of the object
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended module ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="quality">Quality</param>
            <param name="dt">Date and time</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="canSetValue">Callback method that is called for ckecking whether should set value</param>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.SetValue(System.Object,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int32,System.DateTimeOffset,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set the value of the object
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended module ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="quality">Quality</param>
            <param name="dt">Date and time</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="canSetValue">Callback method that is called for ckecking whether should set value</param>
            <param name="userName">User name changes the value</param>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.ToString">
            <summary>
            Converts the objType to string representation.
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetDimensions">
            <summary>
            Get flag indicating whether is referencing to array;
            </summary>
            <param name="types">Reference to types</param>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.ToString(System.Boolean)">
            <summary>
            Converts the objType to string representation.
            </summary>
            <param name="objTokenFormat">Flag indicating whether should convert to ObjToken format</param>
            <returns>String representation</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.HasOtherObjects">
            <summary>
            Check if other objects are configured in this instance
            </summary>
            <returns>Flas indicating yes (true) or no (false)</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.HasObjectsIndex">
            <summary>
            Check if other objects are configured in arrays of this instance
            </summary>
            <returns>Flas indicating yes (true) or no (false)</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.HasObjectsReference">
            <summary>
            Check if Reference objects are configured in this instance
            </summary>
            <returns>Flas indicating yes (true) or no (false)</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.HasObjectsReferenceOnlyForTagTypes">
            <summary>
            Check if Reference objects only for Tag Or Var Types are configured in this instance
            </summary>
            <returns>Flas indicating yes (true) or no (false)</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.HasAnyObjectOfDomain(T.TSystem.eDomain)">
            <summary>
            Check if this instance has any object from a specified domain
            </summary>
            <param name="domain">Domain to search</param>
            <returns>Flag indicating whether this instance has any object from a specified domain</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.Parse(T.Kernel.Core.ObjectServer,System.String)">
            <summary>
            Converts the specified string representation of a objType to its ObjToken equivalent
            </summary>
            <param name="objServer">Reference to object server</param>
            <param name="objType">A string containing the objType to convert. </param>
            <returns>ObjToken object</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.Parse(T.Kernel.Core.ObjectServer,System.String,System.Int32@)">
            <summary>
            Converts the specified string representation of a objType to its ObjRef equivalent
            </summary>
            <param name="objServer">Reference to object server</param>
            <param name="objType">A string containing the objType to convert. </param>
            <param name="startIndex">Start index. </param>
            <returns>ObjRef object</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetReferences(System.Collections.Generic.List{T.Kernel.Core.ObjectValue})">
            <summary>
            Return list of ObjectValue´s of references and arrays indexed by other objects
            </summary>
            <param name="list">List of ObjectValue´s</param>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetNodeReferences(T.Kernel.Core.ListObj,T.TSystem.ObjTokenNode,System.Collections.Generic.List{T.Kernel.Core.ObjectValue},System.Boolean)">
            <summary>
            Return list of ObjectValue´s of references and arrays indexed by other objects
            </summary>
            <param name="parent">Parent</param>
            <param name="thisNode">Parent node</param>
            <param name="list">List of ObjectValue´s</param>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.IsReferecingToTagValue">
            <summary>
            Return if is referecing to objType of a Tag or a Var (depends of argument 'checkIfVar')
            </summary>
            <returns>Flag true or false</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.IsReferecingToReferenceType">
            <summary>
            Return if is referecing to Reference parentType
            </summary>
            <returns>Flag true or false</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.IsReferecingToTagValueMember">
            <summary>
            Return if is referecing to objType member of a Tag or a Var (depends of argument 'checkIfVar')
            </summary>
            <returns>Flag true or false</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.IsReferecingToTagValueOrBitMember(System.Boolean)">
            <summary>
            Return if is referecing to objType member of a Tag or a Var (depends of argument 'checkIfVar')
            </summary>
            <returns>Flag true or false</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetObjRef(T.TSystem.ePredefinedTagObjID)">
            <summary>
            Get ObjRef based in this instance and 'id' parameter
            </summary>
            <param name="id">ID</param>
            <returns>Return ObjRef</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.IsReferecingToTagQualityOrTimestampMembers">
            <summary>
            Check if is referecing to quality or timestamp members of a Tag or a Var (depends of argument 'checkIfVar')
            </summary>
            <returns>Flag true or false</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.IsReferecingToTagQualityMember">
            <summary>
            Check if is referecing to quality member of a Tag or a Var (depends of argument 'checkIfVar')
            </summary>
            <returns>Flag true or false</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.IsReferecingToObjectValue">
            <summary>
            Check if is referecing to ObjectValue
            </summary>
            <returns>Flag true or false</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.CanAddHaveValueMember">
            <summary>
            Check if is referecing to ObjectValue or if can accept .Value member
            </summary>
            <returns>Flag true or false</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetLastNodeNextArray(System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Get next ObjRef increasing the arrayindex
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetPropertyValue``1(T.TSystem.eObjTypeProperty)">
            <summary>
            Get property objType
            </summary>
            <typeparam name="T">Type of property</typeparam>
            <param name="property">Property to get</param>
            <returns>Property objType</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetObjectName">
            <summary>
            Get full object name
            </summary>
            <returns>Object name</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetObjectName(System.Boolean)">
            <summary>
            Get full or partial object name
            </summary>
            <param name="fullName">Flag indicating whether full name should be returned</param>
            <returns>Object name</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetObjectName(System.Boolean,System.Boolean)">
            <summary>
            Get full or partial object name
            </summary>
            <param name="fullName">Flag indicating whether full name should be returned</param>
            <param name="preferAssetIfExist">Flag indicating whether asset syntax name should be returned if exist</param>
            <returns>Object name</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetAssetVisibility">
            <summary>
            Gets visibility if instance is an asset
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetEventBase(System.Int32,System.Int32,System.Object,System.Object)">
            <summary>
            Get reference to EventBase object based to event ID
            </summary>
            <param name="moduleID">TModule ID</param>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1. Use null to despise this parameter</param>
            <param name="extendEvent2">Extended event ID 2. Use null to despise this parameter</param>
            <returns>Reference to EventBase object based to eventID or null</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GetEventBaseList(System.Int32,System.Int32,System.Object,System.Object)">
            <summary>
            Get list of references to EventBase objects based to event ID
            </summary>
            <param name="moduleID">TModule ID</param>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1. Use null to despise this parameter</param>
            <param name="extendEvent2">Extended event ID 2. Use null to despise this parameter</param>
            <returns>Reference to EventBase object based to eventID or null</returns>
        </member>
        <member name="M:T.Kernel.Core.ObjRef.GenerateEventsForModules(System.Int32,System.Int32,System.Int64,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset})">
            <summary>
            Generate events for a module
            </summary>
            <param name="sourceModuleID">Source module ID</param>
            <param name="extendedModuleID">Extended module ID</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="quality">Quality</param>
            <param name="dt">Date and time</param>
            <param name="targetModuleID">Specific target module ID. -1 for any module</param>
        </member>
        <member name="T:T.Kernel.Core.Reference">
            <summary>
            Define Reference parentType
            </summary>
        </member>
        <member name="T:T.Kernel.Core.Reference.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="F:T.Kernel.Core.Reference.retentive">
            <summary>
            Configuration of retentive to this Reference Object
            </summary>
        </member>
        <member name="P:T.Kernel.Core.Reference.LinkObj">
            <summary>
            Reference to object
            </summary>
        </member>
        <member name="P:T.Kernel.Core.Reference.Link">
            <summary>
            String containg object referenced
            </summary>
        </member>
        <member name="M:T.Kernel.Core.Reference.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Core.Reference.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
            <param name="isRefOnlyLocal">Flag indicating whether reference is only local</param>
        </member>
        <member name="M:T.Kernel.Core.Reference.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Core.Reference.#ctor(T.Kernel.Core.RunObj,System.Int32[],System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
            <param name="isRefOnlyLocal">Flag indicating whether reference is only local</param>
        </member>
        <member name="M:T.Kernel.Core.Reference.GetObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Core.Reference.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Core.Reference.AfterCreateObj(System.Int32)">
            <summary>
            Called after object created to get Retentive objType or configured objType
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:T.Kernel.Core.Reference.SaveRetentive(System.Int32,System.Object)">
            <summary>
            Called to save retentive values of properties 
            </summary>
            <param name="id">object id of object</param>
            <param name="obj">objType</param>
            <returns></returns>
        </member>
        <member name="F:T.Kernel.Core.RetentiveDB.objectServer">
            <summary>
            Object Server
            </summary>
        </member>
        <member name="F:T.Kernel.Core.RetentiveDB.retentiveAPI">
            <summary>
            API used to get and set data from a database
            </summary>
        </member>
        <member name="F:T.Kernel.Core.RetentiveDB.isDisposed">
            <summary>
            Flag indicating whether this instance was already disposed
            </summary>
        </member>
        <member name="M:T.Kernel.Core.RetentiveDB.#ctor(T.Kernel.Core.ObjectServer)">
            <summary>
            Initialize the provider and try open connection
            if failed try create the database
            </summary>
            <param name="objServer"></param>
        </member>
        <member name="M:T.Kernel.Core.RetentiveDB.LoadRetentiveValue(System.String,System.Object@,System.Type)">
            <summary>
            Load a objType from "Value" column from a specific ObjectName in "Object" column
            </summary>
            <param name="objName"></param>
            <param name="objType"></param>
        </member>
        <member name="M:T.Kernel.Core.RetentiveDB.SetContextToTagsClient(System.String[],System.String)">
            <summary>
            Set context to tag list
            </summary>
            <param name="tagNames">Array containg tag list</param>
            <param name="context">Context string. If string empty or null then remove context for tag list</param>
        </member>
        <member name="M:T.Kernel.Core.RetentiveDB.SaveRetentiveValue(System.String,System.Object)">
            <summary>
            Save a objType from "Value" column from a specific ObjectName in "Object" column
            if Table or Row doenst exist so create Table and row to save correctlty 
            </summary>
            <param name="objName"></param>
            <param name="objType"></param>
        </member>
        <member name="M:T.Kernel.Core.RetentiveDB.LogMessage(System.String)">
            <summary>
            Log message 
            </summary>
        </member>
        <member name="T:T.Kernel.Core.RunDBRoot">
            <summary>
            Define root of Runtime DB
            </summary>
        </member>
        <member name="T:T.Kernel.Core.RunDBRoot.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="M:T.Kernel.Core.RunDBRoot.#ctor(T.Kernel.Core.ObjectServer)">
            <summary>
            Construct the instance
            </summary>
            <param name="objServer">Reference to main object</param>
        </member>
        <member name="M:T.Kernel.Core.RunDBRoot.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Kernel.Core.RunException">
            <summary>
            Class used to manage and log exceptions
            </summary>
        </member>
        <member name="M:T.Kernel.Core.RunException.Log(System.Exception)">
            <summary>
            Log the exception stack frames to output 
            </summary>
            <param name="ex">object containing the occurred exception</param>        
        </member>
        <member name="T:T.Kernel.Core.RunObj">
            <summary>
            Base class for all runtime objects
            </summary>
        </member>
        <member name="F:T.Kernel.Core.RunObj.objType">
            <summary>
            Type of the runtime object (enum ObjType)
            </summary>
        </member>
        <member name="F:T.Kernel.Core.RunObj.id">
            <summary>
            ID of the runtime object
            </summary>
        </member>
        <member name="F:T.Kernel.Core.RunObj.parent">
            <summary>
            Reference to parent
            </summary>
        </member>
        <member name="P:T.Kernel.Core.RunObj.ObjType">
            <summary>
            Get type of the runtime object (enum ObjType)
            </summary>
        </member>
        <member name="P:T.Kernel.Core.RunObj.Parent">
            <summary>
            Get reference to parent
            </summary>
        </member>
        <member name="P:T.Kernel.Core.RunObj.ID">
            <summary>
            Get ID of the runtime object
            </summary>
        </member>
        <member name="P:T.Kernel.Core.RunObj.Root">
            <summary>
            Get reference to root
            </summary>
        </member>
        <member name="P:T.Kernel.Core.RunObj.MainObj">
            <summary>
            Get reference to object after root
            </summary>
        </member>
        <member name="P:T.Kernel.Core.RunObj.IsRootTag">
            <summary>
            Get if Root is a Tag
            </summary>
        </member>
        <member name="P:T.Kernel.Core.RunObj.IsRootTagOrVar">
            <summary>
            Get if Root is a Tag or Var
            </summary>
        </member>
        <member name="M:T.Kernel.Core.RunObj.#ctor(T.Kernel.Core.RunObj,T.TSystem.eObjType,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="type">Type of runtime object</param>
            <param name="id">ID of runtime object</param>
        </member>
        <member name="M:T.Kernel.Core.RunObj.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="type">Type of runtime object</param>
            <param name="id">ID of runtime object</param>
        </member>
        <member name="M:T.Kernel.Core.RunObj.GetObjRef">
            <summary>
            Get reference to the object in the database
            </summary>
            <returns>Reference to the object</returns>
        </member>
        <member name="M:T.Kernel.Core.RunObj.GetTypeName">
            <summary>
            Gets type name
            </summary>
            <returns>Return the type name of template</returns>
        </member>
        <member name="M:T.Kernel.Core.RunObj.GetName">
            <summary>
            Get object full name
            </summary>
            <returns>Object name</returns>
        </member>
        <member name="M:T.Kernel.Core.RunObj.GetSimpleName">
            <summary>
            Get object property name
            </summary>
            <returns>Object name</returns>
        </member>
        <member name="M:T.Kernel.Core.RunObj.ToString">
            <summary>
            Format objType to its equivalent string representation
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:T.Kernel.Core.RunObj.SaveRetentive(System.Int32,System.Object)">
            <summary>
            Virtual to save retentive values
            </summary>
            <param name="id"></param>
            <param name="objType"></param>
        </member>
        <member name="M:T.Kernel.Core.RunObj.GetFormat">
            <summary>
            Virtual to get string format 
            </summary>
            <param name="id"></param>
            <param name="objType"></param>
        </member>
        <member name="T:T.Kernel.Core.RuntimeEventArgs">
            <summary>
            Runtime event arguments
            </summary>
        </member>
        <member name="F:T.Kernel.Core.RuntimeEventArgs.ev">
            <summary>
            Event task
            </summary>
        </member>
        <member name="P:T.Kernel.Core.RuntimeEventArgs.Event">
            <summary>
            Get and set event task
            </summary>
        </member>
        <member name="T:T.Kernel.Core.Security">
            <summary>
            Class to access security system
            </summary>
        </member>
        <member name="F:T.Kernel.Core.Security.objServer">
            <summary>
            Reference to the object server
            </summary>
        </member>
        <member name="P:T.Kernel.Core.Security.ObjServer">
            <summary>
            Get reference to the object server
            </summary>
        </member>
        <member name="P:T.Kernel.Core.Security.CurrentUser">
            <summary>
            Get current userName
            </summary>
        </member>
        <member name="P:T.Kernel.Core.Security.CurrentUserName">
            <summary>
            Get name of the current user
            </summary>
        </member>
        <member name="P:T.Kernel.Core.Security.CanShutdown">
            <summary>
            Get flag indicating whether can shutdown
            </summary>
        </member>
        <member name="P:T.Kernel.Core.Security.CanClientStart">
            <summary>
            Get flag indicating whether can start Client module
            </summary>
        </member>
        <member name="P:T.Kernel.Core.Security.CanClientShutdown">
            <summary>
            Get flag indicating whether can stop Client module
            </summary>
        </member>
        <member name="P:T.Kernel.Core.Security.CanStartTools">
            <summary>
            Get flag indicating whether can start Tools modules
            </summary>
        </member>
        <member name="P:T.Kernel.Core.Security.CanToolsSetValues">
            <summary>
            Get flag indicating whether Tools modules can set values
            </summary>
        </member>
        <member name="P:T.Kernel.Core.Security.CanCreateUsers">
            <summary>
            Get flag indicating whether users can be created
            </summary>
        </member>
        <member name="P:T.Kernel.Core.Security.CanSwitchApplication">
            <summary>
            Get flag indicating whether can switch between Windows applications
            </summary>
        </member>
        <member name="P:T.Kernel.Core.Security.CanWriteTags">
            <summary>
            Get flad indicating whether tags can be written
            </summary>
        </member>
        <member name="M:T.Kernel.Core.Security.#ctor(T.Kernel.Core.ObjectServer)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objServer">Reference to the object objServer</param>
        </member>
        <member name="M:T.Kernel.Core.Security.Load">
            <summary>
            Load security system
            </summary>
            <returns>Error code</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.InvokeMethod(System.String,System.Object[])">
            <summary>
            Invoke method from Security module
            </summary>
            <param name="name">Method name</param>
            <param name="parameters">Array of parameters</param>
            <returns>Return method</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.InvokeMethod``1(System.String,System.Object[])">
            <summary>
            Invoke method from Security module
            </summary>
            <param name="name">Method name</param>
            <param name="parameters">Array of parameters</param>
            <returns>Return method</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.GetPropertyValue``1(System.String)">
            <summary>
            Get property value
            </summary>
            <param name="name">Property name</param>
            <returns>Return property value</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.GetPropertyValue``1(System.String,System.Object[])">
            <summary>
            Get property value
            </summary>
            <param name="name">Property name</param>
            <param name="index">Array of indexes</param>
            <returns>Return property value</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.SetPropertyValue(System.String,System.Object)">
            <summary>
            Set property value
            </summary>
            <param name="name">Property name</param>
            <param name="value">New value</param>
        </member>
        <member name="M:T.Kernel.Core.Security.SetPropertyValue(System.String,System.Object[],System.Object)">
            <summary>
            Set property value
            </summary>
            <param name="name">Property name</param>
            <param name="index">Array of indexes</param>
            <param name="value">New value</param>
        </member>
        <member name="M:T.Kernel.Core.Security.CheckUser(System.String@,System.String,System.String)">
            <summary>
            Check is username and password are valid
            </summary>
            <param name="username">User name</param>
            <param name="password">User password</param>
            <returns></returns>
        </member>
        <member name="M:T.Kernel.Core.Security.InternalShutdown">
            <summary>
            This method must not be used. It is only called internally.
            </summary>
        </member>
        <member name="M:T.Kernel.Core.Security.LogOnAsGuest">
            <summary>
            Log on as Guest
            </summary>
            <returns>If success then it returns OK else error code</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.LogOn(System.String,System.String)">
            <summary>
            Do log on
            </summary>
            <param name="username">User name</param>
            <param name="password">Password</param>
            <returns>If success then it returns OK else error code</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.LogOnAsync(System.String,System.String)">
            <summary>
            Do asynchronous log on
            </summary>
            <param name="username">User name</param>
            <param name="password">Password</param>
            <returns>If success then it returns OK else error code</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.InternalSetNewUserAsync(System.String,System.String)">
            <summary>
            Internal set new user
            </summary>
            <param name="username">User name</param>
            <param name="password">User password</param>
        </member>
        <member name="M:T.Kernel.Core.Security.Shutdown">
            <summary>
            Shutdown system
            </summary>
        </member>
        <member name="M:T.Kernel.Core.Security.GetRunPermissions">
            <summary>
            Get run permissions of current userName
            </summary>
            <returns>Run permissions</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.GetPermissions(System.String@)">
            <summary>
            Get run permissions of current userName
            </summary>
            <returns>Run permissions</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.CheckPermissionsGroup(System.Int64)">
            <summary>
            Check permissions of current userName
            </summary>
            <param name="permissions">Request permissions</param>
            <returns>Flag indicating whether request permissions are allowed</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.ShouldAutoLogoff">
            <summary>
            Check auto log off
            </summary>
            <returns>Flag indicating whether auto log off was executed</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.CheckLevel(System.Int32)">
            <summary>
            Check level of current userName
            </summary>
            <param name="level">Request level</param>
            <returns>Flag indicating whether request level is allowed</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.UserChangePassword(System.String,System.String,System.String)">
            <summary>
            Change userName password
            </summary>
            <param name="username">User name</param>
            <param name="oldPassword">User old password</param>
            <param name="newPassword">User new password</param>
            <returns>Flag indicating whether password was changed</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.InternalUserChangePassword(System.String,System.String,System.String,System.String)">
            <summary>
            Change userName password
            </summary>
            <param name="username">User name</param>
            <param name="oldPassword">User old password</param>
            <param name="newPassword">User new password</param>
            <returns>Flag indicating whether password was changed</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.SetBlockedUser(System.String,System.Boolean)">
            <summary>
            Block or unblock runtime user.
            </summary>
            <param name="username">User name</param>
            <param name="flag">Flag indicating for blocking (true) or not (false)</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.SetDeletedUser(System.String,System.Boolean)">
            <summary>
            Set flag Deleted of runtime user. This method does not remove user in runtime database.
            </summary>
            <param name="username">User name</param>
            <param name="flag">Flag indicating for deleting (true) or not (false)</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.GetUserNames">
            <summary>
            Get userName names
            </summary>
            <returns>List containg userName names</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.CheckRunPermissionFromUser(System.String,T.TSystem.ePermissionsRun)">
            <summary>
            Check permission from userName
            </summary>
            <param name="name">User name</param>
            <param name="permission">Request permission</param>
            <returns>Flag indicating whether request permission is allowed</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.AddRuntimeUser(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Add runtime user
            </summary>
            <param name="name">User name</param>
            <param name="permissionsStr">Permissions</param>
            <param name="password">Password</param>
            <param name="passwordHint">Password hint</param>
            <param name="policyStr">Policy</param>
            <param name="concatInfoEmail">ConcatInfo email</param>
            <param name="concatInfoPhone">ConcatInfo phone</param>
            <param name="concatInfoCompleteName">ConcatInfo complete name</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.AddRuntimeUser(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,T.Library.TRef{System.Int32})">
            <summary>
            Add runtime user
            </summary>
            <param name="name">User name</param>
            <param name="permissionsStr">Permissions</param>
            <param name="password">Password</param>
            <param name="passwordHint">Password hint</param>
            <param name="policyStr">Policy</param>
            <param name="concatInfoEmail">ConcatInfo email</param>
            <param name="concatInfoPhone">ConcatInfo phone</param>
            <param name="concatInfoCompleteName">ConcatInfo complete name</param>
            <param name="errorCode">Error code</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.NewRuntimeUser(System.String,T.Library.TRef{System.Int32})">
            <summary>
            New runtime user
            </summary>
            <param name="name">User name</param>
            <param name="errorCode">Error code</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.NewRuntimeUser(System.String)">
            <summary>
            New runtime user
            </summary>
            <param name="name">User name</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.UpdateRuntimeUser(System.String,T.Library.TRef{System.Int32})">
            <summary>
            Update runtime user
            </summary>
            <param name="name">User name</param>
            <param name="errorCode">Error code</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.UpdateRuntimeUser(System.String)">
            <summary>
            Update runtime user
            </summary>
            <param name="name">User name</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.UpdateRuntimeUser(System.String,System.String)">
            <summary>
            Update runtime user
            </summary>
            <param name="name">User name</param>
            <param name="values">User objects values</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.RemoveRuntimeUser(System.String)">
            <summary>
            Remove runtime user
            </summary>
            <param name="name">User name</param>
        </member>
        <member name="M:T.Kernel.Core.Security.ReloadRuntimeUsers">
            <summary>
            Reload runtime users
            </summary>
            <returns>String array containg user names. If failed then returns null</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.GetPasswordHintAsync(System.String)">
            <summary>
            GetPasswordHintAsync
            </summary>
            <param name="name">User name</param>
        </member>
        <member name="M:T.Kernel.Core.Security.GetListOfUserNames">
            <summary>
            Get user names
            </summary>
            <returns>List containg user names separated by \n(line feed)</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.GetListOfPredefinedUserNames">
            <summary>
            Get predefined user names
            </summary>
            <returns>List containg predefined user names separated by \n(line feed)</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.GetListOfRuntimeUserNames">
            <summary>
            Get runtime user names
            </summary>
            <returns>List containg runtime user names separated by \n(line feed)</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.GetListOfPermissionNamesOfUsers">
            <summary>
            Get permission names of users
            </summary>
            <returns>List containg permission names of users separated by \n(line feed)</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.GetListOfPermissionNamesOfPredefinedUsers">
            <summary>
            Get permission names of predefined users
            </summary>
            <returns>List containg permission names of predefined users separated by \n(line feed)</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.GetListOfPermissionNamesOfRuntimeUsers">
            <summary>
            Get permission names of runtime users
            </summary>
            <returns>List containg permission names of runtime users separated by \n(line feed)</returns>
        </member>
        <member name="M:T.Kernel.Core.Security.ValidateUser(System.String,System.String)">
            <summary>
            Validate user
            </summary>
        </member>
        <member name="T:T.Kernel.Core.ServiceClient.AsyncMethodCaller">
            <summary>
            Async delegate invoke remote method 
            </summary>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="parameters">Array of parameters</param>
            <returns>Return objType</returns>
        </member>
        <member name="F:T.Kernel.Core.ServiceClient.objServer">
            <summary>
            Reference to object objServer object
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ServiceClient.serviceClientObject">
            <summary>
            Reference to service client object 
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ServiceClient.tcpModule">
            <summary>
            Reference to TCPServer module
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ServiceClient.miDirectExecuteMethodCallbackInTCPServerModule">
            <summary>
            Reference to method DirectExecuteMethodCallback in TCPServer module
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient.#ctor(T.Kernel.Core.ObjectServer)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objServer">Reference to object objServer object</param>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient.InvokeService(T.Kernel.Core.eService,System.String,System.Object[])">
            <summary>
            Invoke remote method
            </summary>
            <param name="service">Service enum name</param>
            <param name="methodName">Method name</param>
            <param name="parameters">Array of parameters</param>
            <returns>Return objType</returns>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient.InvokeServiceAsync(T.Kernel.Core.eService,System.String,System.Object[])">
            <summary>
            Invoke remote method
            </summary>
            <param name="service">Service enum name</param>
            <param name="methodName">Method name</param>
            <param name="parameters">Array of parameters</param>
            <returns>Return objType</returns>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient.InvokeAsync(System.Int32,System.String,System.Object[])">
            <summary>
            Invoke remote method async
            </summary>
            <param name="serviceName">Service name</param>
            <param name="methodName">Method name</param>
            <param name="parameters">Array of parameters</param>
            <returns>Return objType</returns>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient._Invoke(System.Int32,System.String,System.Boolean@,System.Object[])">
            <summary>
            Invoke remote method
            </summary>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="isInvokeCalled">Return whether Invoke was called</param>
            <param name="parameters">Array of parameters</param>
            <returns>Return objType</returns>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient._InvokeAsync(System.Int32,System.String,T.Library.TRef{System.Boolean},System.Object[])">
            <summary>
            Invoke remote method async
            </summary>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="isInvokeCalled">Return whether Invoke was called</param>
            <param name="parameters">Array of parameters</param>
            <returns>Return objType</returns>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient.BeginInvoke(System.AsyncCallback,System.Object,System.Int32,System.String,System.Object[])">
            <summary>
            Begin an asynchronous invoke remote method
            </summary>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for this request</param>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="parameters">Array of parameters</param>
            <returns>Identification of the asynchronous invoke or null if error</returns>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient.EndInvoke(System.IAsyncResult,System.Object[])">
            <summary>
            End an asynchronous invoke remote method
            </summary>
            <param name="ar">Identification of the asynchronous invoke</param>
            <param name="parameters">Array of parameters</param>
            <returns>Return objType</returns>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient.InvokeNoResponse(System.Int32,System.String,System.Object[])">
            <summary>
            Invoke remote method and no wait response
            </summary>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="parameters">Array of parameters</param>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient.InvokeNoResponseAsync(System.Int32,System.String,System.Object[])">
            <summary>
            Invoke remote method and no wait response
            </summary>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="parameters">Array of parameters</param>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient._InvokeNoResponse(System.Int32,System.String,System.Boolean@,System.Object[])">
            <summary>
            Invoke remote method and no wait response
            </summary>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="isInvokeCalled">Return whether Invoke was called</param>
            <param name="parameters">Array of parameters</param>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient._InvokeNoResponseAsync(System.Int32,System.String,T.Library.TRef{System.Boolean},System.Object[])">
            <summary>
            Invoke remote method and no wait response
            </summary>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="isInvokeCalled">Return whether Invoke was called</param>
            <param name="parameters">Array of parameters</param>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient.BeginInvokeNoResponse(System.AsyncCallback,System.Object,System.Int32,System.String,System.Object[])">
            <summary>
            Begin an asynchronous invoke remote method and no wait response
            </summary>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for this request</param>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="parameters">Array of parameters</param>
            <returns>Identification of the asynchronous invoke or null if error</returns>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient.EndInvokeNoResponse(System.IAsyncResult,System.Object[])">
            <summary>
            End an asynchronous invoke remote method
            </summary>
            <param name="ar">Identification of the asynchronous invoke</param>
            <param name="parameters">Array of parameters</param>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient.ClearConnections">
            <summary>
            Clear all connections
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient.InternalSetDirectExecuteMethodCallback(System.Object,System.Reflection.MethodInfo)">
            <summary>
            This method must not be used. It is only called internally.
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a userName's code. 
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects.
            </summary>
            <param name="disposing">Flag true or false</param>
        </member>
        <member name="M:T.Kernel.Core.ServiceClient.Dispose">
            <summary>
            Dispose access
            </summary>
        </member>
        <member name="T:T.Kernel.Core.SyncObject">
            <summary>
            This class managements syncronization task of objects between a client and remote objServer
            </summary>
        </member>
        <member name="T:T.Kernel.Core.SyncObject.Connect">
            <summary>
            Delegate method that will be called during first attempt of connection
            </summary>
            <returns>Flag indicating continue (true) or cancel connection (false)</returns>
        </member>
        <member name="F:T.Kernel.Core.SyncObject.objServer">
            <summary>
            Reference to the ObjectServer
            </summary>
        </member>
        <member name="F:T.Kernel.Core.SyncObject.syncObjectModule">
            <summary>
            Reference to SyncObjectModule module
            </summary>
        </member>
        <member name="F:T.Kernel.Core.SyncObject.syncObjectModuleRun">
            <summary>
            Reference to SyncObjectModule module
            </summary>
        </member>
        <member name="P:T.Kernel.Core.SyncObject.ParentGuid">
            <summary>
            Get identification of parent client connection
            </summary>
        </member>
        <member name="P:T.Kernel.Core.SyncObject.InternalGuid">
            <summary>
            Get identification of internal client connection
            </summary>
        </member>
        <member name="P:T.Kernel.Core.SyncObject.CurrentIP">
            <summary>
            Get current connected IP
            </summary>
        </member>
        <member name="P:T.Kernel.Core.SyncObject.CurrentPort">
            <summary>
            Get current connected port number
            </summary>
        </member>
        <member name="P:T.Kernel.Core.SyncObject.IsConnected">
            <summary>
            Get flag indicating if SyncObject module is connected to remote objServer
            </summary>
        </member>
        <member name="P:T.Kernel.Core.SyncObject.ConnectionError">
            <summary>
            Get current connection error
            </summary>
        </member>
        <member name="P:T.Kernel.Core.SyncObject.ServerVersion">
            <summary>
            Get version of objServer
            </summary>
        </member>
        <member name="P:T.Kernel.Core.SyncObject.ServerDBVersion">
            <summary>
            Get database version of objServer
            </summary>
        </member>
        <member name="M:T.Kernel.Core.SyncObject.#ctor(T.Kernel.Core.ObjectServer)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objServer">Reference to the object objServer</param>
        </member>
        <member name="M:T.Kernel.Core.SyncObject.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:T.Kernel.Core.SyncObject.Dispose">
            <summary>
            Dispose SyncObject module
            </summary>
        </member>
        <member name="M:T.Kernel.Core.SyncObject.StartSyncBindings">
            <summary>
            Start sync bindings
            </summary>
        </member>
        <member name="M:T.Kernel.Core.SyncObject.Dispose(System.Boolean)">
            <summary>
            Dispose SyncObject module
            </summary>
        </member>
        <member name="M:T.Kernel.Core.SyncObject.AddObject(T.Kernel.Core.ObjRef)">
            <summary>
            Add object to SyncObject module
            </summary>
            <param name="objRef">Reference to object in database</param>
        </member>
        <member name="M:T.Kernel.Core.SyncObject.ReconnectToServer">
            <summary>
            This method is called to force reconnection to server.
            </summary>
        </member>
        <member name="T:T.Kernel.Core.SyncRuntimeEventArgs">
            <summary>
            Sync Runtime event arguments
            </summary>
        </member>
        <member name="T:T.Kernel.Core.EventTimer">
            <summary>
            Helper for ModuleEventBinding class. 
            Contain information of the event timer.
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventTimer.time">
            <summary>
            Time in ms
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventTimer.timer">
            <summary>
            Timer
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventTimer.groupEvents">
            <summary>
            Flag indicating whether binded event should be grouped with other events of same time
            </summary>
        </member>
        <member name="F:T.Kernel.Core.EventTimer.listOfEventBindings">
            <summary>
            List of event binding of the timer
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventTimer.Time">
            <summary>
            Get time in ms
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventTimer.Timer">
            <summary>
            Get timer
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventTimer.GroupEvents">
            <summary>
            Get flag indicating whether binded event should be grouped with other events of same time
            </summary>
        </member>
        <member name="P:T.Kernel.Core.EventTimer.ListOfEventBindings">
            <summary>
            Get list of event binding of the timer
            </summary>
        </member>
        <member name="M:T.Kernel.Core.EventTimer.#ctor(System.Int32,System.Threading.TimerCallback,System.Boolean)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="time">Time in ms</param>
            <param name="callback">Callback for event timer</param>
            <param name="groupEvents">Flag indicating whether binded event should be grouped with other events of same time. Use "false" when you wish more precision between events</param>
        </member>
        <member name="T:T.Kernel.Core.ModuleEventBindingReference">
            <summary>
            Helper for ModuleEventBinding class. 
            Contain information of the event change of the reference.
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBindingReference.evBindInObjectValue">
            <summary>
            Reference to object of the event binding to remove in ObjectValue
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBindingReference.objValue">
            <summary>
            Reference to the object objType in the database
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBindingReference.EvBindInObjectValue">
            <summary>
            Get reference to object of the event binding to remove in ObjectValue
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBindingReference.ObjValue">
            <summary>
             Get reference to the object objType in the database
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ModuleEventBindingReference.#ctor(System.Object,T.Kernel.Core.ObjectValue)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="evBindInObjectValue">Reference to object of the event binding to remove in ObjectValue</param>
            <param name="objValue">Reference to the object objType in the database</param>
        </member>
        <member name="T:T.Kernel.Core.ModuleEventBinding">
            <summary>
            Helper for TModule class.
            Contain information of the event binding of a 'ObjRef' object or Event Timer.
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBinding.objRef">
            <summary>
            Reference to the object in the database
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBinding.time">
            <summary>
            Time in ms to generate event after changing object
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBinding.eventBase">
            <summary>
            Event object
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBinding.group">
            <summary>
            Identify a group of events
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBinding.lastValue">
            <summary>
            Last changed objType
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBinding.objValue">
            <summary>
            Reference to the object objType in the database
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBinding.evBindInObjectValue">
            <summary>
            Reference to object of the event binding to remove in ObjectValue
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBinding.listOfEventBindingReferences">
            <summary>
            List of event binding references
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBinding.listInGroup">
            <summary>
            List of the event binding in list of groups.
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBinding.refToListInGroup">
            <summary>
            Reference to object of the event binding in 'listInGroup' member.
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBinding.eventTimer">
            <summary>
            Reference to the event timer
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBinding.refToEventTimer">
            <summary>
            Reference to object of the event timer in 'listOfEventBindings' member in EventTimer class
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBinding.raiseEvent">
            <summary>
            Event handler
            </summary>
        </member>
        <member name="F:T.Kernel.Core.ModuleEventBinding.refDisplayValue">
            <summary>
            Reference to list containg DisplayValue objects
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBinding.ObjRef">
            <summary>
            Get reference to the object in the database
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBinding.Time">
            <summary>
            Time in ms to generate event after changing object
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBinding.Event">
            <summary>
            Get event object
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBinding.Group">
            <summary>
            Get identification of a group of events
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBinding.LastValue">
            <summary>
            Get and set last changed objType
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBinding.ObjValue">
            <summary>
            Get reference to the object objType in the database
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBinding.EvBindInObjectValue">
            <summary>
            Get reference to object of the event binding to remove in ObjectValue
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBinding.ListOfEventBindingReferences">
            <summary>
            Get list of event binding references
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBinding.ListInGroup">
            <summary>
            Get list of the event binding in list of groups.
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBinding.RefToListInGroup">
            <summary>
            Get reference to object of the event binding in 'listInGroup' member.
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBinding.EventTimer">
            <summary>
            Get reference to the event timer
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBinding.RefToEventTimer">
            <summary>
            Get reference to object of the event timer in 'listOfEventBindings' member in EventTimer class
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBinding.RaiseEvent">
            <summary>
            Get event handler
            </summary>
        </member>
        <member name="P:T.Kernel.Core.ModuleEventBinding.RefDisplayValue">
            <summary>
            Get reference to list containg DisplayValue objects
            </summary>
        </member>
        <member name="M:T.Kernel.Core.ModuleEventBinding.#ctor(T.Kernel.Core.ObjRef,System.Int32,T.Kernel.Core.EventBase,System.Object,System.Object,T.Kernel.Core.ObjectValue,System.Object,System.Delegate)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objRef">Reference to the object in the database</param>
            <param name="time">Time in ms to generate event after changing object</param>
            <param name="eventBase">EventBase object</param>
            <param name="group">Identify a group of events</param>
            <param name="value">Last saved value</param>
            <param name="objValue">ObjectValue</param>
            <param name="evBindInObjectValue">Reference to object of the event binding to remove in ObjectValue</param>
            <param name="raiseEvent">Event handler</param>
        </member>
        <member name="M:T.Kernel.Core.ModuleEventBinding.#ctor(T.Kernel.Core.EventBase,System.Object,T.Kernel.Core.EventTimer,System.Object,System.Delegate)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="eventTime">Event</param>
            <param name="group">Identify a group of events</param>
            <param name="eventTimer">Reference to the event timer</param>
            <param name="refToEventTimer">Reference to object of the event timer</param>
            <param name="raiseEvent">Event handler</param>
        </member>
        <member name="M:T.Kernel.Core.ModuleEventBinding.AddReferences(T.Kernel.Core.ModuleEventBindingReference)">
            <summary>
            Add event change of a reference
            </summary>
            <param name="reference"></param>
        </member>
        <member name="T:T.Kernel.Core.TModule">
            <summary>
            Define a module
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.objServer">
            <summary>
            Reference to the object objServer
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.name">
            <summary>
            TModule name
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.id">
            <summary>
            Module ID
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.signalAvailableEvents">
            <summary>
            Signalize that events are available to TModule
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.listOfEventBinding">
            <summary>
            List of event binding
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.listOfEventBindingGroupedByGroup">
            <summary>
            List of event binding grouped by group of events ('group' member in EventBase class)
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.listOfEventsToExecuteBottomPriority">
            <summary>
            List of events to execute for Bottom priority
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.listOfEventsToExecuteTopPriority">
            <summary>
            List of events to execute for Top priority
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.listOfEventsToExecuteTopMostPriority">
            <summary>
            List of events to execute for TopMost priority
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.disposed">
            <summary>
            Flag indicating if dispose already was called
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.removeOfTheListOfGroups">
            <summary>
            Flag indicating should remove event binding of the list of groups
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.cacheGroup">
            <summary>
            Cache 'group' used when binding events
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.cacheList">
            <summary>
            Cache 'List' used when binding events
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.timers">
            <summary>
            List of event timers
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.shouldReceiveObjectValueChange">
            <summary>
            Flag indicating if TModule should receive object objType change when changing quality and timestamp of a object
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.uniqueEventNumber">
            <summary>
            Unique event number
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.isInternalSyncObjectModule">
            <summary>
            Flag indicating if TModule is SyncObject
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.isInternalTCPServerModule">
            <summary>
            Flag indicating if TModule is TCPServer
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.lockThis">
            <summary>
            Object used to synchronize access
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.moduleRun">
            <summary>
            Reference to module in execution
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.isStopping">
            <summary>
            Flag indicating if module is stopping
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.mainThread">
            <summary>
            Reference to the main thread
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.thread">
            <summary>
            Thread to execute runtime task
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.startedThread">
            <summary>
            Flag indicating if the thread started
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.stopThread">
            <summary>
            Flag indicating if the thread should stop
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.timerAsync">
            <summary>
            Task thread while module is async
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.stopTimerAsync">
            <summary>
            Flag indicating if the timer async should stop
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.disableTimerAsync">
            <summary>
            Flag indicating if the timer async is disabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.errorOnStartThread">
            <summary>
            Flag indicating if an error occured when thread was starting
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.stringErrorOnStartThread">
            <summary>
            String containg error when starting thread
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.groupInternalBindings">
            <summary>
            Reference to internal group bindings
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.eventGenerationDisabled">
            <summary>
            Flag indicating whether event generation is disabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TModule.cacheEventModule">
            <summary>
            Queue containg cache of EventModule objects
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TModule.ObjServer">
            <summary>
            Get reference to the object objServer
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TModule.Name">
            <summary>
            Get TModule name
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TModule.ID">
            <summary>
            Get Module ID
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TModule.ModuleRun">
            <summary>
            Get reference to module in execution
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TModule.ShouldReceiveObjectValueChange">
            <summary>
            Flag indicating if TModule should receive object objType change when changing quality and timestamp of a object
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TModule.IsStopping">
            <summary>
            Get flag indicating if module is stopping
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TModule.IsInternalSyncObjectModule">
            <summary>
            Get flag indicating if TModule is SyncObject
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TModule.IsInternalTCPServerModule">
            <summary>
            Get flag indicating if TModule is TCPServer
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TModule.SyncRoot">
            <summary>
            Get object of syncronization
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TModule.EventGenerationDisabled">
            <summary>
            Get flag indicating whether event generation is disabled
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TModule.#ctor(T.Kernel.Core.ObjectServer,System.String,System.Boolean)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objServer">Reference to the object objServer</param>
            <param name="name">Name</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.#ctor(T.Kernel.Core.ObjectServer,System.String,System.Type,System.Object[],System.String[],System.Boolean)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objServer">Reference to the object objServer</param>
            <param name="name">Name</param>
            <param name="typeOfObject">Type of object to be instanciated</param>
            <param name="parameters">Parameters of object to be instanced</param>
            <param name="args">Arguments</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.#ctor(T.Kernel.Core.ObjectServer,System.String,System.Type,System.Object[],System.String[],System.Boolean,System.Boolean)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objServer">Reference to the object objServer</param>
            <param name="name">Name</param>
            <param name="typeOfObject">Type of object to be instanciated</param>
            <param name="parameters">Parameters of object to be instanced</param>
            <param name="args">Arguments</param>
            <param name="noAutoDoEvents">Flag indicating if class must call automatically DoEvents</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.#ctor(T.Kernel.Core.ObjectServer,System.String,System.Type,System.String[],System.Boolean)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objServer">Reference to the object objServer</param>
            <param name="name">Name</param>
            <param name="typeOfObject">Type of object to be instanciated</param>
            <param name="args">Arguments</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.#ctor(T.Kernel.Core.ObjectServer,System.String,System.Type,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objServer">Reference to the object objServer</param>
            <param name="name">Name</param>
            <param name="typeOfObject">Type of object to be instanciated</param>
            <param name="args">Arguments</param>
            <param name="noAutoDoEvents">Flag indicating if class must call automatically DoEvents</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot started</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.Initialize(T.Kernel.Core.ObjectServer,System.String,System.Type,System.Object[],System.String[],System.Boolean,System.Boolean)">
            <summary>
            Initialize the instance of this class
            </summary>
            <param name="objServer">Reference to the object objServer</param>
            <param name="name">Name</param>
            <param name="typeOfObject">Type of object to be instanciated</param>
            <param name="parameters">Parameters of object to be instanced</param>
            <param name="args">Arguments</param>
            <param name="noAutoDoEvents">Flag indicating if class must call automatically DoEvents</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.Finalize">
            <summary>
            Destructor of the class
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TModule.Dispose">
            <summary>
            Dispose instance
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TModule.Dispose(System.Boolean)">
            <summary>
            Free resources
            </summary>
            <param name="disposing">Flag</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.UpdateModuleIsActivatedFlag(System.Boolean)">
            <summary>
            Update isActivated flag from module
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TModule.UpdateModuleIsPausedFlag(System.Boolean,System.Int64)">
            <summary>
            Update isPaused flag from module
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TModule.ForceInternalBindings">
            <summary>
            Force internal bindings
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TModule.Create(System.String,System.Boolean)">
            <summary>
            Create the TModule
            </summary>
            <param name="name">TModule name to create</param>
            <param name="isInternalSyncObjectModule">Flag indicating if TModule is SyncObject</param>
            <returns>Flag indication success of fail</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.Destroy">
            <summary>
            Destroy the class
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TModule.BindEvent(T.Kernel.Core.ObjRef,T.Kernel.Core.EventBase,System.EventHandler{T.Kernel.Core.RuntimeEventArgs})">
            <summary>
            Bind event of the object
            </summary>
            <param name="objRef">Reference to the object in the database</param>
            <param name="eventBase">EventBase object</param>
            <param name="raiseEvent">Event handler</param>
            <returns>Return identification of the event binding created to after removing</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.BindEvent(T.Kernel.Core.ObjRef,T.Kernel.Core.EventBase,T.Kernel.Core.AsyncEventHandler{T.Kernel.Core.RuntimeEventArgs})">
            <summary>
            Bind event of the object
            </summary>
            <param name="objRef">Reference to the object in the database</param>
            <param name="eventBase">EventBase object</param>
            <param name="raiseEvent">Async Event handler</param>
            <returns>Return identification of the event binding created to after removing</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:T.Kernel.Core.TModule.BindEvent(T.Kernel.Core.ObjRef,T.Kernel.Core.EventBase,System.Object,System.EventHandler{T.Kernel.Core.RuntimeEventArgs})" -->
        <!-- Badly formed XML comment ignored for member "M:T.Kernel.Core.TModule.BindEvent(T.Kernel.Core.ObjRef,T.Kernel.Core.EventBase,System.Object,T.Kernel.Core.AsyncEventHandler{T.Kernel.Core.RuntimeEventArgs})" -->
        <member name="M:T.Kernel.Core.TModule.BindEvent(T.Kernel.Core.ObjRef,System.Int32,T.Kernel.Core.EventBase,System.Object,System.EventHandler{T.Kernel.Core.RuntimeEventArgs})">
            <summary>
            Bind event of the object
            </summary>
            <param name="objRef">Reference to the object in the database</param>
            <param name="time">Time in ms to generate event after changing object</param>
            <param name="eventBase">EventBase object</param>
            <param name="group">Identify a group of events</param>
            <param name="raiseEvent">Event handler</param>
            <returns>Return identification of the event binding created to after removing</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.BindEvent(T.Kernel.Core.ObjRef,System.Int32,T.Kernel.Core.EventBase,System.Object,T.Kernel.Core.AsyncEventHandler{T.Kernel.Core.RuntimeEventArgs})">
            <summary>
            Bind event of the object
            </summary>
            <param name="objRef">Reference to the object in the database</param>
            <param name="time">Time in ms to generate event after changing object</param>
            <param name="eventBase">EventBase object</param>
            <param name="group">Identify a group of events</param>
            <param name="raiseEvent">Async Event handler</param>
            <returns>Return identification of the event binding created to after removing</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.BindEvent(T.Kernel.Core.ObjRef[],T.Kernel.Core.EventBase,System.EventHandler{T.Kernel.Core.RuntimeEventArgs})">
            <summary>
            Bind event of multiple objects
            </summary>
            <param name="objRefs">Reference to the objects in the database</param>
            <param name="eventBase">EventBase object</param>
            <param name="raiseEvent">Event handler</param>
            <returns>Return an array containg each identification of the event binding created to after removing</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.BindEvent(T.Kernel.Core.ObjRef[],T.Kernel.Core.EventBase,T.Kernel.Core.AsyncEventHandler{T.Kernel.Core.RuntimeEventArgs})">
            <summary>
            Bind event of multiple objects
            </summary>
            <param name="objRefs">Reference to the objects in the database</param>
            <param name="eventBase">EventBase object</param>
            <param name="raiseEvent">AsyncEvent handler</param>
            <returns>Return an array containg each identification of the event binding created to after removing</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.BindEvent(T.Kernel.Core.ObjRef[],T.Kernel.Core.EventBase,System.Object,System.EventHandler{T.Kernel.Core.RuntimeEventArgs})">
            <summary>
            Bind event of multiple objects
            </summary>
            <param name="objRefs">Reference to the objects in the database</param>
            <param name="eventBase">EventBase object</param>
            <param name="group">Identify a group of events</param>
            <param name="raiseEvent">Event handler</param>
            <returns>Return an array containg each identification of the event binding created to after removing</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.BindEvent(T.Kernel.Core.ObjRef[],T.Kernel.Core.EventBase,System.Object,T.Kernel.Core.AsyncEventHandler{T.Kernel.Core.RuntimeEventArgs})">
            <summary>
            Bind event of multiple objects
            </summary>
            <param name="objRefs">Reference to the objects in the database</param>
            <param name="eventBase">EventBase object</param>
            <param name="group">Identify a group of events</param>
            <param name="raiseEvent">Async Event handler</param>
            <returns>Return an array containg each identification of the event binding created to after removing</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.BindEvent(T.Kernel.Core.ObjRef[],System.Int32,T.Kernel.Core.EventBase,System.Object,System.EventHandler{T.Kernel.Core.RuntimeEventArgs})">
            <summary>
            Bind event of multiple object
            </summary>
            <param name="objRefs">Reference to the objects in the database</param>
            <param name="time">Time in ms to generate event after changing object</param>
            <param name="eventBase">EventBase object</param>
            <param name="group">Identify a group of events</param>
            <param name="raiseEvent">Event handler</param>
            <returns>Return an array containg each identification of the event binding created to after removing</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.BindEvent(T.Kernel.Core.ObjRef[],System.Int32,T.Kernel.Core.EventBase,System.Object,T.Kernel.Core.AsyncEventHandler{T.Kernel.Core.RuntimeEventArgs})">
            <summary>
            Bind event of multiple object
            </summary>
            <param name="objRefs">Reference to the objects in the database</param>
            <param name="time">Time in ms to generate event after changing object</param>
            <param name="eventBase">EventBase object</param>
            <param name="group">Identify a group of events</param>
            <param name="raiseEvent">AsyncEvent handler</param>
            <returns>Return an array containg each identification of the event binding created to after removing</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.BindEvent(System.Int32,T.Kernel.Core.EventBase,System.EventHandler{T.Kernel.Core.RuntimeEventArgs},System.Boolean)">
            <summary>
            Bind event based in time
            </summary>
            <param name="time">Time in ms to generate event</param>
            <param name="eventTime">Event</param>
            <param name="raiseEvent">Event handler</param>
            <param name="groupEvents">Flag indicating whether binded event should be grouped with other events of same time. Use "false" when you wish more precision between events</param>
            <returns>Return identification of the event binding created to after removing</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.BindEvent(System.Int32,T.Kernel.Core.EventBase,T.Kernel.Core.AsyncEventHandler{T.Kernel.Core.RuntimeEventArgs},System.Boolean)">
            <summary>
            Bind event based in time
            </summary>
            <param name="time">Time in ms to generate event</param>
            <param name="eventTime">Event</param>
            <param name="raiseEvent">AsyncEvent handler</param>
            <param name="groupEvents">Flag indicating whether binded event should be grouped with other events of same time. Use "false" when you wish more precision between events</param>
            <returns>Return identification of the event binding created to after removing</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.BindEvent(System.Int32,T.Kernel.Core.EventBase,System.Object,System.EventHandler{T.Kernel.Core.RuntimeEventArgs},System.Boolean)">
            <summary>
            Bind event based in time
            </summary>
            <param name="time">Time in ms to generate event</param>
            <param name="eventTime">Event</param>
            <param name="group">Identify a group of events</param>
            <param name="raiseEvent">Event handler</param>
            <param name="groupEvents">Flag indicating whether binded event should be grouped with other events of same time. Use "false" when you wish more precision between events</param>
            <returns>Return identification of the event binding created to after removing</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.BindEvent(System.Int32,T.Kernel.Core.EventBase,System.Object,T.Kernel.Core.AsyncEventHandler{T.Kernel.Core.RuntimeEventArgs},System.Boolean)">
            <summary>
            Bind event based in time
            </summary>
            <param name="time">Time in ms to generate event</param>
            <param name="eventTime">Event</param>
            <param name="group">Identify a group of events</param>
            <param name="raiseEvent">Async Event handler</param>
            <param name="groupEvents">Flag indicating whether binded event should be grouped with other events of same time. Use "false" when you wish more precision between events</param>
            <returns>Return identification of the event binding created to after removing</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.EventTimerCallback(System.Object)">
            <summary>
            Callback for event timer
            </summary>
            <param name="obj">Event bind ID</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.UnbindEvent(System.Object)">
            <summary>
            Unbind event of the object or time
            </summary>
            <param name="bindID">Identification of the event binding to remove</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.UnbindEventByGroup(System.Object)">
            <summary>
            Unbind events of the objects or time based by group
            </summary>
            <param name="group">Group</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.ClearAllEventBinding">
            <summary>
            Clear all event bindings
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TModule.CheckIfEventShouldBeRaised(T.Kernel.Core.ObjectValue,System.Object,System.Int32,System.Int32,System.Boolean,T.Kernel.Core.eRunEvent,System.Int64,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Check if a new event to TModule should be raised
            </summary>
            <param name="caller">Reference caller</param>
            <param name="bindID">Reference to event bind ID</param>
            <param name="sourceModuleID">Source Module ID</param>
            <param name="extendedModuleID">Extended Module ID</param>
            <param name="flagLastValue">Indicate if events must to be generated for all changes or last change</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="flagReferenceChanged">Flag indicating if event binding is 'reference changed'</param>
            <param name="quality">Quality</param>
            <param name="timestamp">Time stamp</param>
            <param name="userName">User name changes the value</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.GetEventBase(System.Object,System.Int32,System.Object,System.Object)">
            <summary>
            Get reference to EventBase object based to event ID
            </summary>
            <param name="bindID">Reference to event bind ID</param>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extended event ID 1. Use null to despise this parameter</param>
            <param name="extendEvent2">Extended event ID 2. Use null to despise this parameter</param>
            <returns>Reference to EventBase object based to eventID or null</returns>
        </member>
        <member name="P:T.Kernel.Core.TModule.NumOfEventsToExecute">
            <summary>
            Get number of events pending to execute
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TModule.HasEventsToExecute">
            <summary>
            Get if TModule has events to execute
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TModule.AddEventToExecute(T.Kernel.Core.EventBase,System.EventHandler{T.Kernel.Core.RuntimeEventArgs})">
            <summary>
            Add event to be executed
            </summary>
            <param name="eventBase">Event</param>
            <param name="raiseEvent">Event handler</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.AddEventToExecute(T.Kernel.Core.EventBase,T.Kernel.Core.AsyncEventHandler{T.Kernel.Core.RuntimeEventArgs})">
            <summary>
            Add event to be executed
            </summary>
            <param name="eventBase">Event</param>
            <param name="raiseEvent">Async Event handler</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.AddEventToExecute(T.Kernel.Core.EventModule)">
            <summary>
            Add event to execute
            </summary>
            <param name="ev">Event TModule</param>
        </member>
        <member name="M:T.Kernel.Core.TModule._GetEventToExecute(System.Collections.Generic.LinkedList{T.Kernel.Core.EventModule})">
            <summary>
            Get event to execute from specified list
            </summary>
            <returns>Event TModule</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.GetEventToExecute">
            <summary>
            Get event to execute
            </summary>
            <returns>Event TModule</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule._GetEventToExecute(System.Collections.Generic.LinkedList{T.Kernel.Core.EventModule},System.Int32,System.Object,System.Object)">
            <summary>
            Get event to execute based to event ID from specified list
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extend Event 1</param>
            <param name="extendEvent2">Extend Event 2</param>
            <returns>Event TModule</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.GetEventToExecute(System.Int32,System.Object,System.Object)">
            <summary>
            Get event to execute based to event ID
            </summary>
            <param name="eventID">Event ID</param>
            <param name="extendEvent1">Extend Event 1</param>
            <param name="extendEvent2">Extend Event 2</param>
            <returns>Event TModule</returns>
        </member>
        <member name="M:T.Kernel.Core.TModule.DoEvents">
            <summary>
            Do processing events
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TModule.ClearEventsToExecute">
            <summary>
            Clear events to execute
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TModule.ClearEventsToExecute(System.Int32,T.Kernel.Core.EventPriority)">
            <summary>
            Clear events to execute
            </summary>
            <param name="eventID">IDs of the events to remove</param>
            <param name="priority">Priority</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.DoEvents(System.Int32)">
            <summary>
            Do processing events
            </summary>
            <param name="time">Maximum time for processing events (in ms)</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.DoEventsAsync(System.Int32)">
            <summary>
            Do processing events
            </summary>
            <param name="time">Maximum time for processing events (in ms)</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.ExecuteThread(System.Object)">
            <summary>
            Execute thread
            </summary>
            <param name="parameters_">Parameters</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.HandlerForIsRunningChanged(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when IsRunning flag was changed.
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.HandlerForIsPausedChanged(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when IsPaused flag was changed.
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Kernel.Core.TModule.HandlerForIsActivatedChanged(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when IsActivated flag was changed.
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="T:T.Kernel.Core.TraceSetup">
            <summary>
            Class to access TraceLog message
            </summary>
        </member>
        <member name="T:T.Kernel.Core.TraceSetup.TraceItemInfo">
            <summary>
            Define a trace item editInfo to diagnostics system
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.TraceItemInfo.IP">
            <summary>
            Get IP
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.TraceItemInfo.ModuleName">
            <summary>
            Get module name
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.TraceItemInfo.TraceType">
            <summary>
            Get trace typeCode
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.TraceItemInfo.Message">
            <summary>
            Get message
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.TraceItemInfo.DateTime">
            <summary>
            Get date time
            </summary>
        </member>
        <member name="T:T.Kernel.Core.TraceSetup.GroupModuleInfo">
            <summary>
            Define a group module editInfo to diagnostics system
            </summary>
        </member>
        <member name="T:T.Kernel.Core.TraceSetup.GroupModuleInfo.ColumnInfo">
            <summary>
            Define column editInfo
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.GroupModuleInfo.ColumnInfo.text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.GroupModuleInfo.ColumnInfo.width">
            <summary>
            Width
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.GroupModuleInfo.ColumnInfo.alignment">
            <summary>
            Aligment
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.GroupModuleInfo.name">
            <summary>
            Group name
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.GroupModuleInfo.cols">
            <summary>
            Array containg editInfo about columns
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.GroupModuleInfo.values">
            <summary>
            Array two dimensional containg objType of each cell
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.GroupModuleInfo.Name">
            <summary>
            Get group name
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.GroupModuleInfo.Cols">
            <summary>
            Get array containg editInfo about the columns
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.GroupModuleInfo.Values">
            <summary>
            Get array two dimensional containg objType of each cell
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.GroupModuleInfo.#ctor">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:T.Kernel.Core.TraceSetup.GroupModuleInfo.#ctor(System.String,T.Kernel.Core.TraceSetup.GroupModuleInfo.ColumnInfo[],System.Object[0:,0:])" -->
        <member name="F:T.Kernel.Core.TraceSetup.objServer">
            <summary>
            Reference to the object objServer
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.enableLog">
            <summary>
            Flag indicating if log is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.enableModuleInformation">
            <summary>
            Flag indicating if module information is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.isAlarmsLogEnabled">
            <summary>
            Flag indicating whether Alarms log is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.isDatasetsLogEnabled">
            <summary>
            Flag indicating whether Datasets log is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.isDevicesLogEnabled">
            <summary>
            Flag indicating whether Devices log is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.isDisplaysLogEnabled">
            <summary>
            Flag indicating whether Displays log is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.isRetentiveLogEnabled">
            <summary>
            Flag indicating whether Retentive log is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.isHistorianLogEnabled">
            <summary>
            Flag indicating whether Historian log is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.isOPCServerLogEnabled">
            <summary>
            Flag indicating whether OPCServer log is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.isReportsLogEnabled">
            <summary>
            Flag indicating whether Reports log is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.isScriptsLogEnabled">
            <summary>
            Flag indicating whether Scripts log is enabled
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.module">
            <summary>
            Reference to TCPServer module
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.miTraceServerInModule">
            <summary>
            Reference to method Trace in module
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.miSetModuleInformationInModule">
            <summary>
            Reference to method SetModuleInformation in module
            </summary>
        </member>
        <member name="F:T.Kernel.Core.TraceSetup.listOfLogObjects">
            <summary>
            List containg objects being logged
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.IsLogEnabled">
            <summary>
            Get flag indicating if log is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.EnableModuleInformation">
            <summary>
            Get flag indicating if module information is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.LogErrorIsEnabled">
            <summary>
            Get flag indicating whether ErrorMessages log is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.LogWarningIsEnabled">
            <summary>
            Get flag indicating whether WarningMessages log is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.LogInfoIsEnabled">
            <summary>
            Get flag indicating whether InfoMessages log is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.LogDebugIsEnabled">
            <summary>
            Get flag indicating whether DebugMessages log is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.IsAlarmsLogEnabled">
            <summary>
            Get flag indicating whether Alarms log is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.IsDatasetsLogEnabled">
            <summary>
            Get flag indicating whether Datasets log is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.IsDevicesLogEnabled">
            <summary>
            Get flag indicating whether Devices log is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.IsDisplaysLogEnabled">
            <summary>
            Get flag indicating whether Displays log is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.IsRetentiveLogEnabled">
            <summary>
            Get flag indicating whether Retentive log is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.IsHistorianLogEnabled">
            <summary>
            Get flag indicating whether Historian log is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.IsOPCServerLogEnabled">
            <summary>
            Get flag indicating whether OPCServer log is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.IsReportsLogEnabled">
            <summary>
            Get flag indicating whether Reports log is enabled
            </summary>
        </member>
        <member name="P:T.Kernel.Core.TraceSetup.IsScriptsLogEnabled">
            <summary>
            Get flag indicating whether Scripts log is enabled
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.#ctor(T.Kernel.Core.ObjectServer)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objServer">Reference to the object objServer</param>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.TraceOutput(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.DateTimeOffset)">
            <summary>
            Trace message to log
            </summary>
            <param name="ip">IP</param>
            <param name="mainModuleName">TModule name</param>
            <param name="originSystem">Flag indicating if message was generated by system (true) or application (false)</param>
            <param name="typeCode">Trace typeCode</param>
            <param name="message">Message</param>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.TraceOutput(System.String,System.String,System.Int32[],System.String[],System.String[],System.String[],System.String[],System.DateTimeOffset[])">
            <summary>
            Trace messages to log
            </summary>
            <param name="ip">IP</param>
            <param name="moduleName">TModule name</param>
            <param name="type">Trace typeCode</param>
            <param name="message">Message</param>
            <param name="timeStamp">Time stamp about message</param>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.EnableLogObjects(System.String[],System.Boolean)">
            <summary>
            Enable or disable log of objects change
            </summary>
            <param name="objs">Array containg object names</param>
            <param name="flag">Flag indicating if the objects should be logged (true) or not (false)</param>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.EnableModulesLog(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enable or disable log of modules
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.EnableTraceTypeLog(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enable or disable trace of types
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.SetModuleInformation(System.String,T.Kernel.Core.TraceSetup.GroupModuleInfo)">
            <summary>
            Set module information to TModule Information control
            </summary>
            <param name="name">Name that Identifies the group</param>
            <param name="editInfo">Reference to a group module editInfo</param>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.RequestTraceMessages">
            <summary>
            Request trace messages
            </summary>
            <returns>List containg trace messages</returns>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.BeginRequestTraceMessages(System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous request trace messages
            </summary>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for this request</param>
            <returns>Identification of request or null if error</returns>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.EndRequestTraceMessages(System.IAsyncResult)">
            <summary>
            End an asynchronous request trace messages
            </summary>
            <param name="ar">Identification of request</param>
            <returns>List containg trace messages</returns>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.RequestModuleInfo(System.String)">
            <summary>
            Request module editInfo
            </summary>
            <param name="name">Group name</param>
            <returns>Reference to module editInfo</returns>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.BeginRequestModuleInfo(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous request module editInfo
            </summary>
            <param name="name">Group name</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for this request</param>
            <returns>Identification of request or null if error</returns>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.EndRequestModuleInfo(System.IAsyncResult)">
            <summary>
            End an asynchronous request module editInfo
            </summary>
            <param name="ar">Identification of request</param>
            <returns>Reference to module editInfo</returns>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.RequestGroupNamesModuleInfo">
            <summary>
            Request group names of module editInfo
            </summary>
            <returns>Reference to list containg names</returns>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.BeginRequestGroupNamesModuleInfo(System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous request group names of module editInfo
            </summary>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for this request</param>
            <returns>Identification of request or null if error</returns>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.EndRequestGroupNamesModuleInfo(System.IAsyncResult)">
            <summary>
            End an asynchronous request group names of module editInfo
            </summary>
            <param name="ar">Identification of request</param>
            <returns>Reference to list containg names</returns>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.InternalEnableLog2(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This method must not be used. It is only called internally.
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.InternalEnableLog(System.Boolean)">
            <summary>
            This method must not be used. It is only called internally.
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.InternalEnableModulesLog(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This method must not be used. It is only called internally.
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.InternalEnableModuleInformation(System.Boolean)">
            <summary>
            This method must not be used. It is only called internally.
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.InternalSetTraceCallback(System.Object,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            This method must not be used. It is only called internally.
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.InternalEnableLogObject(T.Kernel.Core.ObjRef,System.Boolean)">
            <summary>
            This method must not be used. It is only called internally.
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.Generate(System.Boolean)">
            <summary>
            Generate diagnostics of module
            </summary>
        </member>
        <member name="M:T.Kernel.Core.TraceSetup.RunAndSave(System.String,System.Boolean)">
            <summary>
            Generate diagnostics of module
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.ObjRefLink.objValue">
            <summary>
            Reference to object in objects database
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.ObjRefLink.indexOfObject">
            <summary>
            Index of the object
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.ObjRefLink.CountBlockedToUpdate">
            <summary>
            Counter indicating if ObjectValue is blocked (> 0) to update your value
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.ObjRefLink.pendingWriting">
            <summary>
            Pending writing objects to update in client
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.ObjRefLink.token">
            <summary>
            Token
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.ObjRefLink.SyncObjectModule">
            <summary>
            Parent
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.ObjRefLink.ObjValue">
            <summary>
            Get reference to ObjectValue object in objects database;
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.ObjRefLink.Token">
            <summary>
            Gets Object token
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.ObjRefLink.IndexOfObject">
            <summary>
            Get index of the object
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.ObjRefLink.IsReferencigToValueMember">
            <summary>
            Get flag indicating if ObjectValue is referencing to Value member
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:T.Kernel.RemoteClient.ObjRefLink.IsDebugged" -->
        <!-- Badly formed XML comment ignored for member "P:T.Kernel.RemoteClient.ObjRefLink.IsInfoSyncMarker" -->
        <member name="M:T.Kernel.RemoteClient.ObjRefLink.#ctor(T.Kernel.Core.ObjRef,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="objRef">Reference to ObjRef object in objects database</param>
        </member>
        <member name="F:T.Kernel.RemoteClient.ObjToUpdate.indexOfObject">
            <summary>
            Index of the object
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.ObjToUpdate.value">
            <summary>
            Reference to object objType
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.ObjToUpdate.quality">
            <summary>
            Object quality
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.ObjToUpdate.timeStamp">
            <summary>
            Object time stamp
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.ObjToUpdate.id">
            <summary>
            TModule ID
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.ObjToUpdate.isValueForced">
            <summary>
            Flag indicating whether objType was forced
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.ObjToUpdate.isDespise">
            <summary>
            Flag indicating if this instance should be despised;
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.ObjToUpdate.IndexOfObject">
            <summary>
            Get index of the object
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.ObjToUpdate.Value">
            <summary>
            Get reference to object objType
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.ObjToUpdate.Quality">
            <summary>
            Get object quality
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.ObjToUpdate.TimeStamp">
            <summary>
            Get object time stamp
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.ObjToUpdate.ID">
            <summary>
            Get module ID
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.ObjToUpdate.IsValueForced">
            <summary>
            Get flag indicating whether objType was forced
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.ObjToUpdate.IsDespise">
            <summary>
            Get flag indicating if this instance should be despised;
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.ObjToUpdate.#ctor(System.Int32,System.Object,System.Int32,System.DateTimeOffset,System.Int32,System.Boolean)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="indexOfObject">Index of the object</param>
            <param name="value">Value</param>
            <param name="quality">Object quality</param>
            <param name="timeStamp">Object time stamp</param>
            <param name="id">TModule ID</param>
            <param name="isValueForced">Flag indicating whether objType was forced</param>
        </member>
        <member name="T:T.Kernel.RemoteClient.SyncObjectModule">
            <summary>
            This class is the module to syncronize objects between a client and remote server
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.module">
            <summary>
            Reference to the module object
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.parentGuid">
            <summary>
            Identify parent client connection
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.lastAttemptConnectionIP">
            <summary>
            Last attempt connection IP
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.currentIP">
            <summary>
            Current connected IP
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.currentPort">
            <summary>
            Current connected port number
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.serverVersion">
            <summary>
            Version of server
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.serverDBVersion">
            <summary>
            Database version of server
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.connectionError">
            <summary>
            Connection error
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.syncRoot">
            <summary>
            Object used to synchronize access
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.mainThread">
            <summary>
            Reference to the main thread
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.remoteClient">
            <summary>
            Reference to remote client object
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.connectionHandle">
            <summary>
            Reference to connection handle
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.isClientPriority">
            <summary>
            Flag indicating if connected client has priority over server
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.listOfObjectsToBind">
            <summary>
            List of objects to be binded
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.listOfBindedObjects">
            <summary>
            List of objects already binded
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.listOfObjToUpdate">
            <summary>
            List of objects to send to remote server
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.listOfReceives">
            <summary>
            Contain list of arrived data
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.listOfResponses">
            <summary>
            Contain list of responses
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.isClosed">
            <summary>
            Flag indicating if connection is closed
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.nextFrameNumber">
            <summary>
            Next free frame number
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.dicOfFrameByList">
            <summary>
            Dictionary containing list of references to ObjRefLink object organized by frame number
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.dicOfFrameByDateTime">
            <summary>
            Dictionary containing DateTime / fame number
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.nextFrameNumberOfBindings">
            <summary>
            Next free frame number of bindings
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.dicOfFrameByBindings">
            <summary>
            Dictionary containing list of frames invoking bindings
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.waitingAnswerForRequestDisconnection">
            <summary>
            Flag indicating if waiting answer for request disconnection
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.isRunning">
            <summary>
            Flag indicating whether module is running
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.lastSendTickCount">
            <summary>
            Last send tick count
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.fileNameRemoteClientWCF">
            <summary>
            File name of the assembly of remote client WCF/WA
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.fileNameRemoteClient_tRPC">
            <summary>
            File name of the assembly of remote client when using tRPC
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.maxObjectsToSendAndBind">
            <summary>
            Max number of objects to send and bind to server
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.timeForBindUpdateReceives">
            <summary>
            Time for binding and updating objects to local server
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.timeForConnectionCheck">
            <summary>
            Time for checking connection
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.shouldUseTimeForConnectionCheck">
            <summary>
            Time for checking connection
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.lastReceiveUpdateObjects">
            <summary>
            Last date/time of receive update objects
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.SyncRootLastReceiveUpdateObjects">
            <summary>
            Reference to object used when accessing 'lastReceiveUpdateObjects' field
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.SyncObjectModule.serverCloseConnection">
            <summary>
            Flag indicating whether server closed connection
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.SyncObjectModule.ParentGuid">
            <summary>
            Get and set identification of parent client connection
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.SyncObjectModule.InternalGuid">
            <summary>
            Get identification of internal client connection
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.SyncObjectModule.CurrentIP">
            <summary>
            Get and set current connected IP
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.SyncObjectModule.CurrentPort">
            <summary>
            Get current connected port number
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.SyncObjectModule.IsConnected">
            <summary>
            Get flag indicating if SyncObj module is connected to remote server
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.SyncObjectModule.ServerVersion">
            <summary>
            Get version of server
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.SyncObjectModule.ServerDBVersion">
            <summary>
            Get database version of server
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.SyncObjectModule.ConnectionError">
            <summary>
            Get and set connection error
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.SyncObjectModule.LastAttemptConnectionIP">
            <summary>
            Get and set last attempt connection IP
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.SyncObjectModule.IsClientPriority">
            <summary>
            Get flag indicating if connected client has priority over server
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.SyncObjectModule.IsClosed">
            <summary>
            Get flag indicating is client is closed
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.SyncObjectModule.NextFrameNumber">
            <summary>
            Get next free frame number
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.#ctor(T.Kernel.Core.TModule)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="module">Reference to the module</param>
        </member>
        <member name="P:T.Kernel.RemoteClient.SyncObjectModule.CanPauseAndContinue">
            <summary>
            Get a objType indicating whether the module can be paused and resumed.
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.SyncObjectModule.CanStop">
            <summary>
            Get a objType indicating whether the module can be stopped once it has started.
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.OnStartAsync(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.OnAfterStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module after starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.OnInitialWaitingValueFromServer(System.Int32)">
            <summary>
            Specifies actions to take when the module waiting initial value from server.
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.OnPause">
            <summary>
            Specifies actions to take when a module pauses.
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.OnContinue">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being paused.
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.OnDeactivate">
            <summary>
            Specifies actions to take when a module is deactivated.
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.OnActivate">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being deactivated.
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.OnStopAsync(System.Boolean)">
            <summary>
            Stop SyncObjectModule module
            </summary>
            <param name="isHotStarting">Flag indicating whether module should shutdown prepared to after hot starting</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.StartConnection(System.Boolean)">
            <summary>
            Start connection
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.ConnectionThread(System.Object)">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.DeserializeOutputData(System.Byte[],System.Nullable{System.Boolean}@)">
            <summary>
            Deserialize data arrived from objServer
            </summary>
            <param name="outputData">Data to deserialize</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.AddCheckUsedObject(System.String,System.Object)">
            <summary>
            Add check used object to SyncObj module
            </summary>
            <param name="objRef">Reference to object in database</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.AddObject(T.Kernel.Core.ObjRef)">
            <summary>
            Add object to SyncObj module
            </summary>
            <param name="objRef">Reference to object in database</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.StartBindings">
            <summary>
            Called by Core after starting DB object
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.Response(System.String,System.Int32,System.Int32,System.Object,System.Object)">
            <summary>
            Process response
            </summary>
            <param name="methodName">Method name</param>
            <param name="frameNumber">Frame number</param>
            <param name="error">Error code</param>
            <param name="errorExt1">Extended error code 1</param>
            <param name="errorExt2">Extended error code 2</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.Responses(System.Object[])">
            <summary>
            Process many responses at the same time
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.UpdateObjects(System.Int32,System.Int32[],System.String[],System.Object[],System.Int32[],System.Int64[],System.Int32[],System.Boolean[],System.Boolean[])">
            <summary>
            Update objects arrived from objServer
            </summary>
            <param name="frameNumber">Frame number</param>
            <param name="objIndexes">Indexes of objects</param>
            <param name="newValues">New values</param>
            <param name="qualities">Qualities</param>
            <param name="timeStamps">Timestamps</param>
            <param name="ids">TModule IDs</param>
            <param name="isValueForceds">Flags indicating whether values were forced</param>
            <param name="isResponseFromBinding">Flags indicating whether value are from binding</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.DiagnosticsStatus(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Update diagnostics status (enable / disable)
            </summary>
            <param name="enableLog">Flag indicating if log is enabled</param>
            <param name="enableModuleInformation">Flag indicating if module information is enabled</param>
            <param name="warningMessagesLog">Flag indicating whether WarningMessages log is enabled</param>
            <param name="errorMessagesLog">Flag indicating whether ErrorMessages log is enabled</param>
            <param name="infoMessagesLog">Flag indicating whether InfoMessages log is enabled</param>
            <param name="debugMessagesLog ">Flag indicating whether DebugMessages log is enabled</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.ClientMessagingSendTo(System.String,System.String,System.Int64)">
            <summary>
            Client messaging SendTo
            </summary>
            <param name="source">Source IP</param>
            <param name="message">Message</param>
            <param name="utcTimestamp">UTC Timestamp</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.SetNewUser(System.String,System.String)">
            <summary>
            Set new user
            </summary>
            <param name="userName">New user name</param>
            <param name="password">User password</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.AddTokensOnDeviceModule(System.String[])">
            <summary>
            Add tokens used on device module
            </summary>
            <param name="tokens">Array containg token names</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.RemoveTokensOnDeviceModule(System.String[])">
            <summary>
            Remove tokens used on device module
            </summary>
            <param name="tokens">Array containg token names</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.ReconnectToServer">
            <summary>
            This method is called to force reconnection to server.
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.GetObjectValue(System.Int32)">
            <summary>
            Return reference to ObjectValue object
            </summary>
            <param name="indexOfObject">Index of object to exchange data</param>
            <returns>Reference to ObjectValue object</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.GetObjRefLink(System.Int32)">
            <summary>
            Get reference to ObjRefLink object based to index
            </summary>
            <param name="indexOfObject">Index of object to exchange data</param>
            <returns>Reference to ObjRefLink object</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.AddObjToUpdate(T.Kernel.RemoteClient.ObjRefLink,System.Object,System.Int32,System.DateTimeOffset,System.Int32,System.Boolean)">
            <summary>
            Add to list of object to update in client
            </summary>
            <param name="link">Index of the object</param>
            <param name="value">Reference to object objType</param>
            <param name="quality">Object quality</param>
            <param name="timeStamp">Object time stamp</param>
            <param name="id">TModule ID</param>
            <param name="isValueForced">Flag indicating whether objType was forced</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.Close">
            <summary>
            Close client
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.ProcessObjToUpdateList">
            <summary>
            Process list of object to update in client
            </summary>
            <returns>Flag success (true) or error (false)</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.ProcessReceiveList">
            <summary>
            Process list of receives
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.ProcessResponses">
            <summary>
            Process list of responses
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.ProcessFrame(System.Int32)">
            <summary>
            Process list of tag to update in client
            </summary>
            <param name="frameNumber">Frame number</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.CheckProcessResponses">
            <summary>
            Check whether any process response inside time
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.RequestDisconnection">
            <summary>
            Request disconnection
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.HandlerForConnectionCheck(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called to check connection.
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.HandlerForServerShutdownCheck(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called to check whether Server.Shutdown was called
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.HandlerForClosed(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when Closed method was previouslycalled.
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.HandlerForCheckProcessResponses(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when data to objServer should be send.
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.HandlerForInfoLogObjectStatus(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called to log objects status.
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.HandlerForInfoTagPropertyCreated(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called to log objects status.
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.ReceiveData(System.IO.MemoryStream)">
            <summary>
            This method will be called when client receives data from remote objServer
            </summary>
            <param name="data">Arrived data</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule.Closed(System.Object)">
            <summary>
            This method will be called when connection is closed
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.SyncObjectModule._CheckIfShouldDebug(System.Object)">
            <summary>
            This method is called after changing objType
            </summary>
            <param name="evObj">Reference to EventBase object</param>
            <param name="objRef">Reference to ObjRef object</param>
            <param name="objType">New objType</param>
            <param name="sourceModuleID">Source module ID</param>
            <param name="extendSourceModuleID">Extended source module ID</param>
            <param name="uniqueEventNumber">Unique event number</param>
        </member>
        <member name="T:T.Kernel.RemoteClient.Connection">
            <summary>
            This calss contains editInfo about the connection
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection.remoteClient">
            <summary>
            Reference to remote client object
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection.fileNameRemoteClientWCF">
            <summary>
            File name of the assembly of remote client WCF/WA
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection.fileNameRemoteClient_tRPC">
            <summary>
            File name of the assembly of remote client when using tRPC
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection.parentGuid">
            <summary>
            Identify parent client connection
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection.remoteIP">
            <summary>
            Remote IP
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection.remotePort">
            <summary>
            Remote port
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection.connectTimeout">
            <summary>
            Connect timeout
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection.userName">
            <summary>
            User name
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection.userPassword">
            <summary>
            User password
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection.isOpen">
            <summary>
            Flag indicating if connecting is opened
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection.connectionHandle">
            <summary>
            Connect handle
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection.serverVersion">
            <summary>
            ObjServer version
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection.serverDBVersion">
            <summary>
            Server database version
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection.lastResponseEx">
            <summary>
            Reference to last response exception
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection.lastUsedTime">
            <summary>
            Last used time
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.Connection._redundantPair">
            <summary>
            Redundant pair connection
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.Connection.RemoteIP">
            <summary>
            Get remote IP
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.Connection.ParentGuid">
            <summary>
            Get identification of parent client connection
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.Connection.IsOpen">
            <summary>
            Get flag indicating if connecting is opened
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.Connection.ServerVersion">
            <summary>
            Get objServer version
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.Connection.ServerDBVersion">
            <summary>
            Get objServer database version
            </summary>
        </member>
        <member name="P:T.Kernel.RemoteClient.Connection.LastUsedTime">
            <summary>
            Get and set last used time
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.Connection.#ctor(System.Guid,System.String,System.Int32,System.TimeSpan,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="parentGuid">Identify parent client connection</param>
            <param name="remoteIP">Remote IP</param>
            <param name="remotePort">Remote port</param>
            <param name="timeout">Connection timeout</param>
            <param name="userName">User name</param>
            <param name="userPassword">User password</param>
            <param name="assemblyPath">Assembly path</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.Connection.GetLastResponseEx(System.Boolean)">
            <summary>
            Get reference to last response exception
            </summary>
            <param name="reset">Flag indicating whether should reset data member</param>
            <returns></returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.Connection.Open(System.String,System.String@)">
            <summary>
            Open connection
            </summary>
            <param name="callName">calling source</param>
            <param name="error">Output string error</param>
            <returns>Flag indicating success (true) or error (false)</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.Connection.OpenAsync(System.String,T.Library.TRef{System.String})">
            <summary>
            Open connection async
            </summary>
            <param name="error">Output string error</param>
            <returns>Flag indicating success (true) or error (false)</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.Connection.Close(System.Boolean)">
            <summary>
            Close connection
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.Connection.SendData(System.Int32,System.Byte[],System.String@)">
            <summary>
            Send data to service
            </summary>
            <param name="serviceID">Service id</param>
            <param name="data">Data to send</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.Connection.SendDataAsync(System.Int32,System.Byte[],T.Library.TRef{System.String})">
            <summary>
            Send data to service async
            </summary>
            <param name="serviceID">Service</param>
            <param name="data">Data to send</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.Connection.ReceiveData(System.Byte[]@)">
            <summary>
            Method that is called for receiving data
            </summary>
            <param name="data">Arrived data</param>
            <returns>Error code</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.Connection.ReceiveData(T.Library.TRef{System.Byte[]})">
            <summary>
            Method that is called for receiving data async
            </summary>
            <param name="data">Arrived data</param>
            <returns>Error code</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.Connection.Closed(System.Object)">
            <summary>
            This method will be called when connection is closed
            </summary>
        </member>
        <member name="T:T.Kernel.RemoteClient.TServiceClientModel.AsyncMethodCaller">
            <summary>
            Async delegate invoke remote method 
            </summary>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="isInvokeCalled">Return whether Invoke was called</param>
            <param name="parameters">Array of parameters</param>
            <param name="noWaitResponse">Flag indicating whether should wait response</param>
            <param name="retry">Number of retries. Used by async communications</param>
            <returns>Return objType</returns>
        </member>
        <member name="F:T.Kernel.RemoteClient.TServiceClientModel.parentGuid">
            <summary>
            Guid of parent
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.TServiceClientModel.ip">
            <summary>
            Remote IP address
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.TServiceClientModel.portNumber">
            <summary>
            Remote port number
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.TServiceClientModel.connectTimeout">
            <summary>
            Connect timeout
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.TServiceClientModel.userName">
            <summary>
            User name
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.TServiceClientModel.userPassword">
            <summary>
            User password
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.TServiceClientModel.assemblyPath">
            <summary>
            Assembly path
            </summary>
        </member>
        <member name="F:T.Kernel.RemoteClient.TServiceClientModel.listOfFreeConnections">
            <summary>
            List of free connections
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel.#ctor(System.Guid,System.String,System.Int32,System.TimeSpan,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="parentGuid">Guid of parent</param>
            <param name="ip">Remote IP address</param>
            <param name="portNumber">Remote port number</param>
            <param name="timeout">Connection timeout</param>
            <param name="userName">User name</param>
            <param name="userPassword">User password</param>
            <param name="assemblyPath">Assembly path</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel.Initialize(System.Guid,System.String,System.Int32,System.TimeSpan,System.String,System.String,System.String)">
            <summary>
            Initialize connection parameters
            </summary>
            <param name="parentGuid">Guid of parent</param>
            <param name="ip">Remote IP address</param>
            <param name="portNumber">Remote port number</param>
            <param name="timeout">Connection timeout</param>
            <param name="userName">User name</param>
            <param name="userPassword">User password</param>
            <param name="assemblyPath">Assembly path</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel.InvokeService(T.Kernel.Core.eService,System.String,System.Boolean@,System.Object[])">
            <summary>
            Invoke remote method
            </summary>
            <param name="service">Service name enum</param>
            <param name="methodName">Method name</param>
            <param name="isInvokeCalled">Return whether Invoke was called</param>
            <param name="parameters">Array of parameters</param>
            <returns>Return objType</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel.Invoke(System.Int32,System.String,System.Boolean@,System.Object[])">
            <summary>
            Invoke remote method
            </summary>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="isInvokeCalled">Return whether Invoke was called</param>
            <param name="parameters">Array of parameters</param>
            <returns>Return objType</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel.InvokeAsync(System.Int32,System.String,T.Library.TRef{System.Boolean},System.Object[])">
            <summary>
            Invoke remote method async
            </summary>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="isInvokeCalled">Return whether Invoke was called</param>
            <param name="parameters">Array of parameters</param>
            <returns>Return objType</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel.InvokeTimeout(System.Int32,System.String,System.TimeSpan,System.Object[])">
            <summary>
            Invoke remote method
            </summary>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="timeout">A TimeSpan that represents the number of milliseconds to wait</param>
            <param name="parameters">Array of parameters</param>
            <returns>Return result</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel.BeginInvoke(System.AsyncCallback,System.Object,System.Int32,System.String,System.Object[])">
            <summary>
            Begin an asynchronous invoke remote method
            </summary>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for this request</param>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="parameters">Array of parameters</param>
            <returns>Identification of the asynchronous invoke or null if error</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel.EndInvoke(System.IAsyncResult,System.Object[])">
            <summary>
            End an asynchronous invoke remote method
            </summary>
            <param name="ar">Identification of the asynchronous invoke</param>
            <param name="parameters">Array of parameters</param>
            <returns>Return objType</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel.InvokeNoResponse(System.Int32,System.String,System.Boolean@,System.Object[])">
            <summary>
            Invoke remote method and no wait response
            </summary>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="isInvokeCalled">Return whether Invoke was called</param>
            <param name="parameters">Array of parameters</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel.InvokeNoResponseAsync(System.Int32,System.String,T.Library.TRef{System.Boolean},System.Object[])">
            <summary>
            Invoke remote method and no wait response
            </summary>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="isInvokeCalled">Return whether Invoke was called</param>
            <param name="parameters">Array of parameters</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel.BeginInvokeNoResponse(System.AsyncCallback,System.Object,System.Int32,System.String,System.Object[])">
            <summary>
            Begin an asynchronous invoke remote method and no wait response
            </summary>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object that contains state information for this request</param>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="parameters">Array of parameters</param>
            <returns>Identification of the asynchronous invoke or null if error</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel.EndInvokeNoResponse(System.IAsyncResult,System.Object[])">
            <summary>
            End an asynchronous invoke remote method
            </summary>
            <param name="ar">Identification of the asynchronous invoke</param>
            <param name="parameters">Array of parameters</param>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel._Invoke(System.Int32,System.String,T.Library.TRef{System.Boolean},System.Object[],System.Boolean,System.Int32)">
            <summary>
            Invoke remote method
            </summary>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="isInvokeCalled">Return whether Invoke was called</param>
            <param name="parameters">Array of parameters</param>
            <param name="noResponse">Flag indicating whether should wait response</param>
            <param name="retry">Number of retries. Used by async communications</param>
            <returns>Return objType</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel._InvokeAsync(System.Int32,System.String,T.Library.TRef{System.Boolean},System.Object[],System.Boolean,System.Int32)">
            <summary>
            Invoke remote method
            </summary>
            <param name="serviceID">Service id</param>
            <param name="methodName">Method name</param>
            <param name="isInvokeCalled">Return whether Invoke was called</param>
            <param name="parameters">Array of parameters</param>
            <param name="noResponse">Flag indicating whether should wait response</param>
            <param name="retry">Number of retries. Used by async communications</param>
            <returns>Return objType</returns>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel.Dispose">
            <summary>
            Dispose access
            </summary>
        </member>
        <member name="M:T.Kernel.RemoteClient.TServiceClientModel.ClearConnections">
            <summary>
            Clear all connections
            </summary>
        </member>
        <member name="T:T.Kernel.Resource1">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.and">
            <summary>
              Looks up a localized string similar to and.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.CannotCreateModule">
            <summary>
              Looks up a localized string similar to Could not create module.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.CannotCreateSyncTagTask">
            <summary>
              Looks up a localized string similar to Could not create SyncObject module.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.CannotDecryptFile">
            <summary>
              Looks up a localized string similar to Could not decrypt file .
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.CannotEncryptFile">
            <summary>
              Looks up a localized string similar to Could not encrypt file .
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.CannotInstanceType">
            <summary>
              Looks up a localized string similar to Could not instance type.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.CannotStartModule">
            <summary>
              Looks up a localized string similar to Could not start module.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.CannotStartModule1">
            <summary>
              Looks up a localized string similar to does not have permission to start module.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.ClientIPNotAllowed">
            <summary>
              Looks up a localized string similar to Client IP not allowed.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.CryptoError">
            <summary>
              Looks up a localized string similar to Failed to cryptography.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.DidNotArriveFromServer">
            <summary>
              Looks up a localized string similar to  did not arrive from server.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.error">
            <summary>
              Looks up a localized string similar to error.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.ExceptionError">
            <summary>
              Looks up a localized string similar to Exception error: .
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.expected">
            <summary>
              Looks up a localized string similar to expected.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.FailIdentSoftkey">
            <summary>
              Looks up a localized string similar to Failed to identify softkey.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.GeneralError">
            <summary>
              Looks up a localized string similar to General error.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.hardkey">
            <summary>
              Looks up a localized string similar to hardkey.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.Invalid">
            <summary>
              Looks up a localized string similar to Invalid.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidC500">
            <summary>
              Looks up a localized string similar to Invalid hardkey assembly.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidClientVersion">
            <summary>
              Looks up a localized string similar to Invalid client version. Server has a version higher than client..
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidData">
            <summary>
              Looks up a localized string similar to Invalid data format.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidFamily">
            <summary>
              Looks up a localized string similar to Invalid family.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidHK">
            <summary>
              Looks up a localized string similar to Hardkey not saved yet.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidKeyType">
            <summary>
              Looks up a localized string similar to Invalid type.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidLicense">
            <summary>
              Looks up a localized string similar to Invalid license.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidLicenseKey">
            <summary>
              Looks up a localized string similar to Invalid License Key.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidMode">
            <summary>
              Looks up a localized string similar to Invalid mode.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidModel">
            <summary>
              Looks up a localized string similar to Invalid model.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidName">
            <summary>
              Looks up a localized string similar to Invalid Name.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidNumberOfDimensionsOfTheArray">
            <summary>
              Looks up a localized string similar to Invalid number of dimensions of the array.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidNumOfCommunicationPoints">
            <summary>
              Looks up a localized string similar to The max number of communication points was exceeded.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidNumOfElements">
            <summary>
              Looks up a localized string similar to Invalid number of tags.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidNumOfRuntimes">
            <summary>
              Looks up a localized string similar to The max number of allowed runtimes was exceeded.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidOem">
            <summary>
              Looks up a localized string similar to Invalid OEM.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidProduct">
            <summary>
              Looks up a localized string similar to Invalid product.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidRegistryAccess">
            <summary>
              Looks up a localized string similar to Invalid registry access.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidRemoteClient">
            <summary>
              Looks up a localized string similar to Invalid Remote Client.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidSiteCode">
            <summary>
              Looks up a localized string similar to Invalid site code.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidType">
            <summary>
              Looks up a localized string similar to Invalid type of object.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidUid">
            <summary>
              Looks up a localized string similar to Failed to identify hardkey.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidUserOrPassword">
            <summary>
              Looks up a localized string similar to Invalid user name or password.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.InvalidVersion">
            <summary>
              Looks up a localized string similar to Invalid version.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.KeyExpired">
            <summary>
              Looks up a localized string similar to Expired.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.MaxConnectionsSameClient">
            <summary>
              Looks up a localized string similar to Max number of connections from a client exceeded.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.MaxNumberOfClientsExceed">
            <summary>
              Looks up a localized string similar to Max number of clients were exceeded.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.ModuleNotAllowed">
            <summary>
              Looks up a localized string similar to Module is not allowed to execute..
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.NameCannotBeFound">
            <summary>
              Looks up a localized string similar to Name cannot be found.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.NameCannotBeNullOrEmptyString">
            <summary>
              Looks up a localized string similar to Name cannot be null or empty string.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.NotFound">
            <summary>
              Looks up a localized string similar to Not found.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.NotInitialized">
            <summary>
              Looks up a localized string similar to Not initialized.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.or">
            <summary>
              Looks up a localized string similar to or.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.PasswordExpired">
            <summary>
              Looks up a localized string similar to Password is expired.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.ServerIsInactive">
            <summary>
              Looks up a localized string similar to Server is inactive.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.ServerIsNotRunning">
            <summary>
              Looks up a localized string similar to Server is not running.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.softkey">
            <summary>
              Looks up a localized string similar to softkey.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.SyntaxErrorArraIndexExpected">
            <summary>
              Looks up a localized string similar to Syntax error, array index expected.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.SyntaxErrorArrayIndexesExpected">
            <summary>
              Looks up a localized string similar to Syntax error, array indexes expected.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.SyntaxErrorIntegerNumberExpected">
            <summary>
              Looks up a localized string similar to Syntax error, integer number expected.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.SyntaxErrorNameExpected">
            <summary>
              Looks up a localized string similar to Syntax error, name expected.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.SyntaxErrorOtherArrayIndexOr">
            <summary>
              Looks up a localized string similar to Syntax error, other array index or .
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.TagChanged">
            <summary>
              Looks up a localized string similar to Tag changed.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.UnexpectedLicenseKey">
            <summary>
              Looks up a localized string similar to Unexpected License Key.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.UnexpectedSiteCode">
            <summary>
              Looks up a localized string similar to Unexpected site code.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.Unknown">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.UserAlreadyLoggedIn">
            <summary>
              Looks up a localized string similar to User already logged in.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.UserBlocked">
            <summary>
              Looks up a localized string similar to is blocked.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.UserDeleted">
            <summary>
              Looks up a localized string similar to is deleted.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.UserLogged">
            <summary>
              Looks up a localized string similar to User logged.
            </summary>
        </member>
        <member name="P:T.Kernel.Resource1.ValueFromTag">
            <summary>
              Looks up a localized string similar to Value from tag .
            </summary>
        </member>
        <member name="T:T.Kernel.Tags.AnalogInt">
            <summary>
            Define Analog[Int32] parentType
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.AnalogInt.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.AnalogInt.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="T:T.Kernel.Tags.AnalogLong">
            <summary>
            Define Analog[Int64] parentType
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit32">
            <summary>
            Gets or sets the bit 32 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit33">
            <summary>
            Gets or sets the bit 33 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit34">
            <summary>
            Gets or sets the bit 34 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit35">
            <summary>
            Gets or sets the bit 35 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit36">
            <summary>
            Gets or sets the bit 36 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit37">
            <summary>
            Gets or sets the bit 37 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit38">
            <summary>
            Gets or sets the bit 38 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit39">
            <summary>
            Gets or sets the bit 39 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit40">
            <summary>
            Gets or sets the bit 40 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit41">
            <summary>
            Gets or sets the bit 41 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit42">
            <summary>
            Gets or sets the bit 42 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit43">
            <summary>
            Gets or sets the bit 43 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit44">
            <summary>
            Gets or sets the bit 44 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit45">
            <summary>
            Gets or sets the bit 45 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit46">
            <summary>
            Gets or sets the bit 46 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit47">
            <summary>
            Gets or sets the bit 47 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit48">
            <summary>
            Gets or sets the bit 48 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit49">
            <summary>
            Gets or sets the bit 49 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit50">
            <summary>
            Gets or sets the bit 50 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit51">
            <summary>
            Gets or sets the bit 51 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit52">
            <summary>
            Gets or sets the bit 52 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit53">
            <summary>
            Gets or sets the bit 53 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit54">
            <summary>
            Gets or sets the bit 54 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit55">
            <summary>
            Gets or sets the bit 55 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit56">
            <summary>
            Gets or sets the bit 56 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit57">
            <summary>
            Gets or sets the bit 57 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit58">
            <summary>
            Gets or sets the bit 58 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit59">
            <summary>
            Gets or sets the bit 59 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit60">
            <summary>
            Gets or sets the bit 60 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit61">
            <summary>
            Gets or sets the bit 61 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit62">
            <summary>
            Gets or sets the bit 62 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.AnalogLong.Bit63">
            <summary>
            Gets or sets the bit 63 of the Tag's value.
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.AnalogLong.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.AnalogLong.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="T:T.Kernel.Tags.AnalogDouble">
            <summary>
            Define Analog[Double] parentType
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.AnalogDouble.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.AnalogDouble.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="T:T.Kernel.Tags.AnalogDecimal">
            <summary>
            Define Analog[Decimal] parentType
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.AnalogDecimal.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.AnalogDecimal.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="T:T.Kernel.Tags.Analog`1">
            <summary>
            Define Analog[T] parentType
            </summary>
        </member>
        <member name="F:T.Kernel.Tags.Analog`1.stateInUse">
            <summary>
            Flag indicating whether State property is in use
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.DisplayValue">
            <summary>
            DisplayValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.DisplayUnits">
            <summary>
            Gets the Tag's DisplayUnits property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.DisplayUnitsDiv">
            <summary>
            Gets the Tag's DisplayUnitsDiv property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.DisplayUnitsAdd">
            <summary>
            Gets the Tag's DisplayUnitsAdd property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.DisplayMin">
            <summary>
            Gets or sets the Tag's DisplayMin property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.DisplayMax">
            <summary>
            Gets or sets the Tag's DisplayMax property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.EstimatedValue">
            <summary>
            EstimatedValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.HistorianValue">
            <summary>
            HistorianValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.StartValue">
            <summary>
            StartValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.LockValue">
            <summary>
            LockValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.PreviousValue">
            <summary>
            Previous Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.Min">
            <summary>
            Min
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.Max">
            <summary>
            Max
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.ScaleMin">
            <summary>
            Scale Min
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.ScaleMax">
            <summary>
            Scale Max
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.Deadband">
            <summary>
            Deadband
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.State">
            <summary>
            State
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog`1.CommandValue">
            <summary>
            CommandValue
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Analog`1.#ctor(T.Kernel.Core.RunObj,T.TSystem.eObjType,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="objType">Object parentType</param>
            <param name="ID">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.Analog`1.#ctor(T.Kernel.Core.RunObj,T.TSystem.eObjType,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="objType">Object parentType</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Tags.Analog`1.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.Analog`1.BeforeSetValue(System.Object@,System.Boolean)">
            <summary>
            Method called before setting value
            </summary>
            <param name="value">Value</param>
            <returns>Flag indicating whether value can be set</returns>
        </member>
        <member name="M:T.Kernel.Tags.Analog`1.AfterSetValue(System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Boolean)">
            <summary>
            Method called after setting objType
            </summary>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="valueChanged">Flag indicating whether value was changed</param>
        </member>
        <member name="M:T.Kernel.Tags.Analog`1.VerifyMinMax(System.Object)">
            <summary>
            Verify min and max values
            </summary>
            <param name="objType"></param>
            <returns>Flag indicating if objValue is between min and max values</returns>
        </member>
        <member name="M:T.Kernel.Tags.Analog`1.SetMinMax(System.Object,System.Boolean@)">
            <summary>
            Return min, max or objValue 
            </summary>
            <param name="value">ObjValue to compare with min and max values</param>
            <param name="hi">Return true when objValue is greater then max value</param>
            <returns></returns>
        </member>
        <member name="M:T.Kernel.Tags.Analog`1.GetMinValue">
            <summary>
            Return min value
            </summary>
            <returns>Min Value</returns>
        </member>
        <member name="M:T.Kernel.Tags.Analog`1.GetNormalizedValue(System.Object)">
            <summary>
            Get normalized value
            </summary>
            <param name="value">Value to normalize</param>
            <returns>Return min, max or objValue</returns>
        </member>
        <member name="M:T.Kernel.Tags.Analog`1.VerifyDeadband(System.Object)">
            <summary>
            Verify Dead Band values
            </summary>
            <param name="objType">Value to verify</param>
            <returns>Flag indicating if objType is between min and max values</returns>
        </member>
        <member name="T:T.Kernel.Tags.Analog">
            <summary>
            Define Analog[T] parentType
            </summary>
        </member>
        <member name="F:T.Kernel.Tags.Analog._bit">
            <summary>
            Array containg property bits
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit0">
            <summary>
            Gets or sets the bit 0 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit1">
            <summary>
            Gets or sets the bit 1 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit2">
            <summary>
            Gets or sets the bit 2 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit3">
            <summary>
            Gets or sets the bit 3 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit4">
            <summary>
            Gets or sets the bit 4 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit5">
            <summary>
            Gets or sets the bit 5 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit6">
            <summary>
            Gets or sets the bit 6 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit7">
            <summary>
            Gets or sets the bit 7 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit8">
            <summary>
            Gets or sets the bit 8 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit9">
            <summary>
            Gets or sets the bit 9 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit10">
            <summary>
            Gets or sets the bit 10 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit11">
            <summary>
            Gets or sets the bit 11 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit12">
            <summary>
            Gets or sets the bit 12 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit13">
            <summary>
            Gets or sets the bit 13 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit14">
            <summary>
            Gets or sets the bit 14 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit15">
            <summary>
            Gets or sets the bit 15 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit16">
            <summary>
            Gets or sets the bit 16 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit17">
            <summary>
            Gets or sets the bit 17 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit18">
            <summary>
            Gets or sets the bit 18 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit19">
            <summary>
            Gets or sets the bit 19 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit20">
            <summary>
            Gets or sets the bit 20 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit21">
            <summary>
            Gets or sets the bit 21 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit22">
            <summary>
            Gets or sets the bit 22 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit23">
            <summary>
            Gets or sets the bit 23 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit24">
            <summary>
            Gets or sets the bit 24 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit25">
            <summary>
            Gets or sets the bit 25 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit26">
            <summary>
            Gets or sets the bit 26 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit27">
            <summary>
            Gets or sets the bit 27 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit28">
            <summary>
            Gets or sets the bit 28 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit29">
            <summary>
            Gets or sets the bit 29 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit30">
            <summary>
            Gets or sets the bit 30 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Bit31">
            <summary>
            Gets or sets the bit 31 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Hi">
            <summary>
            Hi AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.HiHi">
            <summary>
            HiHi AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.Lo">
            <summary>
            Lo AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.LoLo">
            <summary>
            LoLo AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.DeviationMinor">
            <summary>
            DeviationMinor AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.DeviationMajor">
            <summary>
            DeviationMajor AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Analog.RateOfChange">
            <summary>
            RateOfChange AlarmItem object
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Analog.#ctor(T.Kernel.Core.RunObj,T.TSystem.eObjType,System.Int32,System.TypeCode)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="objType">Object parentType</param>
            <param name="ID">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.Analog.#ctor(T.Kernel.Core.RunObj,T.TSystem.eObjType,System.Int32[],System.TypeCode)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="objType">Object parentType</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:T.Kernel.Tags.Analog.IsIntegerType" -->
        <member name="M:T.Kernel.Tags.Analog.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.Analog.SetBitValue(System.Int32,System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset})">
            <summary>
            Set bit objType
            </summary>
            <param name="n">Bit number</param>
            <param name="objType">New objType</param>
        </member>
        <member name="M:T.Kernel.Tags.Analog.SetBitValue(System.Int32,System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set bit objType
            </summary>
            <param name="n">Bit number</param>
            <param name="objType">New objType</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="ip">IP</param>
        </member>
        <member name="M:T.Kernel.Tags.Analog.GetBitValue(System.Int32)">
            <summary>
            Get bit objType
            </summary>
            <param name="n">Bit number</param>
            <returns>Bit objType</returns>
        </member>
        <member name="M:T.Kernel.Tags.Analog.GetBitValue64Bits(System.Int32)">
            <summary>
            Get bit objType
            </summary>
            <param name="n">Bit number</param>
            <returns>Bit objType</returns>
        </member>
        <member name="M:T.Kernel.Tags.Analog.BeforeSetValue(System.Object@,System.Boolean)">
            <summary>
            Method called before setting value
            </summary>
            <param name="value">Value</param>
            <returns>Flag indicating whether value can be set</returns>
        </member>
        <member name="M:T.Kernel.Tags.Analog.AfterSetValue(System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Boolean)">
            <summary>
            Method called after setting objType
            </summary>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="valueChanged">Flag indicating whether value was changed</param>
        </member>
        <member name="M:T.Kernel.Tags.Analog.GetAlarmItemReference(T.TSystem.eCondition)">
            <summary>
            Return object reference from correct property
            </summary>
            <param name="condition">alarm condition</param>
            <returns>refernce property</returns>
        </member>
        <member name="T:T.Kernel.Tags.Counter">
            <summary>
            Define Counter parentType
            </summary>
        </member>
        <member name="F:T.Kernel.Tags.Counter.lastTriggerValue">
            <summary>
            Field to store the last trigger objType
            </summary>
        </member>
        <member name="F:T.Kernel.Tags.Counter.isRunning">
            <summary>
            Flag indicating status of execution
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Counter.Model">
            <summary>
            Model
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Counter.Event">
            <summary>
            Event
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Counter.Trigger">
            <summary>
            Trigger
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Counter.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.Counter.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Tags.Counter.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.Counter.OnStart(T.Kernel.Core.TModule)">
            <summary>
            Execute initial code to active Counter
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Counter.OnPause(System.Int32)">
            <summary>
            Execute initial code to active Counter
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Counter.OnContinue(System.Int32)">
            <summary>
            Execute initial code to active Counter
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Counter.HandlerForCounterExecution(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Handler called when trigger change
            </summary>
            <param name="sender"></param>
            <param name="ev"></param>
        </member>
        <member name="T:T.Kernel.Tags.Digital">
            <summary>
            Define Digital parentType
            </summary>
        </member>
        <member name="F:T.Kernel.Tags.Digital.stateInUse">
            <summary>
            Flag indicating whether State property is in use
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Digital.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Digital.DisplayValue">
            <summary>
            DisplayValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Digital.EstimatedValue">
            <summary>
            EstimatedValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Digital.HistorianValue">
            <summary>
            HistorianValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Digital.State">
            <summary>
            State
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Digital.LockValue">
            <summary>
            LockValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Digital.PreviousValue">
            <summary>
            Previous Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Digital.Min">
            <summary>
            Min
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Digital.Max">
            <summary>
            Max
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Digital.Deadband">
            <summary>
            Deadband
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Digital.ToggleValue">
            <summary>
            Toggles value
            </summary>
            <returns>New value</returns>
        </member>
        <member name="P:T.Kernel.Tags.Digital.Hi">
            <summary>
            Hi AlarmItem
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Digital.Lo">
            <summary>
            Lo AlarmItem
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Digital.CommandValue">
            <summary>
            CommandValue
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Digital.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.Digital.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Tags.Digital.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.Digital.BeforeSetValue(System.Object@,System.Boolean)">
            <summary>
            Method called before setting value
            </summary>
            <param name="value">Value</param>
            <returns>Flag indicating whether value can be set</returns>
        </member>
        <member name="M:T.Kernel.Tags.Digital.AfterSetValue(System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Boolean)">
            <summary>
            Method called after setting objType
            </summary>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="valueChanged">Flag indicating whether value was changed</param>
        </member>
        <member name="M:T.Kernel.Tags.Digital.GetAlarmItemReference(T.TSystem.eCondition)">
            <summary>
            Return object reference from correct property
            </summary>
            <param name="condition">alarm condition</param>
            <returns>refernce property</returns>
        </member>
        <member name="T:T.Kernel.Tags.Dynamic">
            <summary>
            Define Dynamic parentType
            </summary>
        </member>
        <member name="F:T.Kernel.Tags.Dynamic._bit">
            <summary>
            Array containg property bits
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.DisplayValue">
            <summary>
            DisplayValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.DisplayUnits">
            <summary>
            Gets the Tag's DisplayUnits property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.DisplayMin">
            <summary>
            Gets or sets the Tag's DisplayMin property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.DisplayMax">
            <summary>
            Gets or sets the Tag's DisplayMax property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.EstimatedValue">
            <summary>
            EstimatedValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.HistorianValue">
            <summary>
            HistorianValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.PreviousValue">
            <summary>
            Previous Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Min">
            <summary>
            Min
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Max">
            <summary>
            Max
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Deadband">
            <summary>
            Deadband
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit0">
            <summary>
            Gets or sets the bit 0 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit1">
            <summary>
            Gets or sets the bit 1 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit2">
            <summary>
            Gets or sets the bit 2 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit3">
            <summary>
            Gets or sets the bit 3 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit4">
            <summary>
            Gets or sets the bit 4 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit5">
            <summary>
            Gets or sets the bit 5 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit6">
            <summary>
            Gets or sets the bit 6 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit7">
            <summary>
            Gets or sets the bit 7 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit8">
            <summary>
            Gets or sets the bit 8 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit9">
            <summary>
            Gets or sets the bit 9 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit10">
            <summary>
            Gets or sets the bit 10 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit11">
            <summary>
            Gets or sets the bit 11 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit12">
            <summary>
            Gets or sets the bit 12 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit13">
            <summary>
            Gets or sets the bit 13 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit14">
            <summary>
            Gets or sets the bit 14 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit15">
            <summary>
            Gets or sets the bit 15 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit16">
            <summary>
            Gets or sets the bit 16 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit17">
            <summary>
            Gets or sets the bit 17 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit18">
            <summary>
            Gets or sets the bit 18 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit19">
            <summary>
            Gets or sets the bit 19 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit20">
            <summary>
            Gets or sets the bit 20 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit21">
            <summary>
            Gets or sets the bit 21 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit22">
            <summary>
            Gets or sets the bit 22 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit23">
            <summary>
            Gets or sets the bit 23 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit24">
            <summary>
            Gets or sets the bit 24 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit25">
            <summary>
            Gets or sets the bit 25 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit26">
            <summary>
            Gets or sets the bit 26 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit27">
            <summary>
            Gets or sets the bit 27 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit28">
            <summary>
            Gets or sets the bit 28 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit29">
            <summary>
            Gets or sets the bit 29 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit30">
            <summary>
            Gets or sets the bit 30 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Bit31">
            <summary>
            Gets or sets the bit 31 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Hi">
            <summary>
            Hi AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.HiHi">
            <summary>
            HiHi AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.Lo">
            <summary>
            Lo AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.LoLo">
            <summary>
            LoLo AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.DeviationMinor">
            <summary>
            DeviationMinor AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.DeviationMajor">
            <summary>
            DeviationMajor AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Dynamic.RateOfChange">
            <summary>
            RateOfChange AlarmItem object
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Dynamic.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.Dynamic.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:T.Kernel.Tags.Dynamic.IsIntegerType" -->
        <member name="M:T.Kernel.Tags.Dynamic.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.Dynamic.SetDisable(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set Disable property
            </summary>
            <param name="value">New value</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="ip">IP</param>
        </member>
        <member name="M:T.Kernel.Tags.Dynamic.SetBitValue(System.Int32,System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset})">
            <summary>
            Set bit value
            </summary>
            <param name="n">Bit number</param>
            <param name="value">New value</param>
        </member>
        <member name="M:T.Kernel.Tags.Dynamic.SetBitValue(System.Int32,System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set bit value
            </summary>
            <param name="n">Bit number</param>
            <param name="objType">New objType</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="ip">IP</param>
        </member>
        <member name="M:T.Kernel.Tags.Dynamic.GetBitValue(System.Int32)">
            <summary>
            Get bit objType
            </summary>
            <param name="n">Bit number</param>
            <returns>Bit objType</returns>
        </member>
        <member name="M:T.Kernel.Tags.Dynamic.GetBitValue64Bits(System.Int32)">
            <summary>
            Get bit objType
            </summary>
            <param name="n">Bit number</param>
            <returns>Bit objType</returns>
        </member>
        <member name="M:T.Kernel.Tags.Dynamic.BeforeSetValue(System.Object@,System.Boolean)">
            <summary>
            Method called before setting value
            </summary>
            <param name="value">Value</param>
            <returns>Flag indicating whether value can be set</returns>
        </member>
        <member name="M:T.Kernel.Tags.Dynamic.VerifyMinMax(System.Object)">
            <summary>
            Verify min and max values
            </summary>
            <param name="objType"></param>
            <returns>Flag indicating if objValue is between min and max values</returns>
        </member>
        <member name="M:T.Kernel.Tags.Dynamic.SetMinMax(System.Object,System.Boolean@)">
            <summary>
            Return min, max or objValue 
            </summary>
            <param name="value">ObjValue to compare with min and max values</param>
            <param name="hi">Return true when objValue is greater then max value</param>
            <returns></returns>
        </member>
        <member name="M:T.Kernel.Tags.Dynamic.VerifyDeadband(System.Object)">
            <summary>
            Verify Dead Band values
            </summary>
            <param name="objType">Value to verify</param>
            <returns>Flag indicating if objType is between min and max values</returns>
        </member>
        <member name="M:T.Kernel.Tags.Dynamic.AfterSetValue(System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Boolean)">
            <summary>
            Method called after setting objType
            </summary>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="valueChanged">Flag indicating whether value was changed</param>
        </member>
        <member name="M:T.Kernel.Tags.Dynamic.AfterCreateObj(System.Int32)">
            <summary>
            Called after object created to get Retentive objType or configured objType
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:T.Kernel.Tags.Dynamic.GetAlarmItemReference(T.TSystem.eCondition)">
            <summary>
            Return object reference from correct property
            </summary>
            <param name="condition">alarm condition</param>
            <returns>refernce property</returns>
        </member>
        <member name="T:T.Kernel.Tags.UnsEnumerations">
            <summary>
            Define list containg Enumerations
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.UnsEnumerations.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Kernel.Tags.UnsEnumerations.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.Enumeration.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Kernel.Tags.Enumeration.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.Enumeration.GetItemName(System.Object)">
            <summary>
            Gets item name based to value
            </summary>
            <param name="value">Value</param>
            <returns>Enum name</returns>
        </member>
        <member name="M:T.Kernel.Tags.Enumeration.GetActiveColor(System.Object)">
            <summary>
            Gets active color based to value
            </summary>
            <param name="value">Value</param>
            <returns>Active color</returns>
        </member>
        <member name="M:T.Kernel.Tags.Enumeration.GetInactiveColor(System.Object)">
            <summary>
            Gets inactive color based to value
            </summary>
            <param name="value">Value</param>
            <returns>Inactive color</returns>
        </member>
        <member name="M:T.Kernel.Tags.Enumeration.GetDisplayText(System.Object)">
            <summary>
            Gets display text based to value
            </summary>
            <param name="value">Value</param>
            <returns>Display text</returns>
        </member>
        <member name="P:T.Kernel.Tags.EnumerationProperties.Value">
            <summary>
            Gets the Value configured.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.EnumerationProperties.DisplayText">
            <summary>
            Gets the DisplayText configured.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.EnumerationProperties.ActiveColor">
            <summary>
            Gets the ActiveColor configured.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.EnumerationProperties.InactiveColor">
            <summary>
            Gets the InactiveColor configured.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.EnumerationProperties.Description">
            <summary>
            Gets the Description configured.
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.EnumerationProperties.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.EnumerationProperties.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Kernel.Tags.Json">
            <summary>
            Define Json (string) parentType
            </summary>
        </member>
        <member name="T:T.Kernel.Tags.Json.e2">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Json.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Json.DisplayValue">
            <summary>
            DisplayValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Json.EstimatedValue">
            <summary>
            EstimatedValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Json.HistorianValue">
            <summary>
            HistorianValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Json.LockValue">
            <summary>
            LockValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Json.PreviousValue">
            <summary>
            Previous Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Json.CommandValue">
            <summary>
            CommandValue
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Json.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.Json.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Tags.Json.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.Json.AfterSetValue(System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Boolean)">
            <summary>
            Method called after setting objType
            </summary>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="valueChanged">Flag indicating whether value was changed</param>
        </member>
        <member name="M:T.Kernel.Tags.Json.GetJObject">
            <summary>
            Get the JObject parsed from the current string Value
            </summary>
            <param name="table">Reference to new table</param>
        </member>
        <member name="M:T.Kernel.Tags.Json.GetJArray">
            <summary>
            Get the JArray parsed from the current string Value
            </summary>
            <param name="table">Reference to new table</param>
        </member>
        <member name="M:T.Kernel.Tags.Json.SerializeObject(System.Object)">
            <summary>
            Serialize a NET object the string value
            </summary>
            <param name="netObject">Reference to the .NET object</param>
        </member>
        <member name="M:T.Kernel.Tags.Json.DeserializeObject">
            <summary>
            Desserialize the current string value to a Net Object
            </summary>
            <param name="netObject">Reference to the .NET object</param>
        </member>
        <member name="M:T.Kernel.Tags.Json.DeserializeObjectFromString(System.String)">
            <summary>
            Set the string Value the given string and Deserialize to a .NET Object
            </summary>
            <param name="netObject">Reference to the .NET object</param>
        </member>
        <member name="T:T.Kernel.Tags.TagObj">
            <summary>
            Base classes to all Tag objects.
            </summary>
        </member>
        <member name="T:T.Kernel.Tags.TagObj.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="F:T.Kernel.Tags.TagObj.valueType">
            <summary>
            Type of the objType 
            </summary>
        </member>
        <member name="F:T.Kernel.Tags.TagObj.lockSetValue">
            <summary>
            Object used to ensure unique access in SetValue method
            </summary>
        </member>
        <member name="F:T.Kernel.Tags.TagObj.PropertyColumnName">
            <summary>
            Array of Properties and DatabaseColumnName 
            </summary>
        </member>
        <member name="F:T.Kernel.Tags.TagObj.RetentiveEnable">
            <summary>
            Array of Enabled Retentive Properties
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.ValueType">
            <summary>
            Gets the Tag's ValueType property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Quality">
            <summary>
            Gets or sets the Tag's quality state.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Timestamp">
            <summary>
            Gets or sets the Tag's Timestamp property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Units">
            <summary>
            Gets or sets the Tag's Units property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Format">
            <summary>
            Gets or sets the Tag's Format property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Retentive">
            <summary>
            Gets or sets the Tag's Retentive property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Visibility">
            <summary>
            Gets the Tag's Visibility property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Domain">
            <summary>
            Gets the Tag's Domain property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Locked">
            <summary>
            Gets or sets the Tag's Locked property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.ReadSecurity">
            <summary>
            Gets or sets the Tag's ReadSecurity property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.WriteSecurity">
            <summary>
            Gets or sets the Tag's WriteSecurity property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.AckRequired">
            <summary>
            Gets the Tag's AckRequired property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Acked">
            <summary>
            Gets or sets the Tag's Acked property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.AlarmState">
            <summary>
            Gets the Tag's AlarmState property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.AlarmDisable">
            <summary>
            Gets or sets the Tag's AlarmDisable property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.AlarmSuspend">
            <summary>
            Gets or sets the Tag's AlarmSuspend property.
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.ForceValue(System.Object)">
            <summary>
            Forces the object's value property to the value passed as a parameter.
            </summary>
            <param name="value">Value to be forced</param>
            <returns>
            Returns always 0
            </returns>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Historian">
            <summary>
            Gets the Tag's Historian property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Disable">
            <summary>
            Gets or sets the Tag's Disable property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Changed">
            <summary>
            Gets the Tag's Changed property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.RaiseAllChanges">
            <summary>
            Gets or sets the Tag's RaiseAllChanges property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.FirstDescription">
            <summary>
            Gets the Tag's FirstDescription property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Description">
            <summary>
            Gets the Tag's Description property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.FullDescription">
            <summary>
            Gets the Tag's FullDescription property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.ArraySize">
            <summary>
            Gets the Tag's ArraySize property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.LastArrayIndex">
            <summary>
            Gets the Tag's LastArrayIndex property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.DisplayText">
            <summary>
            Gets or sets the Tag's DisplayText property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.XmlAttributes">
            <summary>
            Gets or sets the Tag's XmlAttributes property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Level">
            <summary>
            Gets the Tag's Level property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Path">
            <summary>
            Gets the Tag's Path property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.DefaultSymbol">
            <summary>
            Gets the Tag's Symbol property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.ActiveColor">
            <summary>
            Gets the Tag's ActiveColor property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.InactiveColor">
            <summary>
            Gets the Tag's InactiveColor property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Enumeration">
            <summary>
            Gets the Tag's Enumeration property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Category">
            <summary>
            Gets the Tag's Category property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.ValueAsString">
            <summary>
            Gets or sets the Tag's ValueAsString property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.DevicePoint">
            <summary>
            Gets the Tag's DevicePoint property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.RelativeAddress">
            <summary>
            Gets the Tag's RelativeAddress property.
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.ToString">
            <summary>
            Converts this instance to its equivalent string representation.
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.GetValueAsString(System.Object)">
            <summary>
            Get value as string
            </summary>
            <param name="value">Value</param>
            <returns>Value as string</returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.IsEnumeration">
            <summary>
            Gets flag indicating whether tag is enumeration
            </summary>
            <returns>Flag indicating whether tag is enumeration </returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.GetEnumerationName">
            <summary>
            Gets enumeration name
            </summary>
            <returns>String containg name</returns>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.ExecuteAck">
            <summary>
            Gets or sets the Tag's ExecuteAck property. (hidden to intelisense)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:T.Kernel.Tags.TagObj.LastWriteAccess" -->
        <member name="P:T.Kernel.Tags.TagObj.HasHistorian">
            <summary>
            Gets the Tag's HasHistorian property.
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.UpdateHasHistorian">
            <summary>
            Update hasHistorian property (hidden to intelisense).
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.DeviceWriteDelta">
            <summary>
            Gets or sets the Tag's DeviceWriteDelta property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.PrefixAlarmMessage">
            <summary>
            Gets or sets the Tag's PrefixAlarmMessage property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Text1">
            <summary>
            Gets or sets the extended text field 1.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.Text2">
            <summary>
            Gets or sets the extended text field 2.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.AlarmPriorityEnum">
            <summary>
            Gets or sets the Tag's AlarmPriorityEnum property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TagObj.IsJArray">
            <summary>
            Gets the Tag's Changed property.
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.#ctor(T.Kernel.Core.RunObj,T.TSystem.eObjType,System.Int32,System.TypeCode)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="objType">Object parentType</param>
            <param name="id">ID of the runtime object</param>
            <param name="valuetype">Type of the objType</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.#ctor(T.Kernel.Core.RunObj,T.TSystem.eObjType,System.Int32[],System.TypeCode)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="objType">Object parentType</param>
            <param name="arrayIndexes">Array indexes</param>
            <param name="valuetype">Type of the objType</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.StartupColName">
            <summary>
            Initialize Static Arrays with name of column and editInfo about retentive properties
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.OnResolveID(System.Int32)">
            <summary>
            Resolve ID
            </summary>
            <param name="id">ID</param>
            <returns>Resolved ID</returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.CanAddUsedTags(System.Int32)">
            <summary>
            CanAddUsedTags
            </summary>
            <param name="id"></param>
            <returns>Not of disableCanAddUsedTags property</returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.GetCategoryFlags">
            <summary>
            Gets the category flags
            </summary>
            <returns>Category flags number</returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.AfterCreateObj(System.Int32)">
            <summary>
            Called after object creation to read retentive objType or configured objType
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.GetXmlAttribute(System.String)">
            <summary>
            Gets Xml Attribute
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SetXmlAttribute(System.String,System.String)">
            <summary>
            Sets Xml Attribute
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.Lock">
            <summary>
            Lock objType
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.Unlock">
            <summary>
            Unlock objType
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SetDevicePointProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set DevicePoint property
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="userName">User name changes the value</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SetRaiseAllChangesProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set RaiseAllChanges property
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="userName">User name changes the value</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SetLockedProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set Locked property
            </summary>
            <param name="newValue">New objType</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="userName">User name changes the value</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.GetValue">
            <summary>
            Get objType
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.GetValue(System.Boolean)">
            <summary>
            Get objType
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.GetFormatedValue(System.Boolean)">
            <summary>
            Get objType
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.GetObjValue">
            <summary>
            Get object objType
            </summary>
            <returns>Reference to object objType</returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.BeforeSetValue(System.Object@,System.Boolean)">
            <summary>
            Method called before setting value
            </summary>
            <param name="value">Value</param>
            <returns>Flag indicating whether value can be set</returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.AfterSetValue(System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Boolean)">
            <summary>
            Method called after setting objType
            </summary>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="valueChanged">Flag indicating whether value was changed</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SetValue(System.Object)">
            <summary>
            Set objType
            </summary>
            <param name="objType">New objType</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SetValue(System.Object,System.Int32)">
            <summary>
            Set objType
            </summary>
            <param name="objType">New objType</param>
            <param name="Quality">Data quality (Good=192)</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SetValue(System.Object,System.Int32,T.Kernel.Core.eRunEvent)">
            <summary>
            Set objType
            </summary>
            <param name="objType">New objType</param>
            <param name="Quality">Data quality (Good=192)</param>       
            <param name="flags">Indicate when generate event</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SetValue(System.Object,T.Kernel.Core.eRunEvent)">
            <summary>
            Set objType
            </summary>
            <param name="objType">New objType</param>
            <param name="flags">Indicate when generate event</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SetValue(System.Object,System.Int32,System.DateTimeOffset)">
            <summary>
            Set objType
            </summary>
            <param name="objType">New objType</param>
            <param name="quality">Quality</param>
            <param name="timestamp">Timestamp</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SetValue(System.Object,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64)">
            <summary>
            Set objType
            </summary>
            <param name="objType">New objType</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SetValue(System.Object,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean})">
            <summary>
            Set objType
            </summary>
            <param name="objType">New objType</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="canSetValue">Callback method that is called for ckecking whether should set value</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SetValue(System.Object,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set objType
            </summary>
            <param name="objType">New objType</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="canSetValue">Callback method that is called for ckecking whether should set value</param>
            <param name="userName">User name changes the value</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SetValue(System.Object,System.Int32,System.DateTimeOffset,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64)">
            <summary>
            Set objType
            </summary>
            <param name="objType">New objType</param>
            <param name="quality">Quality</param>
            <param name="timestamp">Timestamp</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SetValue(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set objType
            </summary>
            <param name="objType">New objType</param>
            <param name="quality">Quality</param>
            <param name="timestamp">Timestamp</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="canSetValue">Callback method that is called for ckecking whether should set value</param>
            <param name="userName">User name changes the value</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SetValue(System.Object,System.Int32,System.DateTimeOffset,System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set objType
            </summary>
            <param name="objType">New objType</param>
            <param name="quality">Quality</param>
            <param name="timestamp">Timestamp</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="canSetValue">Callback method that is called for ckecking whether should set value</param>
            <param name="userName">User name changes the value</param>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.GetPropertyValueFromDatabase(System.Int32,T.Kernel.Core.RunObj,System.Boolean,T.Kernel.Core.eRunEvent,System.Int32)">
            <summary>
            Called to set initial values of properties from retentive database or from config database
            </summary>
            <param name="id">object id to set the inital objType</param>
            <param name="obj">object to set the initual objType</param>
            <returns></returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.SaveRetentive(System.Int32,System.Object)">
            <summary>
            Called to save retentive values of properties 
            </summary>
            <param name="id">object id of object</param>
            <param name="obj">objType</param>
            <returns></returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.GetFormat">
            <summary>
            Format objType to its equivalent string representation
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.GetAlarmItemReference(T.TSystem.eCondition)">
            <summary>
            Return the reference object to the configured condition
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.GetDescription">
            <summary>
            Return the description
            </summary>
            <returns>String with description value</returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.IsDeadbandByPercentage">
            <summary>
            Flag indicating whether Deabband property is by absolute or percentage
            </summary>
            <returns>If percentage then returns true else false(absolute)</returns>
        </member>
        <member name="M:T.Kernel.Tags.TagObj.PreloadMainProperties">
            <summary>
            Called to preload the main properties
            </summary>
        </member>
        <member name="T:T.Kernel.Tags.TByteArray">
            <summary>
            Define TByteArray (byte[]) parentType
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TByteArray.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TByteArray.DisplayValue">
            <summary>
            DisplayValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TByteArray.LockValue">
            <summary>
            LockValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TByteArray.PreviousValue">
            <summary>
            Previous Value
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TByteArray.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.TByteArray.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Tags.TByteArray.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.TByteArray.AfterSetValue(System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Boolean)">
            <summary>
            Method called after setting objType
            </summary>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="valueChanged">Flag indicating whether value was changed</param>
        </member>
        <member name="T:T.Kernel.Tags.TDataTable">
            <summary>
            Define TDataTable (DataTable) parentType
            </summary>
        </member>
        <member name="T:T.Kernel.Tags.TDataTable.e2">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TDataTable.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TDataTable.DisplayValue">
            <summary>
            DisplayValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TDataTable.LockValue">
            <summary>
            LockValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TDataTable.PreviousValue">
            <summary>
            Previous Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TDataTable.OverwriteValue">
            <summary>
            OverwriteValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TDataTable.OverwriteLockValue">
            <summary>
            OverwriteLockValue
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TDataTable.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.TDataTable.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Tags.TDataTable.Update(System.Data.DataTable)">
            <summary>
            Update Table object
            </summary>
            <param name="table">Reference to DataTable with changings</param>
        </member>
        <member name="M:T.Kernel.Tags.TDataTable.Initialize(System.Data.DataTable)">
            <summary>
            Set new reference to Table object
            </summary>
            <param name="table">Reference to new table</param>
        </member>
        <member name="M:T.Kernel.Tags.TDataTable.Initialize2(System.Data.DataTable,System.Int32,System.DateTimeOffset,System.Int64)">
            <summary>
            Set new reference to Table object (hidden to intelisense)
            </summary>
            <param name="table">Reference to new table</param>
            <param name="quality">Quality number</param>
            <param name="timestamp">DateTimeOffset Timestamp</param>
            <param name="protectionRecursiveEvent">Number to protect against recursive generate event</param>
        </member>
        <member name="M:T.Kernel.Tags.TDataTable.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.TDataTable.AfterSetValue(System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Boolean)">
            <summary>
            Method called after setting objType
            </summary>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="valueChanged">Flag indicating whether value was changed</param>
        </member>
        <member name="M:T.Kernel.Tags.TDataTable.CustomizeAssignmentValue(System.Object,System.Object@,System.Object@,T.Kernel.Core.eRunEvent)">
            <summary>
            Method that will be called to customize assignment of the new objType
            </summary>
            <param name="newValue">New objType</param>
            <param name="objType">Assignmented objType</param>
            <param name="valueChanges">Value changes</param>
            <param name="flags">Indicate when generate event</param>
            <returns>Flag indicating whether new objType was assignment successfully</returns>
        </member>
        <member name="M:T.Kernel.Tags.TDataTable.CustomizeAssignmentLockValue(System.Object,System.Object@,System.Object@,T.Kernel.Core.eRunEvent)">
            <summary>
            Method that will be called to customize assignment of the new objType
            </summary>
            <param name="newValue">New objType</param>
            <param name="objType">Assignmented objType</param>
            <param name="valueChanges">Value changes</param>
            <param name="flags">Indicate when generate event</param>
            <returns>Flag indicating whether new objType was assignment successfully</returns>
        </member>
        <member name="M:T.Kernel.Tags.TDataTable.StartBlockSet">
            <summary>
            Called to set the Start Block
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TDataTable.CommitBlockSet">
            <summary>
            Called to commit the current block
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TDataTable.RemoveRow(System.Int32)">
            <summary>
            Remove row
            </summary>
            <param name="r">Row number to remove</param>
        </member>
        <member name="M:T.Kernel.Tags.TDataTable.RemoveAll">
            <summary>
            Remove all rows
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TDataTable.GetRowsCount">
            <summary>
            Get number of rows
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TDataTable.GetColumnsCount">
            <summary>
            Get number of columns
            </summary>
        </member>
        <member name="T:T.Kernel.Tags.TDateTime">
            <summary>
            Define TDateTime (DateTimeOffset) parentType
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TDateTime.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TDateTime.DisplayValue">
            <summary>
            DisplayValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TDateTime.LockValue">
            <summary>
            LockValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TDateTime.PreviousValue">
            <summary>
            Previous Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TDateTime.UtcDateTime">
            <summary>
            UtcDateTime
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TDateTime.LocalDateTime">
            <summary>
            LocalDateTime
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TDateTime.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.TDateTime.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Tags.TDateTime.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.TDateTime.GetDateTime(System.DateTimeKind)">
            <summary>
            Get local or Utc DateTime
            </summary>
            <param name="kind">DateTimeKind</param>
            <returns>DateTime objType</returns>
        </member>
        <member name="M:T.Kernel.Tags.TDateTime.SetDateTimeValue(System.DateTimeKind,System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset})">
            <summary>
            Set DateTime
            </summary>
            <param name="kind">DateTime kind</param>
            <param name="objType">New objType</param>
        </member>
        <member name="M:T.Kernel.Tags.TDateTime.SetDateTimeValue(System.DateTimeKind,System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set DateTime objType
            </summary>
            <param name="objType">New objType</param>
            <param name="kind">DateTimeKind</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="ip">IP</param>
        </member>
        <member name="M:T.Kernel.Tags.TDateTime.AfterSetValue(System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Boolean)">
            <summary>
            Method called after setting objType
            </summary>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="valueChanged">Flag indicating whether value was changed</param>
        </member>
        <member name="T:T.Kernel.Tags.Terminal">
            <summary>
            Define Dynamic parentType
            </summary>
        </member>
        <member name="F:T.Kernel.Tags.Terminal._bit">
            <summary>
            Array containg property bits
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.DisplayValue">
            <summary>
            DisplayValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.DisplayUnits">
            <summary>
            Gets the Tag's DisplayUnits property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.DisplayMin">
            <summary>
            Gets or sets the Tag's DisplayMin property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.DisplayMax">
            <summary>
            Gets or sets the Tag's DisplayMax property.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.EstimatedValue">
            <summary>
            EstimatedValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.HistorianValue">
            <summary>
            HistorianValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.PreviousValue">
            <summary>
            Previous Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Min">
            <summary>
            Min
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Max">
            <summary>
            Max
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Deadband">
            <summary>
            Deadband
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit0">
            <summary>
            Gets or sets the bit 0 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit1">
            <summary>
            Gets or sets the bit 1 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit2">
            <summary>
            Gets or sets the bit 2 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit3">
            <summary>
            Gets or sets the bit 3 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit4">
            <summary>
            Gets or sets the bit 4 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit5">
            <summary>
            Gets or sets the bit 5 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit6">
            <summary>
            Gets or sets the bit 6 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit7">
            <summary>
            Gets or sets the bit 7 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit8">
            <summary>
            Gets or sets the bit 8 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit9">
            <summary>
            Gets or sets the bit 9 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit10">
            <summary>
            Gets or sets the bit 10 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit11">
            <summary>
            Gets or sets the bit 11 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit12">
            <summary>
            Gets or sets the bit 12 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit13">
            <summary>
            Gets or sets the bit 13 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit14">
            <summary>
            Gets or sets the bit 14 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit15">
            <summary>
            Gets or sets the bit 15 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit16">
            <summary>
            Gets or sets the bit 16 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit17">
            <summary>
            Gets or sets the bit 17 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit18">
            <summary>
            Gets or sets the bit 18 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit19">
            <summary>
            Gets or sets the bit 19 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit20">
            <summary>
            Gets or sets the bit 20 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit21">
            <summary>
            Gets or sets the bit 21 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit22">
            <summary>
            Gets or sets the bit 22 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit23">
            <summary>
            Gets or sets the bit 23 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit24">
            <summary>
            Gets or sets the bit 24 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit25">
            <summary>
            Gets or sets the bit 25 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit26">
            <summary>
            Gets or sets the bit 26 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit27">
            <summary>
            Gets or sets the bit 27 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit28">
            <summary>
            Gets or sets the bit 28 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit29">
            <summary>
            Gets or sets the bit 29 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit30">
            <summary>
            Gets or sets the bit 30 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Bit31">
            <summary>
            Gets or sets the bit 31 of the Tag's value.
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Hi">
            <summary>
            Hi AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.HiHi">
            <summary>
            HiHi AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.Lo">
            <summary>
            Lo AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.LoLo">
            <summary>
            LoLo AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.DeviationMinor">
            <summary>
            DeviationMinor AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.DeviationMajor">
            <summary>
            DeviationMajor AlarmItem object
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Terminal.RateOfChange">
            <summary>
            RateOfChange AlarmItem object
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Terminal.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.Terminal.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:T.Kernel.Tags.Terminal.IsIntegerType" -->
        <member name="M:T.Kernel.Tags.Terminal.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.Terminal.SetBitValue(System.Int32,System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset})">
            <summary>
            Set bit objType
            </summary>
            <param name="n">Bit number</param>
            <param name="objType">New objType</param>
        </member>
        <member name="M:T.Kernel.Tags.Terminal.SetBitValue(System.Int32,System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set bit objType
            </summary>
            <param name="n">Bit number</param>
            <param name="objType">New objType</param>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="ip">IP</param>
        </member>
        <member name="M:T.Kernel.Tags.Terminal.GetBitValue(System.Int32)">
            <summary>
            Get bit objType
            </summary>
            <param name="n">Bit number</param>
            <returns>Bit objType</returns>
        </member>
        <member name="M:T.Kernel.Tags.Terminal.GetBitValue64Bits(System.Int32)">
            <summary>
            Get bit objType
            </summary>
            <param name="n">Bit number</param>
            <returns>Bit objType</returns>
        </member>
        <member name="M:T.Kernel.Tags.Terminal.BeforeSetValue(System.Object@,System.Boolean)">
            <summary>
            Method called before setting value
            </summary>
            <param name="value">Value</param>
            <returns>Flag indicating whether value can be set</returns>
        </member>
        <member name="M:T.Kernel.Tags.Terminal.VerifyMinMax(System.Object)">
            <summary>
            Verify min and max values
            </summary>
            <param name="objType"></param>
            <returns>Flag indicating if objValue is between min and max values</returns>
        </member>
        <member name="M:T.Kernel.Tags.Terminal.SetMinMax(System.Object,System.Boolean@)">
            <summary>
            Return min, max or objValue 
            </summary>
            <param name="value">ObjValue to compare with min and max values</param>
            <param name="hi">Return true when objValue is greater then max value</param>
            <returns></returns>
        </member>
        <member name="M:T.Kernel.Tags.Terminal.VerifyDeadband(System.Object)">
            <summary>
            Verify Dead Band values
            </summary>
            <param name="objType">Value to verify</param>
            <returns>Flag indicating if objType is between min and max values</returns>
        </member>
        <member name="M:T.Kernel.Tags.Terminal.AfterSetValue(System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Boolean)">
            <summary>
            Method called after setting objType
            </summary>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="valueChanged">Flag indicating whether value was changed</param>
        </member>
        <member name="M:T.Kernel.Tags.Terminal.AfterCreateObj(System.Int32)">
            <summary>
            Called after object created to get Retentive objType or configured objType
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:T.Kernel.Tags.Terminal.GetAlarmItemReference(T.TSystem.eCondition)">
            <summary>
            Return object reference from correct property
            </summary>
            <param name="condition">alarm condition</param>
            <returns>refernce property</returns>
        </member>
        <member name="T:T.Kernel.Tags.Text">
            <summary>
            Define Text (string) parentType
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Text.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Text.DisplayValue">
            <summary>
            DisplayValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Text.EstimatedValue">
            <summary>
            EstimatedValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Text.HistorianValue">
            <summary>
            HistorianValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Text.LockValue">
            <summary>
            LockValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Text.PreviousValue">
            <summary>
            Previous Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Text.CommandValue">
            <summary>
            CommandValue
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Text.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.Text.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Tags.Text.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.Text.AfterSetValue(System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Boolean)">
            <summary>
            Method called after setting objType
            </summary>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="valueChanged">Flag indicating whether value was changed</param>
        </member>
        <member name="T:T.Kernel.Tags.TGuid">
            <summary>
            Define TGuid (Guid) parentType
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TGuid.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TGuid.DisplayValue">
            <summary>
            DisplayValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TGuid.LockValue">
            <summary>
            LockValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TGuid.PreviousValue">
            <summary>
            Previous Value
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TGuid.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.TGuid.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Tags.TGuid.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.TGuid.AfterSetValue(System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Boolean)">
            <summary>
            Method called after setting objType
            </summary>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="valueChanged">Flag indicating whether value was changed</param>
        </member>
        <member name="T:T.Kernel.Tags.Timer">
            <summary>
            Define Timer parentType
            </summary>
        </member>
        <member name="F:T.Kernel.Tags.Timer.module">
            <summary>
            Reference to main module
            </summary>
        </member>
        <member name="F:T.Kernel.Tags.Timer.unBindControl">
            <summary>
            bind object to execute the unbind operation
            </summary>
        </member>
        <member name="F:T.Kernel.Tags.Timer.isRunning">
            <summary>
            Flag indicating status of execution
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Timer.Model">
            <summary>
            Model Value (Pulse, DelayOff, SquareWave or Comparer)
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.Timer.Interval">
            <summary>
            Interval
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Timer.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.Timer.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Tags.Timer.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.Timer.OnStart(T.Kernel.Core.TModule)">
            <summary>
            Execute initial code to active Timer
            </summary>
            <param name="module"></param>
        </member>
        <member name="M:T.Kernel.Tags.Timer.OnPause(System.Int32)">
            <summary>
            Execute initial code to active Counter
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Timer.OnContinue(System.Int32)">
            <summary>
            Execute initial code to active Counter
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Timer.OnStop(System.Int32)">
            <summary>
            Execute initial code to active Counter
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.Timer.HandlerForSquareWaveExecution(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Handler called when period to change square wave state is over
            </summary>
            <param name="sender"></param>
            <param name="ev"></param>
        </member>
        <member name="M:T.Kernel.Tags.Timer.HandlerForDelayOffExecution(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Handler called when Value is changed - start timer to reset the pulse
            </summary>
            <param name="sender"></param>
            <param name="ev"></param>
        </member>
        <member name="M:T.Kernel.Tags.Timer.HandlerForResetPulse(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Handler called to reset the pulse objType
            </summary>
            <param name="sender"></param>
            <param name="ev"></param>
        </member>
        <member name="M:T.Kernel.Tags.Timer.HandlerForComparerExecution(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            handler called to compare the time and set the correct comparer objType
            </summary>
            <param name="sender"></param>
            <param name="ev"></param>
        </member>
        <member name="T:T.Kernel.Tags.TInternalDataTable">
            <summary>
            Define TInternalDataTable (DataTable) parentType
            </summary>
        </member>
        <member name="T:T.Kernel.Tags.TInternalDataTable.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TInternalDataTable.Table">
            <summary>
            Get a copy from DataTable object 
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TInternalDataTable.OverwriteOnUpdate">
            <summary>
            Get a copy from DataTable object 
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TInternalDataTable.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.TInternalDataTable.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Tags.TInternalDataTable.Update(System.Data.DataTable)">
            <summary>
            Update Table object
            </summary>
            <param name="table">Reference to DataTable with changings</param>
        </member>
        <member name="M:T.Kernel.Tags.TInternalDataTable.Initialize(System.Data.DataTable)">
            <summary>
            Set new reference to Table object
            </summary>
            <param name="table">Reference to new table</param>
        </member>
        <member name="M:T.Kernel.Tags.TInternalDataTable.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.TInternalDataTable.CustomizeAssignmentValue(System.Object,System.Object@,System.Object@,T.Kernel.Core.eRunEvent)">
            <summary>
            Method that will be called to customize assignment of the new objType
            </summary>
            <param name="newValue">New objType</param>
            <param name="objType">Assignmented objType</param>
            <param name="valueChanges">Value changes</param>
            <param name="flags">Indicate when generate event</param>
            <returns>Flag indicating whether new objType was assignment successfully</returns>
        </member>
        <member name="T:T.Kernel.Tags.TTimeSpan">
            <summary>
            Define TTimeSpan (TimeSpan) parentType
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TTimeSpan.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TTimeSpan.DisplayValue">
            <summary>
            DisplayValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TTimeSpan.LockValue">
            <summary>
            LockValue
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TTimeSpan.PreviousValue">
            <summary>
            Previous Value
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.TTimeSpan.TotalHours">
            <summary>
            TotalHours
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.TTimeSpan.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object</param>
        </member>
        <member name="M:T.Kernel.Tags.TTimeSpan.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Tags.TTimeSpan.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.TTimeSpan.AfterSetValue(System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Boolean)">
            <summary>
            Method called after setting objType
            </summary>
            <param name="moduleID">TModule ID</param>
            <param name="extendedModuleID">Extended TModule ID</param>
            <param name="flags">Indicate when generate event</param>
            <param name="protectRecursiveEvent">Number to protect against recursive generate event</param>
            <param name="valueChanged">Flag indicating whether value was changed</param>
        </member>
        <member name="T:T.Kernel.Tags.UnsTags">
            <summary>
            Define list containg tags
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.UnsTags.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Kernel.Tags.UnsTags.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Kernel.Tags.UserTypeList.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Kernel.Tags.UserTypeList.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Kernel.Tags.UserType">
            <summary>
            Define list containg a specified userName parentType
            </summary>
        </member>
        <member name="P:T.Kernel.Tags.UserType.XmlAttributes">
            <summary>
            Xml Attributes 
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.UserType.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="parentType">Object parentType</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Kernel.Tags.UserType.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="parentType">Object parentType</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Kernel.Tags.UserType.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="P:T.Kernel.Tags.UserType.Description">
            <summary>
            Description value
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.UserType.GetDescription">
            <summary>
            Gets description
            </summary>
            <returns>Return the description value</returns>
        </member>
        <member name="P:T.Kernel.Tags.UserType.Category">
            <summary>
            Category
            </summary>
        </member>
        <member name="M:T.Kernel.Tags.UserType.GetCategory">
            <summary>
            Gets category
            </summary>
            <returns>Return the category value</returns>
        </member>
        <member name="T:T.Kernel.Vars.SolutionVariables">
            <summary>
            Define list containg vars
            </summary>
        </member>
        <member name="M:T.Kernel.Vars.SolutionVariables.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Kernel.Vars.SolutionVariables.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.TSystem.AlarmEventInfoBase">
            <summary>
            Object containg information about alarm or event
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.Server">
            <summary>
            Server module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.SyncObj">
            <summary>
            SyncObj module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.TCPServer">
            <summary>
            TCPServer module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.Device">
            <summary>
            Device module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.Report">
            <summary>
            Report module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.MobileApp">
            <summary>
            MobileApp module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.Html5">
            <summary>
            Html5 Client module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.RichClient">
            <summary>
            RichClient module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.SmartClient">
            <summary>
            SmartClient module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.QuickWatch">
            <summary>
            QuickWatch module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.PropertyWatch">
            <summary>
            PropertyWatch module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.TraceWindow">
            <summary>
            Log module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.ModuleInformation">
            <summary>
            Module Information module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.ServerStation">
            <summary>
            Server Station module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.TagProviderService">
            <summary>
            TagProvider module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.ClientStation">
            <summary>
            Client Station module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.Alarm">
            <summary>
            Alarm module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.Historian">
            <summary>
            Historian module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.Dataset">
            <summary>
            Dataset module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.ScriptTaskServer">
            <summary>
            ScriptTaskServer module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.ScriptTaskClient">
            <summary>
            ScriptTaskClient module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.OPCServer">
            <summary>
            OPC Server module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.ReportServer">
            <summary>
            ReportServer module name.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.ConsumerServices">
            <summary>
            When modules wants load alarms, trends and data sources, it should use this string as 'module name'.
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.RedundantPair">
            <summary>
            Used between redundant pair servers
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.Designer">
            <summary>
            Designer name
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.OnlineConfig">
            <summary>
            Online Configuration name
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.TStartup">
            <summary>
            TStartup name
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.TMQTTBroker">
            <summary>
            TMQTTBroker name
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.RemoteProject">
            <summary>
            Remote Project name
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.Extension">
            <summary>
            Extesion module name
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.iDataPanel">
            <summary>
            iDataPanel name
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.GenericRichClient">
            <summary>
            Generic rich client name
            </summary>
        </member>
        <member name="F:T.TSystem.ModuleNames.DataAccess">
            <summary>
            DataAccess name
            </summary>
        </member>
        <member name="F:T.TSystem.TTimeout.Evaluation">
            <summary>
            Limit of Express
            </summary>
        </member>
        <member name="F:T.TSystem.TTimeout.Developer">
            <summary>
            Limit of Developer license
            </summary>
        </member>
        <member name="T:T.TSystem.StringWithExpressionsNodeBase">
            <summary>
            
            </summary>
        </member>
        <member name="T:T.TSystem.EditStringWithExpressionsBase">
            <summary>
            
            </summary>
        </member>
        <member name="T:T.TSystem.eAuthorization">
            <summary>
            eAuthorization: Authorizatio setup for WebData exchange
            </summary>
        </member>
        <member name="T:T.TSystem.eSaveLogOption">
            <summary>
            eSaveLog: TraceLog Debug options
            </summary>
        </member>
        <member name="T:T.TSystem.eTraceType">
            <summary>
            Trace typeCode
            </summary>
        </member>
        <member name="T:T.TSystem.eDesignerFilter">
            <summary>
            Designer Workspace Filter
            </summary>
        </member>
        <member name="T:T.TSystem.eTrackingOption">
            <summary>
            Track Project Changes
            </summary>
        </member>
        <member name="T:T.TSystem.eFlow">
            <summary>
            Visibility of the tag
            </summary>
        </member>
        <member name="T:T.TSystem.eVisibility">
            <summary>
            Visibility of the tag
            </summary>
        </member>
        <member name="T:T.TSystem.eVisibilityMember">
            <summary>
            Visibility of the tag member
            </summary>
        </member>
        <member name="T:T.TSystem.eRetentive">
            <summary>
            Tag Retentive
            </summary>
        </member>
        <member name="T:T.TSystem.eRetentiveMember">
            <summary>
            Tag Member Retentive
            </summary>
        </member>
        <member name="T:T.TSystem.eAckRequired">
            <summary>
            Alarm Group Ack Required
            </summary>
        </member>
        <member name="T:T.TSystem.eCondition">
            <summary>
            Alarm Item condition
            </summary>
        </member>
        <member name="T:T.TSystem.eAnnotation">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="T:T.TSystem.eEventCondition">
            <summary>
            Event Frame Condition
            </summary>
        </member>
        <member name="T:T.TSystem.eAlarmAuditTrail">
            <summary>
            Alarm Audit Trail
            </summary>
        </member>
        <member name="T:T.TSystem.eConditionPlusEvents">
            <summary>
            Alarm Item condition + events
            </summary>
        </member>
        <member name="T:T.TSystem.eAlarmListView">
            <summary>
            Alarm List View
            </summary>
        </member>
        <member name="T:T.TSystem.eConditionStandard">
            <summary>
            Alarm Item condition
            </summary>
        </member>
        <member name="T:T.TSystem.eLogEvents">
            <summary>
            Alarm Log Events
            </summary>
        </member>
        <member name="T:T.TSystem.eSound">
            <summary>
            Alarm Sound
            </summary>
        </member>
        <member name="T:T.TSystem.eAlarmShow">
            <summary>
            Alarm Display
            </summary>
        </member>
        <member name="T:T.TSystem.eAlarmState">
            <summary>
            Alarm Display
            </summary>
        </member>
        <member name="T:T.TSystem.eExecution">
            <summary>
            Event Execution option
            </summary>
        </member>
        <member name="T:T.TSystem.eCode">
            <summary>
            Source code Language on scripts
            </summary>
        </member>
        <member name="T:T.TSystem.eEncoding">
            <summary>
            Encoding
            </summary>
        </member>
        <member name="T:T.TSystem.eSaveFormat">
            <summary>
            SaveFormat
            </summary>
        </member>
        <member name="T:T.TSystem.eSaveFormatText">
            <summary>
            SaveFormat
            </summary>
        </member>
        <member name="T:T.TSystem.eEventTypes">
            <summary>
            Event Types
            </summary>
        </member>
        <member name="T:T.TSystem.eBindingMode">
            <summary>
            Direction on Tag Bindings
            </summary>
        </member>
        <member name="T:T.TSystem.eDomain">
            <summary>
            Domain
            </summary>
        </member>
        <member name="T:T.TSystem.eDomainMember">
            <summary>
            Member Domain
            </summary>
        </member>
        <member name="T:T.TSystem.eTargetDomain">
            <summary>
            Domain
            </summary>
        </member>
        <member name="T:T.TSystem.eCounterType">
            <summary>
            eCouterType
            </summary>
        </member>
        <member name="T:T.TSystem.eTimerType">
            <summary>
            eTimerType
            </summary>
        </member>
        <member name="T:T.TSystem.eMatch">
            <summary>
            eMatch
            </summary>
        </member>
        <member name="T:T.TSystem.eFileType">
            <summary>
            FileType
            </summary>
        </member>
        <member name="T:T.TSystem.eXmlSchemaType">
            <summary>
            FileType
            </summary>
        </member>
        <member name="T:T.TSystem.eTableAccessType">
            <summary>
            FileType
            </summary>
        </member>
        <member name="T:T.TSystem.eDateTimeMode">
            <summary>
            DateTimeMode
            </summary>
        </member>
        <member name="T:T.TSystem.ePadding">
            <summary>
            ePadding
            </summary>
        </member>
        <member name="T:T.TSystem.eValidationStatus">
            <summary>
            Validation status
            </summary>
        </member>
        <member name="T:T.TSystem.eObjType">
            <summary>
            IDs from Object Type
            </summary>
        </member>
        <member name="T:T.TSystem.eKeyword">
            <summary>
            IDs from Object Type
            </summary>
        </member>
        <member name="T:T.TSystem.eObjTypeProperty">
            <summary>
            Properties of tables of Object Types
            </summary>
        </member>
        <member name="T:T.TSystem.eCanSet">
            <summary>
            Properties of tables of Object Types
            </summary>
        </member>
        <member name="T:T.TSystem.ePredefinedTagObjID">
            <summary>
            Standard pre-defined IDs of TagObj
            </summary>
        </member>
        <member name="T:T.TSystem.eLockState">
            <summary>
            LockState types
            </summary>
        </member>
        <member name="T:T.TSystem.ePluginSource">
            <summary>
            ePluginSource types
            </summary>
        </member>
        <member name="T:T.TSystem.eServerState">
            <summary>
            Server state
            </summary>
        </member>
        <member name="T:T.TSystem.eRegion">
            <summary>
            eRegion
            </summary>
        </member>
        <member name="T:T.TSystem.eStretch">
            <summary>
            Stretch
            </summary>
        </member>
        <member name="T:T.TSystem.eRedundancyReplication">
            <summary>
            RedundancyReplication
            </summary>
        </member>
        <member name="T:T.TSystem.ePremiumProtocols">
            <summary>
            ePremiumProtocols
            </summary>
        </member>
        <member name="T:T.TSystem.eClassContent">
            <summary>
            eClassContent
            </summary>
        </member>
        <member name="T:T.TSystem.eBuildOutput">
            <summary>
            eBuildOutput
            </summary>
        </member>
        <member name="T:T.TSystem.eHistorianValueType">
            <summary>
            eHistorianValueType
            </summary>
        </member>
        <member name="T:T.TSystem.eHistorianDeviationDeadBandType">
            <summary>
            Deviation/Deadband/RateOfChange type
            </summary>
        </member>
        <member name="T:T.TSystem.eAccess">
            <summary>
            FileType
            </summary>
        </member>
        <member name="T:T.TSystem.eReminderStatus">
            <summary>
            FileType
            </summary>
        </member>
        <member name="T:T.TSystem.eProfile">
            <summary>
            Runtime Profile
            </summary>
        </member>
        <member name="T:T.TSystem.eSolutionHistoryEventSource">
            <summary>
            Project History events
            </summary>
        </member>
        <member name="T:T.TSystem.eInternalAssetFolders">
            <summary>
            Internal Asset Folders
            </summary>
        </member>
        <member name="T:T.TSystem.eEngine">
            <summary>
            eEngine
            </summary>
        </member>
        <member name="T:T.TSystem.HTML5DisabledAttribute">
            <summary>
            HTML5 Attribute disabled
            </summary>
        </member>
        <member name="P:T.TSystem.HTML5DisabledAttribute.Disabled">
            <summary>
            Get name
            </summary>
        </member>
        <member name="M:T.TSystem.HTML5DisabledAttribute.#ctor(System.Boolean)">
            <summary>
            HTML5 Attribute Constructor
            </summary>
            <param name="disabled"></param>
        </member>
        <member name="T:T.TSystem.IDAttribute">
            <summary>
            Contain definition of class members that will be used to get information about 
            assemblies for IntelliSense and to resolve names in ObjToken class
            </summary>
        </member>
        <member name="F:T.TSystem.IDAttribute.name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:T.TSystem.IDAttribute.id">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:T.TSystem.IDAttribute.refType">
            <summary>
            Reference type
            </summary>
        </member>
        <member name="F:T.TSystem.IDAttribute.description">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:T.TSystem.IDAttribute.readDataTable">
            <summary>
            Flag to read data from database
            </summary>
        </member>
        <member name="F:T.TSystem.IDAttribute.columnName">
            <summary>
            Column name in table of the database
            </summary>
        </member>
        <member name="F:T.TSystem.IDAttribute.domain">
            <summary>
            Domain
            </summary>
        </member>
        <member name="F:T.TSystem.IDAttribute.array">
            <summary>
            Array
            </summary>
        </member>
        <member name="F:T.TSystem.IDAttribute.isEditorBrowsableTagDynamic">
            <summary>
            Flag to indicate whether tag property is browsable (editor) for Dynamic tag type
            </summary>
        </member>
        <member name="P:T.TSystem.IDAttribute.Name">
            <summary>
            Get name
            </summary>
        </member>
        <member name="P:T.TSystem.IDAttribute.ID">
            <summary>
            Get id
            </summary>
        </member>
        <member name="P:T.TSystem.IDAttribute.RefType">
            <summary>
            Get reference type
            </summary>
        </member>
        <member name="P:T.TSystem.IDAttribute.Description">
            <summary>
            Get description
            </summary>
        </member>
        <member name="P:T.TSystem.IDAttribute.ReadDataTable">
            <summary>
            Flag to read data from database
            </summary>
        </member>
        <member name="P:T.TSystem.IDAttribute.ColumnName">
            <summary>
            Get column name in table of the database
            </summary>
        </member>
        <member name="P:T.TSystem.IDAttribute.Domain">
            <summary>
            Get domain
            </summary>
        </member>
        <member name="P:T.TSystem.IDAttribute.Array">
            <summary>
            Get array
            </summary>
        </member>
        <member name="P:T.TSystem.IDAttribute.IsEditorBrowsableTagDynamic">
            <summary>
            Get EditorBrowsableTagDynamic flag
            </summary>
        </member>
        <member name="M:T.TSystem.IDAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="name">Name</param>
            <param name="id">ID</param>
        </member>
        <member name="M:T.TSystem.IDAttribute.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="name">Name</param>
            <param name="id">ID</param>
            <param name="rdDataTable">Read data from datatable</param>
        </member>
        <member name="M:T.TSystem.IDAttribute.#ctor(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="name">Name</param>
            <param name="id">ID</param>
            <param name="rdDataTable">Read data from datatable</param>
            <param name="isEditorBrowsableTagDynamic">Flag Is EditorBrowsable for Tag Dynamic</param>
        </member>
        <member name="M:T.TSystem.IDAttribute.#ctor(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Construct the instance
            </summary>
            <param name="name">Name</param>
            <param name="id">ID</param>
            <param name="rdDataTable">Read data from datatable</param>
            <param name="columnName">Column name in table of the database</param>
        </member>
        <member name="M:T.TSystem.IDAttribute.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="name">Name</param>
            <param name="id">ID</param>
            <param name="refType">Reference type</param>
        </member>
        <member name="M:T.TSystem.IDAttribute.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="name">Name</param>
            <param name="id">ID</param>
            <param name="refType">Reference type</param>
            <param name="isEditorBrowsableTagDynamic">Flag Is EditorBrowsable for Tag Dynamic</param>
        </member>
        <member name="M:T.TSystem.IDAttribute.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Construct the instance
            </summary>
            <param name="name">Name</param>
            <param name="id">ID</param>
            <param name="description">Description</param>
        </member>
        <member name="M:T.TSystem.IDAttribute.#ctor(System.String,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="name">Name</param>
            <param name="id">ID</param>
            <param name="refType">Reference type</param>
            <param name="description">Description</param>
            <param name="Domain">Domain</param>
        </member>
        <member name="M:T.TSystem.IDAttribute.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Construct the instance
            </summary>
            <param name="name">Name</param>
            <param name="id">ID</param>
            <param name="refType">Reference type</param>
            <param name="description">Description</param>
        </member>
        <member name="M:T.TSystem.IDAttribute.#ctor(System.String,System.Int32,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            Construct the instance
            </summary>
            <param name="name">Name</param>
            <param name="id">ID</param>
            <param name="refType">Reference type</param>
            <param name="description">Description</param>
            <param name="rdDataTable">Read data from datatable</param>
            <param name="columnName">Column name in table of the database</param>
        </member>
        <member name="M:T.TSystem.IDAttribute.#ctor(System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.String,System.String)">
            <summary>
            Construct the instance
            </summary>
            <param name="name">Name</param>
            <param name="id">ID</param>
            <param name="refType">Reference type</param>
            <param name="description">Description</param>
            <param name="rdDataTable">Read data from datatable</param>
            <param name="domain">Domain</param>
            <param name="columnName">Column name in table of the database</param>
            <param name="array">Array</param>
        </member>
        <member name="M:T.TSystem.IDAttribute.#ctor(System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="name">Name</param>
            <param name="id">ID</param>
            <param name="refType">Reference type</param>
            <param name="description">Description</param>
            <param name="rdDataTable">Read data from datatable</param>
            <param name="domain">Domain</param>
            <param name="columnName">Column name in table of the database</param>
            <param name="array">Array</param>
            <param name="isEditorBrowsableTagDynamic">Flag Is EditorBrowsable for Tag Dynamic</param>
        </member>
        <member name="T:T.TSystem.ObjTypeInfo">
            <summary>
            Define information about a specified Object Type
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTypeInfo.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTypeInfo.FlagToken">
            <summary>
            Flag indicating if Object Type can be token
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTypeInfo.AssemblyName">
            <summary>
            Assembly name
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTypeInfo.TableName">
            <summary>
            Table name
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTypeInfo.ParentID">
            <summary>
            Parent ID
            </summary>
        </member>
        <member name="M:T.TSystem.ObjTypeInfo.#ctor(T.TSystem.eObjType,System.Boolean,System.String,System.String,T.TSystem.eObjType,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="id">ID</param>
            <param name="flagToken">Flag indicating if Object Type can be token</param>
            <param name="assemblyName">Assembly name</param>
            <param name="tableName">Table name</param>
            <param name="parentId">parentID</param>
        </member>
        <member name="T:T.TSystem.ObjectTypes">
            <summary>
            Define information about Object Types
            </summary>
        </member>
        <member name="F:T.TSystem.ObjectTypes.Table">
            <summary>
            Table with definition about Object Types
            </summary>
        </member>
        <member name="M:T.TSystem.ObjectTypes.Item(T.TSystem.eObjType)">
            <summary>
            Get item of the ObjectTypes Table based to enum eObjType
            </summary>
            <param name="objType">Enum eObjType</param>
            <returns>Index of the ObjectTypes Table</returns>
        </member>
        <member name="M:T.TSystem.ObjectTypes.TableName(T.TSystem.eObjType)">
            <summary>
            Get table name based to enum eObjType
            </summary>
            <param name="objType">Enum eObjType</param>
            <returns>Table name</returns>
        </member>
        <member name="M:T.TSystem.ObjectTypes.TableName(System.Data.DataSet,System.Int32,System.Boolean)">
            <summary>
            Get table name based to enum eObjType
            </summary>
            <param name="types">Reference to types</param>
            <param name="objType">Type</param>
            <returns>Table name</returns>
        </member>
        <member name="M:T.TSystem.ObjectTypes.AssemblyName(System.Int32)">
            <summary>
            Get assembly name based to enum eObjType
            </summary>
            <param name="objType">Type</param>
            <returns>Returns assembly name if 'objType' is a from Assembly else null</returns>
        </member>
        <member name="M:T.TSystem.ObjectTypes.TableName(System.Data.DataSet,System.String)">
            <summary>
            Get table name based to objTypeName
            </summary>
            <param name="typesDataSet">Reference to typesDataSet</param>
            <param name="objTypeName">Name of objType</param>
            <returns>Table name</returns>
        </member>
        <member name="M:T.TSystem.ObjectTypes.TableIndex(System.Data.DataSet,System.String)">
            <summary>
            Get table index based to objTypeName
            </summary>
            <param name="typesDataSet">Reference to typesDataSet</param>
            <param name="objTypeName">Name of objType</param>
            <returns>Index of table</returns>
        </member>
        <member name="M:T.TSystem.ObjectTypes.TableType(System.String)">
            <summary>
            Get table index based to tableName
            </summary>
            <param name="tableName">Table name</param>
            <returns>Index of table</returns>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetObjType(System.String)">
            <summary>
            Get enum eObjType based to table name
            </summary>
            <param name="tableName">Table name</param>
            <returns>Enum eObjType</returns>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetMembers(System.Data.DataTable,T.TSystem.eSearchFilter)">
            <summary>
            Get members of a type
            </summary>
            <param name="type">Reference to table of a type</param>
            <param name="filter">A bitmask comprised of one or more eSearchFilter that specify how the search is conducted</param>
            <returns>An array of DataRow objects representing all the members of the current 'type', or an empty array of type DataRow, if the current 'type' does not have members</returns>
            <exception cref="T:System.ArgumentNullException">Type cannot be null</exception>
            <exception cref="T:System.ArgumentException">Invalid type</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetMembers(System.Data.DataTable)">
            <summary>
            Get members of a type
            </summary>
            <param name="type">Reference to table of a type</param>
            <returns>An array of DataRow objects representing all the members of the current 'type', or an empty array of type DataRow, if the current 'type' does not have members</returns>
            <exception cref="T:System.ArgumentNullException">Type cannot be null</exception>
            <exception cref="T:System.ArgumentException">Invalid type</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetProperties(System.Data.DataTable)">
            <summary>
            Get properties of a type
            </summary>
            <param name="type">Reference to table of a type</param>
            <returns>An array of DataRow objects representing all the properties of the current 'type', or an empty array of type DataRow, if the current 'type' does not have properties</returns>
            <exception cref="T:System.ArgumentNullException">Type cannot be null</exception>
            <exception cref="T:System.ArgumentException">Invalid type</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetPropertiesCount(System.Data.DataTable)">
            <summary>
            Get number of properties of a type
            </summary>
            <param name="type">Reference to table of a type</param>
            <returns>An array of DataRow objects representing all the properties of the current 'type', or an empty array of type DataRow, if the current 'type' does not have properties</returns>
            <exception cref="T:System.ArgumentNullException">Type cannot be null</exception>
            <exception cref="T:System.ArgumentException">Invalid type</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetProperties(System.Data.DataTable,T.TSystem.eSearchFilter)">
            <summary>
            Get properties of a type
            </summary>
            <param name="type">Reference to table of a type</param>
            <param name="filter">A bitmask comprised of one or more eSearchFilter that specify how the search is conducted</param>
            <returns>An array of DataRow objects representing all the properties of the current 'type', or an empty array of type DataRow, if the current 'type' does not have properties</returns>
            <exception cref="T:System.ArgumentNullException">Type cannot be null</exception>
            <exception cref="T:System.ArgumentException">Invalid type</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetMethods(System.Data.DataTable)">
            <summary>
            Get methods of a type
            </summary>
            <param name="type">Reference to table of a type</param>
            <returns>An array of DataRow objects representing all the methods of the current 'type', or an empty array of type DataRow, if the current 'type' does not have methods</returns>
            <exception cref="T:System.ArgumentNullException">Type cannot be null</exception>
            <exception cref="T:System.ArgumentException">Invalid type</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetMethods(System.Data.DataTable,T.TSystem.eSearchFilter)">
            <summary>
            Get methods of a type
            </summary>
            <param name="type">Reference to table of a type</param>
            <param name="filter">A bitmask comprised of one or more eSearchFilter that specify how the search is conducted</param>
            <returns>An array of DataRow objects representing all the methods of the current 'type', or an empty array of type DataRow, if the current 'type' does not have methods</returns>
            <exception cref="T:System.ArgumentNullException">Type cannot be null</exception>
            <exception cref="T:System.ArgumentException">Invalid type</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetEvents(System.Data.DataTable)">
            <summary>
            Get events of a type
            </summary>
            <param name="type">Reference to table of a type</param>
            <returns>An array of DataRow objects representing all the events of the current 'type', or an empty array of type DataRow, if the current 'type' does not have events</returns>
            <exception cref="T:System.ArgumentNullException">Type cannot be null</exception>
            <exception cref="T:System.ArgumentException">Invalid type</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetEvents(System.Data.DataTable,T.TSystem.eSearchFilter)">
            <summary>
            Get events of a type
            </summary>
            <param name="type">Reference to table of a type</param>
            <param name="filter">A bitmask comprised of one or more eSearchFilter that specify how the search is conducted</param>
            <returns>An array of DataRow objects representing all the events of the current 'type', or an empty array of type DataRow, if the current 'type' does not have events</returns>
            <exception cref="T:System.ArgumentNullException">Type cannot be null</exception>
            <exception cref="T:System.ArgumentException">Invalid type</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetMember(System.String,System.Data.DataTable)">
            <summary>
            Get member of a type
            </summary>
            <param name="name">Member name</param>
            <param name="type">Reference to table of a type</param>
            <returns>If found then returns DataRow object of the member, else null (not found)</returns>
            <exception cref="T:System.ArgumentNullException">Name and type cannot be null</exception>
            <exception cref="T:System.ArgumentException">Invalid type</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetMember(System.String,System.Data.DataTable,T.TSystem.eSearchFilter)">
            <summary>
            Get member of a type
            </summary>
            <param name="name">Member name</param>
            <param name="type">Reference to table of a type</param>
            <param name="filter">A bitmask comprised of one or more eSearchFilter that specify how the search is conducted</param>
            <returns>If found then returns DataRow object of the member, else null (not found)</returns>
            <exception cref="T:System.ArgumentNullException">Name and type cannot be null</exception>
            <exception cref="T:System.ArgumentException">Invalid type</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetMemberIndex(System.String,System.Data.DataTable)">
            <summary>
            Get index of the member of a type
            </summary>
            <param name="name">Member name</param>
            <param name="type">Reference to table of a type</param>
            <returns>If found then returns index of the member (zero-based index), else -1 (not found)</returns>
            <exception cref="T:System.ArgumentNullException">Name and type cannot be null</exception>
            <exception cref="T:System.ArgumentException">Invalid type</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetMemberIndex(System.String,System.Data.DataTable,T.TSystem.eSearchFilter)">
            <summary>
            Get index of the member of a type
            </summary>
            <param name="name">Member name</param>
            <param name="type">Reference to table of a type</param>
            <param name="filter">A bitmask comprised of one or more eSearchFilter that specify how the search is conducted</param>
            <returns>If found then returns index of the member (zero-based index), else -1 (not found)</returns>
            <exception cref="T:System.ArgumentNullException">Name and type cannot be null</exception>
            <exception cref="T:System.ArgumentException">Invalid type</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetValueOfObject``1(System.Data.DataSet,System.Int32,System.Int32,T.TSystem.eObjTypeProperty)">
            <summary>
            Get objType of the runtime object
            </summary>
            <param name="typesDataSet">Reference to typesDataSet DataSet</param>
            <param name="type">Object type</param>
            <param name="id">ID of the runtime object</param>
            <returns>Reference to row</returns>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetType(System.Data.DataSet,T.TSystem.eDomain,System.String,System.Int32@)">
            <summary>
            Get type of an object name
            </summary>
            <param name="typesDataSet">Reference to typesDataSet DataSet</param>
            <param name="domain">Domain</param>
            <param name="objectName">Object name</param>
            <param name="refType">If type if Reference then this parameter returns type of reference</param>
            <returns>Type or -1 if object name does not exist</returns>
            <exception cref="T:System.ArgumentNullException">Types cannot be null</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetTypeCode(System.Data.DataSet,T.TSystem.eDomain,System.String)">
            <summary>
            Get type code of an object name
            </summary>
            <param name="typesDataSet">Reference to typesDataSet DataSet</param>
            <param name="domain">Domain</param>
            <param name="objectName">Object name</param>
            <returns>Flag indicating whether object is a number</returns>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetDataSetMembersAsDataRow(System.Data.DataSet,System.Data.DataSet,System.String,T.TSystem.TEditInfo)">
            <summary>
            Get members from a object name
            </summary>
            <param name="types">Reference to types DataSet</param>
            <param name="scriptClasses">Reference to user classes DataSet</param>
            <param name="name">Object name</param>
            <returns>List of members</returns>
            <exception cref="T:System.ArgumentNullException">Types cannot be null</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetDataSetMembers(System.Data.DataSet,System.Data.DataSet,System.String,T.TSystem.TEditInfo)">
            <summary>
            Get members from a object name
            </summary>
            <param name="types">Reference to types DataSet</param>
            <param name="scriptClasses">Reference to user classes DataSet</param>
            <param name="name">Object name</param>
            <exception cref="T:System.ArgumentNullException">Types cannot be null</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetTagChildrenAsDataRow(System.Data.DataSet,T.TSystem.eDomain,System.String)">
            <summary>
            Get members from a tag name
            </summary>
            <param name="types">Reference to types DataSet</param>
            <param name="domain">Domain</param>
            <param name="flagClient">Flag indicating whether module compiling is client</param>
            <param name="name">Object name</param>
            <returns>List of members</returns>
            <exception cref="T:System.ArgumentNullException">Types cannot be null</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetTagChildren(System.Data.DataSet,T.TSystem.eDomain,System.String)">
            <summary>
            Get members from a tag name
            </summary>
            <param name="typesDataSet">Reference to typesDataSet DataSet</param>
            <param name="domain">Domain</param>
            <param name="name">Object name</param>
            <returns>List of members</returns>
            <exception cref="T:System.ArgumentNullException">Types cannot be null</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.HasAnyTagProvider(System.Data.DataSet)">
            <summary>
            Check if exist any TagProvider Source configured
            </summary>
            <param name="types">Reference to typesDataSet DataSet</param>
            <returns>Flag success</returns>
            <exception cref="T:System.ArgumentNullException">Types cannot be null</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.IsTagProvider(System.Data.DataSet,System.String)">
            <summary>
            Check if name is Tag Provider
            </summary>
            <param name="types">Reference to typesDataSet DataSet</param>
            <param name="tagProviderName">TagProvider Source name</param>
            <returns>List of connectors</returns>
            <exception cref="T:System.ArgumentNullException">Types cannot be null</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetTagProviders(System.Data.DataSet)">
            <summary>
            Get name of TagProvider Source
            </summary>
            <param name="types">Reference to typesDataSet DataSet</param>
            <returns>List of connectors</returns>
            <exception cref="T:System.ArgumentNullException">Types cannot be null</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.GetSeparatorsOfTagProvider(System.Data.DataSet,System.String,System.String@,System.String@)">
            <summary>
            Get name of TagProvider Source
            </summary>
            <param name="types">Reference to typesDataSet DataSet</param>
            <param name="tagProviderName">TagProvider Source name</param>
            <param name="branchSeparator">Branch separator</param>
            <param name="attributeSeparator">Attribute separator</param>
            <returns>Flag success</returns>
            <exception cref="T:System.ArgumentNullException">Types cannot be null</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.ReplaceTagProviderToOtherTagProvider(System.Data.DataSet,System.String,System.String)">
            <summary>
            Replace full asset name from a TagProvider to other TagProvider
            </summary>
            <param name="types">Reference to typesDataSet DataSet</param>
            <param name="sourceFullAssetName">Full aseet name</param>
            <param name="targetExternalTagsName">TagProvider name</param>
            <returns></returns>
        </member>
        <member name="M:T.TSystem.ObjectTypes.ReplaceTagProviderToOtherTagProvider(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Replace asset name from a tagProvider to other tagProvider
            </summary>
            <param name="assetName">Asset name</param>
            <param name="sourceBranchSeparator">Source branch separator</param>
            <param name="sourceAttributeSeparator">Source attribute separator</param>
            <param name="targetBranchSeparator">Target branch separator</param>
            <param name="targetAttributeSeparator">Target attribute separator</param>
            <returns></returns>
        </member>
        <member name="M:T.TSystem.ObjectTypes.VerifyIsArrayBase(System.Data.DataSet,System.String,T.TSystem.TEditInfo)">
            <summary>
            Verify is ArrayBase
            </summary>
            <param name="types">Reference to types DataSet</param>
            <param name="name">Object name</param>
            <param name="Info">Reference to allowed information</param>
            <returns>Validation error</returns>
            <exception cref="T:System.ArgumentNullException">Types and name cannot be null</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.VerifyObjectName(System.Data.DataSet,System.String,T.TSystem.TEditInfo)">
            <summary>
            Verify object name
            </summary>
            <param name="types">Reference to types DataSet</param>
            <param name="name">Object name</param>
            <param name="Info">Reference to allowed information</param>
            <returns>Validation error</returns>
            <exception cref="T:System.ArgumentNullException">Types and name cannot be null</exception>
        </member>
        <member name="M:T.TSystem.ObjectTypes.VerifyMethodName(System.Data.DataSet,System.Data.DataSet,System.String,T.TSystem.TEditInfo)">
            <summary>
            Verify method name
            </summary>
            <param name="types">Reference to types DataSet</param>
            <param name="name">Method name</param>
            <param name="Info">Reference to allowed information</param>
            <returns>Validation error</returns>
            <exception cref="T:System.ArgumentNullException">Types and name cannot be null</exception>
        </member>
        <member name="T:T.TSystem.ObjToken">
            <summary>
            ObjToken: Reference of the object in database
            </summary>
        </member>
        <member name="F:T.TSystem.ObjToken.firstNode">
            <summary>
            Firs node of the ObjToken in database
            </summary>
        </member>
        <member name="F:T.TSystem.ObjToken.isBracketForArray">
            <summary>
            Flag indicating whether bracket ('[') is used to array or parentheses ('(')
            </summary>
        </member>
        <member name="F:T.TSystem.ObjToken.isFirstLevelAutoAdded">
            <summary>
            Flag indicating whether first level was auto added
            </summary>
        </member>
        <member name="F:T.TSystem.ObjToken.isLastLevelValueAutoAdded">
            <summary>
            Flag indicating whether last level 'Value' was auto added
            </summary>
        </member>
        <member name="F:T.TSystem.ObjToken.IsRefInternalDynamic">
            <summary>
            Flag indicating whether pointer to internal tags
            </summary>
        </member>
        <member name="F:T.TSystem.ObjToken.assetName">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:T.TSystem.ObjToken.IsBracketForArray">
            <summary>
            Get reference to typesDataSet
            </summary>
            <summary>
            Get and set flag indicating whether bracket ('[') is used to array or parentheses ('(')
            </summary>
        </member>
        <member name="P:T.TSystem.ObjToken.IsFirstLevelAutoAdded">
            <summary>
            Get and set flag indicating whether first level was auto added
            </summary>
        </member>
        <member name="P:T.TSystem.ObjToken.IsLastLevelValueAutoAdded">
            <summary>
            Get and set flag indicating whether last level 'Value' was auto added
            </summary>
        </member>
        <member name="P:T.TSystem.ObjToken.FirstNode">
            <summary>
            Get and set first node of the database
            </summary>
        </member>
        <member name="P:T.TSystem.ObjToken.LastNode">
            <summary>
            Get last node
            </summary>
        </member>
        <member name="P:T.TSystem.ObjToken.LastType">
            <summary>
            Get type of last node
            </summary>
        </member>
        <member name="P:T.TSystem.ObjToken.LastIndex">
            <summary>
            Get index of last node
            </summary>
        </member>
        <member name="P:T.TSystem.ObjToken.Parent">
            <summary>
            Get reference to the previous ObjToken.
            </summary>
        </member>
        <member name="P:T.TSystem.ObjToken.AssetName">
            <summary>
            Gets asset name
            </summary>
        </member>
        <member name="M:T.TSystem.ObjToken.#ctor">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.TSystem.ObjToken.#ctor(T.TSystem.ObjTokenNode)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="firstNode">Reference first node</param>
        </member>
        <member name="M:T.TSystem.ObjToken.#ctor(T.TSystem.ObjToken)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="source">Reference to source</param>
        </member>
        <member name="M:T.TSystem.ObjToken.GetType(System.Data.DataSet)">
            <summary>
            Get type
            </summary>
            <param name="types">Reference to types</param>
        </member>
        <member name="M:T.TSystem.ObjToken.GetTypeString(System.Data.DataSet)">
            <summary>
            Get type name
            </summary>
            <param name="types">Reference to types</param>
        </member>
        <member name="M:T.TSystem.ObjToken.GetFullTypeString(System.Data.DataSet)">
            <summary>
            Get full type name
            </summary>
            <param name="types">Reference to types</param>
        </member>
        <member name="M:T.TSystem.ObjToken.GetDescription(System.Data.DataSet)">
            <summary>
            Get description
            </summary>
            <param name="types">Reference to types</param>
        </member>
        <member name="M:T.TSystem.ObjToken.IsArray(System.Data.DataSet)">
            <summary>
            Get flag indicating whether is referencing to array;
            </summary>
            <param name="types">Reference to types</param>
        </member>
        <member name="M:T.TSystem.ObjToken.IsArrayBase(System.Data.DataSet)">
            <summary>
            Get flag indicating whether is referencing to array base (not indexed);
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:T.TSystem.ObjToken.GetDimensions(System.Data.DataSet)">
            <summary>
            Get flag indicating whether is referencing to array;
            </summary>
            <param name="types">Reference to types</param>
        </member>
        <member name="M:T.TSystem.ObjToken.IsValid">
            <summary>
            Check if the instance of the class is valid
            </summary>
            <returns>If the instance is valid</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.IsFullValid(System.Data.DataSet)">
            <summary>
            Check if full instance of the class is valid
            </summary>
            <param name="types">Reference to types</param>
            <returns>If the instance is valid</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.ToString">
            <summary>
            Converts the objType of each element to string representation.
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.ToString(System.Boolean)">
            <summary>
            Converts the objType of each element to string representation.
            </summary>
            <param name="addDefaultValue">Flag indicating whether should add 'defaultValue' token</param>
            <returns>String representation</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.ToString(System.Boolean,System.Boolean)">
            <summary>
            Converts the objType of each element to string representation.
            </summary>
            <param name="addDefaultValue">Flag indicating whether should add 'Value' token</param>
            <param name="alwaysAddFirstLevel">Flag indicating whether always should add first node token</param>
            <returns>String representation</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.Parse(System.Data.DataSet,System.String,System.Boolean)">
            <summary>
            Converts the specified string representation of a objType to its ObjToken equivalent
            </summary>
            <param name="types">Reference to types</param>
            <param name="value">A string containing the token. </param>
            <param name="valid">Check if value is valid. </param>
            <returns>ObjToken object</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.Parse(System.Data.DataSet,System.String,System.Int32@,System.Boolean)">
            <summary>
            Converts the specified string representation of a objType to its ObjToken equivalent
            </summary>
            <param name="types">Reference to types</param>
            <param name="value">A string containing the token. </param>
            <param name="valid">Check if value is valid. </param>
            <param name="startIndex">Start index. </param>
            <returns>ObjToken object</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.GetPropertyValue``1(System.Data.DataSet,T.TSystem.eObjTypeProperty)">
            <summary>
            Get property objType
            </summary>
            <typeparam name="T">Type of property</typeparam>
            <param name="types">Reference to types</param>
            <param name="property">Property to get</param>
            <returns>Property objType</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.GetObjectName(System.Data.DataSet)">
            <summary>
            Get full object name
            </summary>
            <param name="types">Reference to types</param>
            <returns>Object name</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.GetObjectName(System.Data.DataSet,System.Boolean)">
            <summary>
            Get full or partial object name
            </summary>
            <param name="types">Reference to types</param>
            <param name="fullName">Flag indicating whether full name should be returned</param>
            <returns>Object name</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.GetObjectName(System.Data.DataSet,System.Boolean,System.Boolean)">
            <summary>
            Get full or partial object name
            </summary>
            <param name="types">Reference to types</param>
            <param name="fullName">Flag indicating whether full name should be returned</param>
            <param name="preferAssetIfExist">Flag indicating whether asset syntax name should be returned if exist</param>
            <returns>Object name</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.GetLastNodeInfo(System.Data.DataSet)">
            <summary>
            Get row of last node info
            </summary>
            <param name="types">Reference to types</param>
            <returns>Reference to row</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.GetLastNodeInfo(System.Data.DataTable,T.TSystem.ObjTokenNode)">
            <summary>
            Get row of last node info
            </summary>
            <param name="typeInfo">Reference to type</param>
            <param name="parentNode">Parent node</param>
            <returns>Reference to row</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.HasOtherObjects(System.Data.DataSet)">
            <summary>
            Check if other objects are configured in this instance
            </summary>
            <param name="types">Reference to types</param>
            <returns>Flas indicating yes (true) or no (false)</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.GetAssetVisibility(System.Data.DataSet)">
            <summary>
            Gets visibility if instance is an asset
            </summary>
        </member>
        <member name="M:T.TSystem.ObjToken.HasObjectsIndex(System.Data.DataSet)">
            <summary>
            Check if other objects are configured in arrays of this instance
            </summary>
            <param name="types">Reference to types</param>
            <returns>Flas indicating yes (true) or no (false)</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.HasObjectsReference(System.Data.DataSet)">
            <summary>
            Check if Reference objects are configured in this instance
            </summary>
            <param name="types">Reference to types</param>
            <returns>Flas indicating yes (true) or no (false)</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.HasObjectsReferenceOnlyForTagTypes(System.Data.DataSet)">
            <summary>
            Check if Reference objects only for Tag Types are configured in this instance
            </summary>
            <param name="types">Reference to types</param>
            <returns>Flas indicating yes (true) or no (false)</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.HasAnyObjectOfDomain(System.Data.DataSet,T.TSystem.eDomain)">
            <summary>
            Check if a domain is configured in any object of this instance
            </summary>
            <param name="types">Reference to types</param>
            <param name="domain">Domain</param>
            <returns>Flas indicating yes (true) or no (false)</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.GetMainObject">
            <summary>
            Get main object, such as : @1:0.@0:1
            </summary>
            <returns>String containg main object</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.ReplaceMainObject(System.Data.DataSet,System.String)">
            <summary>
            Replace main object with new object
            </summary>
            <param name="types">Reference to types</param>
            <param name="newObject">String containg new object</param>
            <returns>If success then new ObjToken reference else null</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.GetFirstNumericalIndex">
            <summary>
            Get first numerical index, such as : 1,2 (tag.tag1[1,2]
            </summary>
            <returns>String containg first numerical index</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.ReplaceFirstNumericalIndex(System.Data.DataSet,System.String)">
            <summary>
            Replace first numerical index with new indexes
            </summary>
            <param name="types">Reference to types</param>
            <param name="newIndexes">String containg new indexes</param>
            <returns>If success then new ObjToken reference else null</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.ToArrayNodes">
            <summary>
            Returns list containg all nodes
            </summary>
            <returns>List containg all nodes</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.GetNextArray(System.Data.DataSet,System.Int32[],System.Int32[])">
            <summary>
            Get next ObjToken increasing the arrayindex
            </summary>
        </member>
        <member name="M:T.TSystem.ObjToken.GetLastNodeNextArray(System.Data.DataSet,System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Get next ObjToken increasing the arrayindex
            </summary>
        </member>
        <member name="M:T.TSystem.ObjToken.GetObjToken(System.Data.DataSet,T.TSystem.ePredefinedTagObjID)">
            <summary>
            Get reference to object token
            </summary>
            <param name="types"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:T.TSystem.ObjToken.Equals(T.TSystem.ObjToken)">
            <summary>
            Indicate whether the current object is equal to another object of the same type.
            </summary>
            <param name="objToken">Reference to the object in database</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.Equals(System.Object)">
            <summary>
            Indicate whether the current object is equal to another object of the same type.
            </summary>
            <param name="o">Object to compare</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.GetHashCode">
            <summary>
            Return a hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.op_Equality(T.TSystem.ObjToken,T.TSystem.ObjToken)">
            <summary>
            Indicate whether ObjToken´s are equals.
            </summary>
            <param name="objToken1">First ObjToken</param>
            <param name="objToken2">Second ObjToken</param>
            <returns>true if ObjToken´s are equals; otherwise, false.</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.op_Inequality(T.TSystem.ObjToken,T.TSystem.ObjToken)">
            <summary>
            Indicate whether ObjToken´s are different.
            </summary>
            <param name="objToken1">First ObjToken</param>
            <param name="objToken2">Second ObjToken</param>
            <returns>true if ObjToken´s are different; otherwise, false.</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.GetObjTokenIndexes(System.Data.DataSet,System.String,System.Int32@)">
            <summary>
            Get array indexes
            </summary>
            <param name="typesDataSet">Reference to typesDataSet</param>
            <param name="str">String</param>
            <param name="index">Start index</param>
            <returns>Array containg references to array indexes</returns>
        </member>
        <member name="M:T.TSystem.ObjToken.GetObjTokenIndex(System.Data.DataSet,System.String,System.Int32@)">
            <summary>
            Get array index
            </summary>
            <param name="typesDataSet">Reference to typesDataSet</param>
            <param name="str">String</param>
            <param name="index">Start index</param>
            <returns>Reference to array index</returns>
        </member>
        <member name="T:T.TSystem.ObjTokenIndex">
            <summary>
            ObjTokenIndex: Numeric or object array index
            </summary>
        </member>
        <member name="T:T.TSystem.ObjTokenIndex.IndexType">
            <summary>
            Index type: Number (Numeric) or ObjToken (Object)
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTokenIndex.indexType">
            <summary>
            Index type
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTokenIndex.indexNumber">
            <summary>
            Index number
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTokenIndex.indexToken">
            <summary>
            Index object
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTokenIndex.multiplier">
            <summary>
            Multiplier factor of the array index
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTokenIndex.offset">
            <summary>
            Offset of the array index
            </summary>
        </member>
        <member name="P:T.TSystem.ObjTokenIndex.Type">
            <summary>
            Get index type
            </summary>
        </member>
        <member name="P:T.TSystem.ObjTokenIndex.IndexNumber">
            <summary>
            Get index number
            </summary>
        </member>
        <member name="P:T.TSystem.ObjTokenIndex.IndexToken">
            <summary>
            Get index object
            </summary>
        </member>
        <member name="P:T.TSystem.ObjTokenIndex.Multiplier">
            <summary>
            Get multiplier factor of the array index
            </summary>
        </member>
        <member name="P:T.TSystem.ObjTokenIndex.Offset">
            <summary>
            Get offset of the array index
            </summary>
        </member>
        <member name="M:T.TSystem.ObjTokenIndex.#ctor(System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="index">Numeric array index</param>
        </member>
        <member name="M:T.TSystem.ObjTokenIndex.#ctor(T.TSystem.ObjToken)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="index">Object array index</param>
        </member>
        <member name="M:T.TSystem.ObjTokenIndex.#ctor(T.TSystem.ObjToken,System.Int32,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="index">Object array index</param>
            <param name="multiplier">Multiplier factor of the array index</param>
            <param name="offset">Offset of the array index</param>
        </member>
        <member name="M:T.TSystem.ObjTokenIndex.#ctor(T.TSystem.ObjTokenIndex.IndexType,System.Int32,T.TSystem.ObjToken,System.Int32,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="indexType">Index type</param>
            <param name="indexNumber">Index number</param>
            <param name="indexToken">Index object</param>
            <param name="multiplier">Multiplier factor of the array index</param>
            <param name="offset">Offset of the array index</param>
        </member>
        <member name="M:T.TSystem.ObjTokenIndex.Init(T.TSystem.ObjTokenIndex.IndexType,System.Int32,T.TSystem.ObjToken,System.Int32,System.Int32)">
            <summary>
            Initialize the instance of this class
            </summary>
            <param name="indexType">Index type</param>
            <param name="indexNumber">Index number</param>
            <param name="indexToken">Index object</param>
            <param name="multiplier">Multiplier factor of the array index</param>
            <param name="offset">Offset of the array index</param>
        </member>
        <member name="M:T.TSystem.ObjTokenIndex.ToString(System.Boolean)">
            <summary>
            Converts the objType of each element to string representation.
            </summary>
            <param name="addDefaultValue">Flag indicating whether should add 'defaultValue' token</param>
            <returns>String representation</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenIndex.ToString">
            <summary>
            Converts the objType of each element to string representation.
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenIndex.Equals(T.TSystem.ObjTokenIndex)">
            <summary>
            Indicate whether the current object is equal to another object of the same type.
            </summary>
            <param name="objTokenIndex">Array index of the object in database</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="T:T.TSystem.ObjTokenNode">
            <summary>
            ObjTokenNode: Node (member index + array indexes) of the object in database
            Example: a[1].b.c[d] => a[1] = Node, b = Node, c[d] = Node
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTokenNode.index">
            <summary>
            Member index of the type
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTokenNode.typeIndexNumber">
            <summary>
            Index number of the type
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTokenNode.arrayIndex">
            <summary>
            Numeric or object array indexes(x, y, z, ...)
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTokenNode.next">
            <summary>
            Next node
            </summary>
        </member>
        <member name="P:T.TSystem.ObjTokenNode.Index">
            <summary>
            Get member index
            </summary>
        </member>
        <member name="P:T.TSystem.ObjTokenNode.TypeIndexNumber">
            <summary>
            Get and set index number of the type
            </summary>
        </member>
        <member name="P:T.TSystem.ObjTokenNode.ArrayIndex">
            <summary>
            Get numeric or object array indexes(x, y, z, ...)
            </summary>
        </member>
        <member name="P:T.TSystem.ObjTokenNode.Next">
            <summary>
            Get next node
            </summary>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.#ctor">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="typeIndexNumber">Index number of the type</param>
            <param name="index">Member index of a type</param>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.#ctor(System.Int32,System.Int32,T.TSystem.ObjTokenNode)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="typeIndexNumber">Index number of the type</param>
            <param name="index">Member index of the type</param>
            <param name="next">Next node</param>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.#ctor(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="typeIndexNumber">Index number of the type</param>
            <param name="index">Member index of a type</param>
            <param name="arrayIndex">Numeric array indexes(x, y, z, ...) </param>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.#ctor(System.Int32,System.Int32,T.TSystem.ObjTokenIndex[])">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="typeIndexNumber">Index number of the type</param>
            <param name="index">Member index of the type</param>
            <param name="arrayIndex">Numeric or object array indexes(x, y, z, ...) </param>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.#ctor(System.Int32,System.Int32,T.TSystem.ObjTokenIndex[],T.TSystem.ObjTokenNode)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="typeIndexNumber">Index number of the type</param>
            <param name="index">Member index of a type</param>
            <param name="arrayIndex">Numeric or object array indexes(x, y, z, ...) </param>
            <param name="next">Next node</param>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.#ctor(System.Int32,System.Int32,System.Int32[],T.TSystem.ObjTokenNode)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="typeIndexNumber">Index number of the type</param>
            <param name="index">Member index of the type</param>
            <param name="arrayIndex">Numeric array indexes(x, y, z, ...) </param>
            <param name="next">Next node</param>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.Init(System.Int32,System.Int32,System.Int32[],T.TSystem.ObjTokenNode)">
            <summary>
            Initialize the instance of this class
            </summary>
            <param name="typeIndexNumber">Index number of the type</param>
            <param name="index">Member index of the type</param>
            <param name="arrayIndex">Numeric array indexes(x, y, z, ...) </param>
            <param name="next">Next node</param>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.Init(System.Int32,System.Int32,T.TSystem.ObjTokenIndex[],T.TSystem.ObjTokenNode)">
            <summary>
            Initialize the instance of this class
            </summary>
            <param name="typeIndexNumber">Index number of the type</param>
            <param name="index">Member index of the type</param>
            <param name="arrayIndex">Numeric or object array indexes(x, y, z, ...) </param>
            <param name="next">Next node</param>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.ToString">
            <summary>
            Converts the node of each element to string representation.
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.ToString(System.Boolean,System.Boolean)">
            <summary>
            Converts the node of each element to string representation.
            </summary>
            <param name="isBracketForArray">Flag indicating whether bracket ('[') is used to array or parentheses ('(')</param>
            <param name="addDefaultValue">Flag indicating whether should add 'defaultValue' token</param>
            <returns>String representation</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.ToString(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Converts the node of each element to string representation.
            </summary>
            <param name="isBracketForArray">Flag indicating whether bracket ('[') is used to array or parentheses ('(')</param>
            <param name="addDefaultValue">Flag indicating whether should add 'defaultValue' token</param>
            <param name="continueInNextNodes">Flag indicating whether should convert also next nodes</param>
            <returns>String representation</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.GetObjectName(System.Data.DataTable)">
            <summary>
            Get object name
            </summary>
            <param name="typeInfo">Type info</param>
            <returns>Object name</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.GetObjectName(System.Data.DataTable,System.Boolean,System.Boolean)">
            <summary>
            Get object name
            </summary>
            <param name="typeInfo">Type info</param>
            <param name="isBracketForArray">Flag indicating whether bracket ('[') is used to array or parentheses ('(')</param>
            <param name="fullName">Flag indicating whether full name should be returned</param>
            <returns>Object name</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.Parse(System.Data.DataSet,System.String)">
            <summary>
            Converts the specified string representation of a objType to its ObjTokenNode equivalent
            </summary>
            <param name="types">Reference to types</param>
            <param name="objType">A string containing the objType to convert. </param>
            <returns>ObjTokenNode object</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.IsValid(System.Data.DataSet)">
            <summary>
            Check if this instance is valid
            </summary>
            <param name="types">Reference to types</param>
            <returns>If the instance is valid</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.HasOtherObjects(System.Data.DataSet)">
            <summary>
            Check if other objects are configured in this instance
            </summary>
            <param name="typesDataSet">Reference to typesDataSet</param>
            <returns>Flas indicating yes (true) or no (false)</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.HasObjectsIndex(System.Data.DataSet)">
            <summary>
            Check if other objects are configured in array of this instance
            </summary>
            <param name="typesDataSet">Reference to typesDataSet</param>
            <returns>Flas indicating yes (true) or no (false)</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.HasObjectsReference(System.Data.DataSet)">
            <summary>
            Check if Reference objects are configured in this instance
            </summary>
            <param name="typesDataSet">Reference to typesDataSet</param>
            <returns>Flas indicating yes (true) or no (false)</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.HasObjectsReferenceOnlyForTagTypes(System.Data.DataSet)">
            <summary>
            Check if Reference objects only for Tag Types are configured in this instance
            </summary>
            <param name="typesDataSet">Reference to typesDataSet</param>
            <returns>Flas indicating yes (true) or no (false)</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.HasAnyObjectOfDomain(System.Data.DataSet,T.TSystem.eDomain)">
            <summary>
            Check if a domain is configured in any object of this instance
            </summary>
            <param name="typesDataSet">Reference to typesDataSet</param>
            <param name="domain">Domain</param>
            <returns>Flas indicating yes (true) or no (false)</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.Equals(T.TSystem.ObjTokenNode)">
            <summary>
            Indicate whether the current object is equal to another object of the same type.
            </summary>
            <param name="objTokenNode">Node of object in database</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.Equals(System.Object)">
            <summary>
            Indicate whether the current object is equal to another object of the same type.
            </summary>
            <param name="o">Object to compare</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.GetHashCode">
            <summary>
            Return a hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.op_Equality(T.TSystem.ObjTokenNode,T.TSystem.ObjTokenNode)">
            <summary>
            Indicate whether ObjTokenNode´s are equals.
            </summary>
            <param name="objTokenNode1">First ObjTokenNode</param>
            <param name="objTokenNode2">Second ObjTokenNode</param>
            <returns>true if ObjTokenNode´s are equals; otherwise, false.</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNode.op_Inequality(T.TSystem.ObjTokenNode,T.TSystem.ObjTokenNode)">
            <summary>
            Indicate whether ObjTokenNode´s are different.
            </summary>
            <param name="objTokenNode1">First ObjTokenNode</param>
            <param name="objTokenNode2">Second ObjTokenNode</param>
            <returns>true if ObjTokenNode´s are different; otherwise, false.</returns>
        </member>
        <member name="F:T.TSystem.ObjTokenCompiler.searchFilter">
            <summary>
            Filter to search members
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTokenCompiler.types">
            <summary>
            Reference to types
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTokenCompiler.objectIndicator">
            <summary>
            Object indicator
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTokenCompiler.typeSeparator">
            <summary>
            Type separator
            </summary>
        </member>
        <member name="F:T.TSystem.ObjTokenCompiler.propertySeparator">
            <summary>
            Property separator
            </summary>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.#ctor(System.Data.DataSet)">
            <summary>
            Construct the instance
            </summary>
            <param name="types">Reference to types</param>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.#ctor(System.Data.DataSet,T.TSystem.eDomain)">
            <summary>
            Construct the instance
            </summary>
            <param name="types">Reference to types</param>
            <param name="domain">Domain</param>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.#ctor(System.Data.DataSet,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="types">Reference to types</param>
            <param name="flagClient">Flag indicating whether module compiling is client</param>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.#ctor(System.Data.DataSet,System.String,System.String,System.String)">
            <summary>
            Construct the instance
            </summary>
            <param name="types">Reference to types</param>
            <param name="typeSeparator">Type separator</param>
            <param name="propertySeparator">Property separator</param>
            <param name="objectIndicator">Object indicator</param>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.#ctor(System.Data.DataSet,T.TSystem.eDomain,System.String,System.String,System.String)">
            <summary>
            Construct the instance
            </summary>
            <param name="types">Reference to types</param>
            <param name="domain">Domain</param>
            <param name="typeSeparator">Type separator</param>
            <param name="propertySeparator">Property separator</param>
            <param name="objectIndicator">Object indicator</param>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjToken(System.Data.DataSet,System.Boolean,System.String,System.Boolean,T.TSystem.ObjToken@,System.Int32@)">
            <summary>
            Returns the reference to the object in database
            </summary>
            <param name="types">Reference to types</param>
            <param name="domain">Domain</param>
            <param name="objectName">Object name</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <param name="objToken">Reference to object in database</param>
            <param name="index">Index of last position of 'objectName' parsed. It can be used to identify where an error occurred</param>
            <returns>Return result</returns>         
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjToken(System.String,System.Boolean)">
            <summary>
            Returns the reference to the object in database
            </summary>
            <param name="objectName">Object name</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>Reference to the object in database</returns>         
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjToken(System.Data.DataSet,T.TSystem.eDomain,System.String,System.Boolean)">
            <summary>
            Returns the reference to the object in database
            </summary>
            <param name="types">Reference to types</param>
            <param name="domain">Domain</param>
            <param name="objectName">Object name</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>Reference to the object in database</returns>         
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjToken(System.Data.DataSet,System.Boolean,System.String,System.Boolean)">
            <summary>
            Returns the reference to the object in database
            </summary>
            <param name="types">Reference to types</param>
            <param name="isClientDomain">Domain</param>
            <param name="objectName">Object name</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>Reference to the object in database</returns>         
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjTokenNodesFromName(System.Data.DataSet,System.String)">
            <summary>
            Get references to ObjTokenNode objects from an object name
            </summary>
            <param name="types">Reference to types</param>
            <param name="objectName">Object name</param>
            <returns>Array containg nodes used in name</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjTokensFromExpression(System.String,System.Boolean,System.Boolean)">
            <summary>
            Get references to ObjToken objects from an expression
            </summary>
            <param name="expression">Expression</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>Array containg references to ObjToken objects</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjTokensFromExpression(System.Data.DataSet,T.TSystem.eDomain,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get references to ObjToken objects from an expression
            </summary>
            <param name="types">Reference to types</param>
            <param name="domain">Domain</param>
            <param name="expression">Expression</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>Array containg references to ObjToken objects</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.ReplaceObjTokensOnExpression(System.String,T.TSystem.ObjToken[],T.TSystem.ObjToken[])">
            <summary>
            Get references to ObjToken objects from an expression
            </summary>
            <param name="expression">Expression</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>Array containg references to ObjToken objects</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.ReplaceObjTokensOnExpression(System.Data.DataSet,T.TSystem.eDomain,System.String,T.TSystem.ObjToken[],T.TSystem.ObjToken[])">
            <summary>
            Get references to ObjToken objects from an expression
            </summary>
            <param name="types">Reference to types</param>
            <param name="domain">Domain</param>
            <param name="expression">Expression</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>Array containg references to ObjToken objects</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjTokenNodesFromExpression(System.Data.DataSet,System.String,System.Boolean)">
            <summary>
            Get references to ObjTokenNode objects from an expression
            </summary>
            <param name="types">Reference to types</param>
            <param name="expression">Expression</param>
            <returns>Array containg nodes used in expression</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjTokensFromString(System.String,System.Boolean)">
            <summary>
            Get references to ObjToken objects from a string
            </summary>
            <param name="str">String</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>Array containg references to ObjToken objects</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjTokensFromString(System.Data.DataSet,T.TSystem.eDomain,System.String,System.Boolean)">
            <summary>
            Get references to ObjToken objects from a string
            </summary>
            <param name="types">Reference to types</param>
            <param name="domain">Domain</param>
            <param name="str">String</param>
            <param name="getValueMember">Flag indicating whether should get objType member when necessary</param>
            <returns>Array containg references to ObjToken objects</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjTokenNodesFromString(System.Data.DataSet,System.String)">
            <summary>
            Get references to ObjTokenNode objects from a string
            </summary>
            <param name="types">Reference to types</param>
            <param name="str">String</param>
            <returns>Array containg nodes used in a string</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjTokensFromScript(System.String)">
            <summary>
            Get references to ObjToken objects from script
            </summary>
            <param name="contents">Contents of script already tokenized</param>
            <returns>Array containg references to ObjToken objects</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjTokensFromScript(System.Data.DataSet,T.TSystem.eDomain,System.String)">
            <summary>
            Get references to ObjToken objects from script
            </summary>
            <param name="types">Reference to types</param>
            <param name="domain">Domain</param>
            <param name="contents">Contents of script already tokenized</param>
            <returns>Array containg references to ObjToken objects</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjTokenNodesFromScript(System.Data.DataSet,System.String)">
            <summary>
            Get references to ObjTokenNode objects from an script already tokenized previously
            </summary>
            <param name="types">Reference to types</param>
            <param name="str">String of the script</param>
            <returns>Array containg nodes used in each line</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjTokensFromXaml(System.String)">
            <summary>
            Get references to ObjToken objects from Xaml
            </summary>
            <param name="contents">Contents of script already tokenized</param>
            <returns>Array containg references to ObjToken objects</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjTokensFromXaml(System.Data.DataSet,T.TSystem.eDomain,System.String)">
            <summary>
            Get references to ObjToken objects from Xaml
            </summary>
            <param name="types">Reference to types</param>
            <param name="domain">Domain</param>
            <param name="contents">Contents of Xaml already tokenized</param>
            <returns>Array containg references to ObjToken objects</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjTokenNodesFromXaml(System.Data.DataSet,System.String)">
            <summary>
            Get references to ObjTokenNode objects from an Xaml already tokenized previously
            </summary>
            <param name="types">Reference to types</param>
            <param name="str">String of the Xaml</param>
            <returns>Array containg nodes used in each line</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetNearestObject(System.Data.DataSet,T.TSystem.eDomain,System.String,System.Int32)">
            <summary>
            Get nearest object of current position from expression
            </summary>
            <param name="types">Reference to types</param>
            <param name="domain">Domain</param>
            <param name="expression">Expression</param>
            <param name="position">Current position</param>
            <returns>If found returns string name else returns null</returns>         
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.FindObjToken(System.String,System.Int32@,T.TSystem.ObjToken@,System.Boolean)">
            <summary>
            Find object
            </summary>
            <param name="objectName">Object name</param>
            <param name="index">Start index to search</param>
            <param name="objToken">Reference to object</param>
            <param name="isExpression">Flag indicating whether finding in an expression</param>
            <returns>Return result</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.FindObjToken(System.String,System.Int32@,T.TSystem.ObjToken@,T.TSystem.ObjToken@,System.Boolean)">
            <summary>
            Find object
            </summary>
            <param name="objectName">Object name</param>
            <param name="index">Start index to search</param>
            <param name="objToken">Reference to object</param>
            <param name="nearestObjToken">Reference to nearest object</param>
            <param name="isExpression">Flag indicating whether finding in an expression</param>
            <returns>Return result</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjTokenIndexes(System.String,System.Int32@,T.TSystem.ObjTokenIndex[]@,T.TSystem.ObjToken@)">
            <summary>
            Get array indexes
            </summary>
            <param name="str">String</param>
            <param name="index">Start index</param>
            <param name="objTokenIndexes">Array containg references to array indexes</param>
            <param name="nearestObjToken">Reference to nearest object</param>
            <returns>Return result</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.GetObjTokenIndex(System.String,System.Int32@,T.TSystem.ObjTokenIndex@,T.TSystem.ObjToken@)">
            <summary>
            Get array index
            </summary>
            <param name="str">String</param>
            <param name="index">Start index</param>
            <param name="objTokenIndex">Reference to array index</param>
            <param name="nearestObjToken">Reference to nearest object</param>
            <returns>Return result</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.TokenizeObjectName(System.Data.DataSet,System.String)">
            <summary>
            Tokenize object name
            </summary>
            <param name="types">Reference to types</param>
            <param name="objectName">Object name</param>
            <returns>String containg object name tokenized</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.UntokenizeObjectName(System.Data.DataSet,System.String)">
            <summary>
            Untokenize object name
            </summary>
            <param name="types">Reference to types</param>
            <param name="nameWithTokens">String containg object name tokenized</param>
            <returns>String containg object name untokenized</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.TokenizeExpression(System.Data.DataSet,System.String)">
            <summary>
            Tokenize expression
            </summary>
            <param name="types">Reference to types</param>
            <param name="expression">String containg expression tokenized</param>
            <returns>String containg expression untokenized</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.UntokenizeExpression(System.Data.DataSet,System.String)">
            <summary>
            Untokenize expression
            </summary>
            <param name="types">Reference to types</param>
            <param name="expression">String containg expression tokenized</param>
            <returns>String containg expression untokenized</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.TokenizeString(System.String)">
            <summary>
            Tokenize string
            </summary>
            <param name="str">String</param>
            <returns>String containg string tokenized</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenCompiler.UntokenizeString(System.String)">
            <summary>
            Untokenize string
            </summary>
            <param name="str">String tokenized</param>
            <returns>String untokenized</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNodeUsed.Equals(T.TSystem.ObjTokenNodeUsed)">
            <summary>
            Indicate whether the current object is equal to another object of the same type.
            </summary>
            <param name="nodeUsed">Reference to the object in database</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNodeUsed.Equals(System.Object)">
            <summary>
            Indicate whether the current object is equal to another object of the same type.
            </summary>
            <param name="o">Object to compare</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNodeUsed.GetHashCode">
            <summary>
            Return a hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNodeUsed.op_Equality(T.TSystem.ObjTokenNodeUsed,T.TSystem.ObjTokenNodeUsed)">
            <summary>
            Indicate whether ObjTokenNodeUsed´s are equals.
            </summary>
            <param name="o1">First ObjTokenNodeUsed</param>
            <param name="o2">Second ObjTokenNodeUsed</param>
            <returns>true if ObjTokenNodeUsed´s are equals; otherwise, false.</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNodeUsed.op_Inequality(T.TSystem.ObjTokenNodeUsed,T.TSystem.ObjTokenNodeUsed)">
            <summary>
            Indicate whether ObjTokenNodeUsed´s are different.
            </summary>
            <param name="o1">First ObjTokenNodeUsed</param>
            <param name="o2">Second ObjTokenNodeUsed</param>
            <returns>true if ObjTokenNodeUsed´s are different; otherwise, false.</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNodeUsedPlusLocation.Equals(T.TSystem.ObjTokenNodeUsedPlusLocation)">
            <summary>
            Indicate whether the current object is equal to another object of the same type.
            </summary>
            <param name="nodeUsed">Reference to the object in database</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNodeUsedPlusLocation.Equals(System.Object)">
            <summary>
            Indicate whether the current object is equal to another object of the same type.
            </summary>
            <param name="o">Object to compare</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNodeUsedPlusLocation.GetHashCode">
            <summary>
            Return a hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNodeUsedPlusLocation.op_Equality(T.TSystem.ObjTokenNodeUsedPlusLocation,T.TSystem.ObjTokenNodeUsedPlusLocation)">
            <summary>
            Indicate whether ObjTokenNodeUsed´s are equals.
            </summary>
            <param name="o1">First ObjTokenNodeUsed</param>
            <param name="o2">Second ObjTokenNodeUsed</param>
            <returns>true if ObjTokenNodeUsed´s are equals; otherwise, false.</returns>
        </member>
        <member name="M:T.TSystem.ObjTokenNodeUsedPlusLocation.op_Inequality(T.TSystem.ObjTokenNodeUsedPlusLocation,T.TSystem.ObjTokenNodeUsedPlusLocation)">
            <summary>
            Indicate whether ObjTokenNodeUsed´s are different.
            </summary>
            <param name="o1">First ObjTokenNodeUsed</param>
            <param name="o2">Second ObjTokenNodeUsed</param>
            <returns>true if ObjTokenNodeUsed´s are different; otherwise, false.</returns>
        </member>
        <member name="M:T.TSystem.TAssets.IsAssetSyntax(System.String,System.String@)">
            <summary>
            Verify is string has Asset syntax
            </summary>
            <param name="str">String to verify</param>
            <param name="assetPath">Output containg string inside Asset</param>
            <returns>Flag success (true) or fail (false)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:T.TSystem.TAssets.IsAssetOrTagProviderSyntax(System.String)" -->
        <member name="M:T.TSystem.TAssets.ConvertAssetToTagName(System.String,System.Boolean)">
            <summary>
            Convert asset string to tag name (Tag or Internal Tag)
            </summary>
            <param name="str">String</param>
            <param name="autoIncludeBaseTagName"></param>
            <returns>Tag name</returns>
        </member>
        <member name="M:T.TSystem.TAssets.IsAssetFromTagProvider(System.String)">
            <summary>
            Verify if string is a Asset and from a TagProvider
            </summary>
            <param name="str">String to verify</param>
            <returns>Flag success (true) or fail (false)</returns>
        </member>
        <member name="M:T.TSystem.TAssets.IsAssetFromTagProvider(System.String,System.String@)">
            <summary>
            Verify if part of contents is a Asset and from a TagProvider
            </summary>
            <param name="content">Content</param>
            <param name="externalTag">[Output] External tag</param>
            <returns>Flag success (true) or fail (false)</returns>
        </member>
        <member name="M:T.TSystem.TAssets.IsAssetFromTagProvider(System.String,System.Int32@,System.String@)">
            <summary>
            Verify if part of contents is a Asset and from a TagProvider
            </summary>
            <param name="content">Content</param>
            <param name="index">tart index to verify</param>
            <param name="externalTag">[Output] External tag</param>
            <returns>Flag success (true) or fail (false)</returns>
        </member>
        <member name="M:T.TSystem.TAssets.IsAssetFromTagProvider(System.String,System.Int32@,System.String@,System.Boolean)">
            <summary>
            Verify if part of contents is a Asset and from a TagProvider
            </summary>
            <param name="content">Content</param>
            <param name="index">tart index to verify</param>
            <param name="assetPathOrExternalTag">[Output] Asset path ('resolvedAsset' = false or External tag ('resolvedAsset' = true)</param>
            <param name="resolvedAsset">If true then 'assetOrExternal' is an external tag else it is the asset path</param>
            <returns>Flag success (true) or fail (false)</returns>
        </member>
        <member name="M:T.TSystem.TAssets.GetTagProviderFromAsset(System.String)">
            <summary>
            Get name of Tag Provider
            </summary>
            <param name="asset">Asset</param>
            <returns>If success then returns name else empty string</returns>
        </member>
        <member name="M:T.TSystem.TAssets.GetAssetPathFromExternalTag(System.String)">
            <summary>
            Get asset path from a full asset containg external tag
            </summary>
            <param name="asset">Asset</param>
            <returns>If success then returns asset path else empty string</returns>
        </member>
        <member name="M:T.TSystem.TAssets.GetAssetPathFromExternalTag(System.String,System.Boolean)">
            <summary>
            Get asset path from a full asset containg external tag
            </summary>
            <param name="asset">Asset</param>
            <param name="resolvedAsset">If true then return is an external tag else return is the asset path</param>
            <returns>If success then returns string according to 'resolvedAsset' else empty string</returns>
        </member>
        <member name="M:T.TSystem.TAssets.GetResolvedAsset(System.String,System.Boolean@)">
            <summary>
            Get resolved asset
            </summary>
            <param name="asset">Asset</param>
            <param name="fromTagProvider">[Output] Flag indicating if asset is an external tag form TagProvider</param>
            <returns>If success then returns resolved asset else empty string</returns>
        </member>
        <member name="M:T.TSystem.TAssets.TryGetObjToken(System.String,System.Int32@)">
            <summary>
            Try get object
            </summary>
            <param name="content">Content</param>
            <param name="i">Startig index to verify</param>
            <returns>If success then returns reference to ObjToken else return null</returns>
        </member>
        <member name="M:T.TSystem.TAssets.SplitAssetWithWildcard(System.String,System.String@,System.String@)">
            <summary>
             Split assets 
            </summary>
            <param name="asset">Asset</param>
            <param name="initial">Initial string before '*'</param>
            <param name="final">Final string after '*'</param>
            <returns>Flag success (true) or fail (false)</returns>
        </member>
    </members>
</doc>
