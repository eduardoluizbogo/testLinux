<?xml version="1.0"?>
<doc>
    <assembly>
        <name>T.Modules</name>
    </assembly>
    <members>
        <member name="T:T.Modules.Alarm.ModuleAlarm">
            <summary>
            Class for Alarm operation.
            </summary>
        </member>
        <member name="T:T.Modules.Alarm.ModuleAlarm.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.Group">
            <summary>
            Provides access to AlarmGroup objects.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.Item">
            <summary>
            Provides access to AlarmItem objects.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.Area">
            <summary>
            Provides access to AlarmArea objects.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.GlobalSettings">
            <summary>
            Provides access to GlobalSettings objects.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.DisableSaveToDatabase">
            <summary>
            If true then alarms will not be stored in Dataset DB
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.IsNotifySync">
            <summary>
            Flag indicating whether notification method will be called immediately when alarm occurs.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.Restart">
            <summary>
            Flag to force an alarm module restart. A toggle on this flag to execute the operation.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.CurrentShift">
            <summary>
            Current alarm limit shift that select the limit that will be used.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.TotalCount">
            <summary>
            Get the number of Active Alarms.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.UnAckCount">
            <summary>
            Get the number of Unacknowledge Alarms.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.PriorityItem">
            <summary>
            Return the highest priority Alarm Item of an AlarmGroup.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.QueryActive">
            <summary>
            Current datatable with active alarm objects.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.BeepState">
            <summary>
            Flag to indicate the beep state. This flag can be changed to disable the beep.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.BeepValue">
            <summary>
            Flag to indicate the beep value.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.IsSecondaryActive">
            <summary>
            Flag the indicate the secondary alarm database status.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.AckAll">
            <summary>
            Acknowledge all alarm items that belong to this group.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.UserName">
            <summary>
            Current username that is related with alarm item.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.LastStoredTimeStamp">
            <summary>
            Timestamp when last alarm item was stored.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.LastStoredErrorMessage">
            <summary>
            Last error message when an alarm item was stored.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.LastErrorMessage">
            <summary>
            Gets the last error message for this Module
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.ActiveUnAckCount">
            <summary>
            Get the number of Unacknowledge Alarms.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.ErrorCount">
            <summary>
            Error count when storing alarm item
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.SuccessCount">
            <summary>
            Success count when storing alarm item
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.LastTickAdded">
            <summary>
            Timespamp tick of last alarm item store operation.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.LastHistoricID">
            <summary>
            ID of last alarm item stored.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.LastHistorianTimestampTicks">
            <summary>
            Timespamp tick of last alarm item stored.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.AckAllWithCommentsInternal">
            <summary>
            String comment used when AckAll with comment operation is executed.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.IsAlarmEventsInOverflow">
            <summary>
            ReadOnly flag to indicate alarm or event overflow.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.Redundancy">
            <summary>
            Provides access to Alarm Redundancy object.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.ModuleAlarm.StoreAndForward">
            <summary>
            Provides access to StoreAndForward object.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.ModuleAlarm.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.ModuleAlarm.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Alarm.ModuleAlarm.SetAckAllPropertyPassive(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set AckAll property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.ModuleAlarm.SaveToTextFile(System.DateTime,System.DateTime)">
            <summary>
            Save alarms to text file
            </summary>
            <param name="start">Star date time</param>
            <param name="end">End date time</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Alarm.ModuleAlarm.SaveToTextFile(System.String,System.String,System.String,System.Char,System.Boolean,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Save alarms to text file
            </summary>
            <param name="start">Start date time</param>
            <param name="end">End date time</param>
            <param name="outputFileName">File name</param>
            <param name="chSep">Char separator</param>
            <param name="addHeader">Flag indicating whether header must de added</param>
            <param name="precision">Double precision</param>
            <param name="ci">Culture info</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Alarm.ModuleAlarm.SaveToTextFile(System.String,System.String)">
            <summary>
            Save alarms to text file
            </summary>
            <param name="start">Star date time</param>
            <param name="end">End date time</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Alarm.ModuleAlarm.SaveToTextFile(System.DateTime,System.DateTime,System.String,System.Char,System.Boolean,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Save alarms to text file
            </summary>
            <param name="start">Start date time</param>
            <param name="end">End date time</param>
            <param name="outputFileName">File name</param>
            <param name="chSep">Char separator</param>
            <param name="addHeader">Flag indicating whether header must de added</param>
            <param name="precision">Double precision</param>
            <param name="ci">Culture info</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Alarm.ModuleAlarm.SaveToTextFile(System.DateTime,System.DateTime,System.String,System.String,System.Char,System.Boolean,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Save alarms to text file
            </summary>
            <param name="start">Start date time</param>
            <param name="end">End date time</param>
            <param name="groupName">Group name</param>
            <param name="outputFileName">File name</param>
            <param name="chSep">Char separator</param>
            <param name="addHeader">Flag indicating whether header must de added</param>
            <param name="precision">Double precision</param>
            <param name="ci">Culture info</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Alarm.ModuleAlarm.GetItemList(System.String)">
            <summary>
            Get list of alarm items related to tag
            </summary>
            <param name="objectName">Tag name</param>
            <returns>List containg alarm items</returns>
        </member>
        <member name="M:T.Modules.Alarm.ModuleAlarm.AckAllWithComments(System.String)">
            <summary>
            Ack all alarm items with comment
            </summary>
            <param name="comment">String containg comment</param>
            <returns>Always true</returns>
        </member>
        <member name="M:T.Modules.Alarm.ModuleAlarm.AckAllWithCommentsAsync(System.String,System.String,System.String)">
            <summary>
            Ack all alarm items with comment
            </summary>
            <param name="comment">String containg comment</param>
            <param name="user"> User name</param>
            <param name="pass">User password</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Alarm.ModuleAlarm.VerifyDBConnection">
            <summary>
            Verify and reopen Alarm database
            </summary>
            <returns>Always return zero</returns>
        </member>
        <member name="M:T.Modules.Alarm.ModuleAlarm.ForceAcknowledge(System.String[],System.DateTime[],System.String[],System.String[],System.String[],System.Int32[],System.String[],System.Boolean)">
            <summary>
            Force acknowledge of Alarm Item
            </summary>
            <param name="itemNames">Item Names</param>
            <param name="utcAckTimes">Ack Times in UTC</param>
            <param name="userNames">User names. Can be null or empty string</param>
            <param name="previousValues">Previous values</param>
            <param name="values">Values</param>
            <param name="qualities">Qualities</param>
            <param name="comments">Comments. Can be null or empty string</param>
            <param name="disableNotify">Flag to disable or not calling notification methods</param>
            <returns>Always return zero</returns>
        </member>
        <member name="T:T.Modules.Alarm.AlarmsAreas">
            <summary>
            Alarm Area list
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmsAreas.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmsAreas.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Alarm.AlarmArea">
            <summary>
            Alarm Area object
            </summary>
        </member>
        <member name="T:T.Modules.Alarm.AlarmArea.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.Id">
            <summary>
            Gets the ID of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.Name">
            <summary>
            Gets the Name of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.DisplayName">
            <summary>
            Gets the display name of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.ParentArea">
            <summary>
            Gets the ParentArea of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.Level">
            <summary>
            String with the configured levels of Alarm Area
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.Category">
            <summary>
            String with the configured category of Alarm Area
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.Description">
            <summary>
            Gets the Description of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.TotalCount">
            <summary>
            Gets the TotalCount of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.UnAckCount">
            <summary>
            Gets the UnAckCount of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.Disable">
            <summary>
            Gets the Disable of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.Suspend">
            <summary>
            Gets the Suspend of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.AckAll">
            <summary>
            Gets the AckAll of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.TotalCountLocal">
            <summary>
            Gets the TotalCountLocal of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.UnAckCountLocal">
            <summary>
            Gets the UnAckCountLocal of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.DisableLocal">
            <summary>
            Gets the DisableLocal of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.SuspendLocal">
            <summary>
            Gets the SuspendLocal of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.AckAllLocal">
            <summary>
            Gets the AckAllLocal of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.AlarmState">
            <summary>
            Gets the alarm state of an Alarm Area. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmArea.PriorityItem">
            <summary>
            Return the highest priority Alarm Item of an AlarmGroup.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmArea.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmArea.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmArea.GetChildrenAreasAsync(System.Boolean)">
            <summary>
            Gets the children of an Alarm Area. 
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmArea.GetFilterAsync">
            <summary>
            Gets the filter containg childrens of an Alarm Area. 
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAreaListRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAreaListRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAreaRun.OnStart(T.Modules.Alarm.AlarmRun)">
            <summary>
            Create Property that is out of table config.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAreaRun.OnStop">
            <summary>
            Create Property that is out of table config.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAreaRun.OnCreateObj(System.Int32)">
            <summary>
            Create Property when is used
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAreaRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAreaRun.SetDisableProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set Disable property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAreaRun.SetDisableLocalProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set DisableLocal property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAreaRun.SetSuspendLocalProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set SuspendLocal property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAreaRun.SetSuspendProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set Suspend property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAreaRun.SetAckAllProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set AckAll property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAreaRun.SetAckAllLocalProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set AckAllLocal property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAreaRun.RemovePriorityAckItem(T.Modules.Alarm.AlarmItemRun)">
            <summary>
            Remove information about the last alarm item active that need acknolgment in the Ack List
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAreaRun.RemovePriorityNormItem(T.Modules.Alarm.AlarmItemRun)">
            <summary>
            Remove information about the last alarm item active that need acknolgment in the Norm List
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAreaRun.AddPriorityItem(T.Modules.Alarm.AlarmItemRun)">
            <summary>
            Set all information about the last alarm item active that need acknolgment
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:T.Modules.Alarm.AlarmEventInfo">
            <summary>
            Object used on Notification Events
            </summary>
        </member>
        <member name="T:T.Modules.Alarm.AlarmsGroups">
            <summary>
            Class for AlarmGroupList operation.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmsGroups.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="P:T.Modules.Alarm.AlarmsGroups.Count">
            <summary>
            Get the number of AlarmGroup objects
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmsGroups.Item(System.Int32)">
            <summary>
            Get an AlarmGroup by index
            </summary>
            <param name="id"></param>
            <returns>AlarmGroup object</returns>
        </member>
        <member name="P:T.Modules.Alarm.AlarmsGroups.Item(System.String)">
            <summary>
            Get an AlarmGroup by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmsGroups.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Alarm.AlarmGroup">
            <summary>
            Class for AlarmGroup operation.
            </summary>
        </member>
        <member name="T:T.Modules.Alarm.AlarmGroup.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.Id">
            <summary>
            Gets the ID of an Alarm Group. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.Description">
            <summary>
            AlarmGroup Description configured in EditAlarmsGroups.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.AckRequired">
            <summary>
            Get the defined required operator Acknowledgment. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.LogEvents">
            <summary>
            Get the type of Historian archiving on Alarm events.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.Show">
            <summary>
            Gets a configured value to display/not display an Alarm.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.Sound">
            <summary>
            Property to describe if the Alarm Group Sound is Enabled or Disabled.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.NotificationMethod">
            <summary>
            Property to indicate the notification method.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.Colors">
            <summary>
            Represents the foreground and background colors for each Alarm state.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.TotalCount">
            <summary>
            Get the number of Active Alarms.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.UnAckCount">
            <summary>
            Get the number of Unacknowledge Alarms.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.Disable">
            <summary>
            Disable/Enable an Alarm Group.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.Suspend">
            <summary>
            Suspend an Alarm Group.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.PriorityItem">
            <summary>
            Return the highest priority Alarm Item of an AlarmGroup.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.AckAll">
            <summary>
            Acknowledge all alarm items that belong to this group.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.UserName">
            <summary>
            UserName used with alarm item.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.ActiveUnAckCount">
            <summary>
            Get the number of Unacknowledge Alarms.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.Level">
            <summary>
            String with the configured levels of Alarm Group
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.Category">
            <summary>
            String with the configured category of Alarm Group
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.AckTimeout">
            <summary>
            Timout to reactivate the alarm item after an acknologed without normalize action.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.AutoAckTime">
            <summary>
            Time to generate an automatic acknowledge
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.ActiveTimeDeadband">
            <summary>
            Time deadband to alarm to be generated
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.LastAlarmItemNotified">
            <summary>
            String with name of last alarm item notified.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.AckAllWithCommentsInternal">
            <summary>
            String comment used when AckAll with comment operation is executed.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.CustomEvaluation">
            <summary>
            Flag indicating whether alarms are generated outside Alarm module.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmGroup.DisableLog">
            <summary>
            Flag indicating whether log events are disabled.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroup.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroup.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroup.SetAckAllPropertyPassive(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set AckAll property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroup.SetCustomEvaluation(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set CustomEvaluation property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroup.SetDisableLog(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set DisableLog property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroup.SaveToTextFile(System.DateTime,System.DateTime)">
            <summary>
            Save alarms to text file
            </summary>
            <param name="start">Star date time</param>
            <param name="end">End date time</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroup.SaveToTextFile(System.String,System.String,System.String,System.Char,System.Boolean,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Save alarms to text file
            </summary>
            <param name="start">Start date time</param>
            <param name="end">End date time</param>
            <param name="outputFileName">File name</param>
            <param name="chSep">Char separator</param>
            <param name="addHeader">Flag indicating whether header must de added</param>
            <param name="precision">Double precision</param>
            <param name="ci">Culture info</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroup.SaveToTextFile(System.String,System.String)">
            <summary>
            Save alarms to text file
            </summary>
            <param name="start">Star date time</param>
            <param name="end">End date time</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroup.SaveToTextFile(System.DateTime,System.DateTime,System.String,System.Char,System.Boolean,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Save alarms to text file
            </summary>
            <param name="start">Start date time</param>
            <param name="end">End date time</param>
            <param name="outputFileName">File name</param>
            <param name="chSep">Char separator</param>
            <param name="addHeader">Flag indicating whether header must de added</param>
            <param name="precision">Double precision</param>
            <param name="ci">Culture info</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroup.AckAllWithComments(System.String)">
            <summary>
            Ack all alarm items with comment
            </summary>
            <param name="comment">String containg comment</param>
            <returns>Always true</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroup.AckAllWithCommentsAsync(System.String,System.String,System.String)">
            <summary>
            Ack all alarm items with comment
            </summary>
            <param name="comment">String containg comment</param>
            <param name="user"> User name</param>
            <param name="pass">User password</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroupListRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroupListRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroupRun.OnStart(T.Modules.Alarm.AlarmRun)">
            <summary>
            Create Property that is out of table config.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroupRun.OnStop">
            <summary>
            Create Property that is out of table config.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroupRun.OnCreateObj(System.Int32)">
            <summary>
            Create Property when is used
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroupRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroupRun.AddItem(T.Modules.Alarm.AlarmItemRun)">
            <summary>
            Insert alarmItem in the child list
            </summary>
            <param name="itemAlarm"></param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroupRun.RemovePriorityAckItem(T.Modules.Alarm.AlarmItemRun)">
            <summary>
            Remove information about the last alarm item active that need acknolgment in the Ack List
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroupRun.RemovePriorityNormItem(T.Modules.Alarm.AlarmItemRun)">
            <summary>
            Remove information about the last alarm item active that need acknolgment in the Norm List
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroupRun.AddPriorityItem(T.Modules.Alarm.AlarmItemRun)">
            <summary>
            Set all information about the last alarm item active that need acknolgment
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroupRun.SetDisableProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set Disable property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroupRun.SetSuspendProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set Suspend property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroupRun.SetAckAllWithCommentsInternalProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set AckAllWithCommentsInternal property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroupRun.AckAllCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Execute ack of all active alarm
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmGroupRun.AckAllCommand(System.Boolean,System.String,System.String)">
            <summary>
            Execute ack of all active alarm
            </summary>
        </member>
        <member name="T:T.Modules.Alarm.AlarmsItems">
            <summary>
            Class for AlarmItemList operation.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmsItems.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmsItems.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Alarm.AlarmItem">
            <summary>
            Class for AlarmItem operation.
            </summary>
        </member>
        <member name="T:T.Modules.Alarm.AlarmItem.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Id">
            <summary>
            Gets the ID of an Alarm Item. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.TagName">
            <summary>
            Get the defined TagName that will be evaluated to generate an Alarm Item.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Condition">
            <summary>
            Configured evaluation condition to generate an AlarmItem.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Limit">
            <summary>
            Get defined value to evaluate AlarmItem conditions
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Limit0">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Limit1">
            <summary>
            Used as alarm limit when Alarm.EnableLimitsByShift is true and Alarm.CurrentShift is 1.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Limit2">
            <summary>
            Used as alarm limit when Alarm.EnableLimitsByShift is true and Alarm.CurrentShift is 2.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Deadband">
            <summary>
            Defined Deadband of an AlarmItem. Configured AlarmItem downtime. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Setpoint">
            <summary>
            Defined Setpoint of an AlarmItem.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.SetpointDeadband">
            <summary>
            Represents the dead band for the SetPoint property. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Message">
            <summary>
            Get the configured Message to display when Alarm occurs.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Group">
            <summary>
            Group name to which an Alarm Item belongs.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Area">
            <summary>
            Area name to which an Alarm Item belongs.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Priority">
            <summary>
            Get an AlarmItem Priority. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Alarm">
            <summary>
            Indicates whether alarm item is active (1) or normalized (0)
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.UnAck">
            <summary>
            Property set/get an Unacknowledge Alarm Item.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Disable">
            <summary>
            Property to Disable/Enable an AlarmItem.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Suspend">
            <summary>
            Property to suspend an AlarmItem.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.State">
            <summary>
            Get an Alarm Item State. Alarm Item state can be: Active, Acknowledge or Normalized
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.ActiveTime">
            <summary>
            Time that an Alarm Item started.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.NormTime">
            <summary>
            Time that an Alarm takes to "Normalization".
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.AckTime">
            <summary>
            Time that an alarm Item is set at "Acknowledge". 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.UserName">
            <summary>
            User name acknowledges alarm 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Comment">
            <summary>
            Alarm comment
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.ColorBG">
            <summary>
            Configured Background Color of an Alarm Item.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.ColorFG">
            <summary>
            Configured Foreground Color of an Alarm Item. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.LastValue">
            <summary>
            Last value when alarm item was checked
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.PreviousValue">
            <summary>
            Previous value when alarm item was checked
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.ItemName">
            <summary>
            Item name
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.MessageExtended">
            <summary>
            Get the configured Message to display when Alarm occurs including initial char "*" to indicate that an acknowledge is required.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.MessageValue">
            <summary>
            Get the configured Message to display when Alarm occurs.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.ActiveLocalTime">
            <summary>
            Time that an Alarm Item started in local time.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Category">
            <summary>
            Categrory
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Level">
            <summary>
            Asset level
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.Duration">
            <summary>
            How long alarm remained active
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.AuxValue">
            <summary>
            Auxiliary value.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.AuxValue2">
            <summary>
            Auxiliary2 value.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.AuxValue3">
            <summary>
            Auxiliary3 value.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.BlinkFG">
            <summary>
            Configured Foreground Blink Type of an Alarm Item. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmItem.BlinkBG">
            <summary>
            Configured Background Blink Type of an Alarm Item. 
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItem.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItem.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItem.SetUnAckPropertyPassive(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set UnAck property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemListRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemListRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="F:T.Modules.Alarm.AlarmItemRun.isSuspendingOrDisablingAlarmItem">
            <summary>
            Property used to avoid Hi alarm being Acked when HiHi AlarmItem is disabled / suspended (same goes for Lo and LoLo)
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.OnStart(T.Modules.Alarm.AlarmRun,T.Modules.Alarm.AlarmGroupRun)">
            <summary>
            Initialize any item on startup
            </summary>
            <param name="module">Alarm Module</param>
            <param name="alrGroup">Group of this Alarm Item</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.OnStop">
            <summary>
            Finalize any item on stop
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.SetDisableProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set Disable property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.SetSuspendProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set Suspend property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.SetUnAckProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set UnAck property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.HandleTagUnackEvent(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.HandleRuntimeEvent(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.TreatAlarm(System.String,System.Boolean,System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            The main Function that have the Alarm algorithm
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.CreateAlarm(System.String,System.Int32,System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Update values when alarm is active
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.RemoveAlarm(System.String,System.Int32,System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Reset values when alarm is deactived
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.AddItemToTDataTable(System.String)">
            <summary>
            Insert Item in the QueryActive (AlarmItem is Active)
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.RemoveItemFromTDataTable">
            <summary>
            Delete item in the QueryActive (AlarmItem is Active)
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.AddItemToHistorian(System.String)">
            <summary>
            Insert item in the historian data table
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.CallNotifyFunction(System.Int32)">
            <summary>
            Call Notify Function
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.CallNotifyGeneralFunction(System.Object)">
            <summary>
            Notify Function
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmItemRun.HandlerPriorityChanged(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="T:T.Modules.Alarm.AlarmRedundancy">
            <summary>
            Class for AlarmRedundancy operation.
            </summary>
        </member>
        <member name="T:T.Modules.Alarm.AlarmRedundancy.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmRedundancy.PendingAlarmsForSaving">
            <summary>
            Number of pending alarms for saving
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmRedundancy.PendingEventsForSaving">
            <summary>
            Number of pending events for saving
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmRedundancy.LastSyncMessage">
            <summary>
            Last message while synchronizing
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmRedundancy.LastSyncErrorMessage">
            <summary>
             Last error message while synchronizing
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmRedundancy.LastSyncTimestamp">
            <summary>
            Last time while synchronizing
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmRedundancy.LastSyncErrorTimestamp">
            <summary>
            Last error message while synchronizing
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRedundancy.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRedundancy.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Alarm.AlarmRun">
            <summary>
            Test class
            </summary>
        </member>
        <member name="F:T.Modules.Alarm.AlarmRun.solutionName">
            <summary>
             Current solutionName
            </summary>
        </member>
        <member name="F:T.Modules.Alarm.AlarmRun.executionPath">
            <summary>
            Current executionPath
            </summary>
        </member>
        <member name="F:T.Modules.Alarm.AlarmRun.productPath">
            <summary>
            Current Product Path
            </summary>
        </member>
        <member name="F:T.Modules.Alarm.AlarmRun.alarmHistorianAPI">
            <summary>
            Dataset API to create , get and update databases
            </summary>
        </member>
        <member name="F:T.Modules.Alarm.AlarmRun.alarmHistorianStoreAndForwardAPI">
            <summary>
            StoreAndForward database
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.#ctor(T.Kernel.Core.TModule,T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.SetAckAllWithCommentsInternalProperty(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set AckAllWithCommentsInternal property
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.OnStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.OnAfterStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module after starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.OnInitialWaitingValueFromServer(System.Int32)">
            <summary>
            Specifies actions to take when the module waiting initial value from server.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.CreateQueryActiveTable">
            <summary>
            Create the format of QueryActive - "Collumns Name Definition"
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.IncreaseUnackCount">
            <summary>
            Increase Unack Count
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.DecreaseUnackCount">
            <summary>
            Decrease Unack Count
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.IncreaseActiveUnackCount">
            <summary>
            Increase Unack Count
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.DecreaseActiveUnackCount">
            <summary>
            Decrease Unack Count
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.IncreaseTotalCount">
            <summary>
            Increase Total Count
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.DecreaseTotalCount">
            <summary>
            Decrease Total Count
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.RemovePriorityAckItem(T.Modules.Alarm.AlarmItemRun)">
            <summary>
            Remove information about the last alarm item active that need acknolgment in the Ack List
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.RemovePriorityNormItem(T.Modules.Alarm.AlarmItemRun)">
            <summary>
            Remove information about the last alarm item active that need acknolgment in the Norm List
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.AddPriorityItem(T.Modules.Alarm.AlarmItemRun)">
            <summary>
            Set all information about the last alarm item active that need acknolgment
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.AddItemToTDataTable(T.Modules.Alarm.AlarmItemRun,System.Data.DataTable,System.String)">
            <summary>
            Add Item to Query Active object
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.RemoveItemFromTDataTable(T.Modules.Alarm.AlarmItemRun)">
            <summary>
            Remove item from Query Active TagName
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.ReopenDatabase">
            <summary>
            Reopen Alarm database
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.PrepareDB">
            <summary>
            Initialize Database API
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.CreateTable(System.String,T.Library.AdoAPI)">
            <summary>
             Called when the HistorianTable from the Tag doesn't exist
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.AckAllCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Execute ack of all active alarm
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.PriorityOrderCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Change Priority Item Order
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.DisableSaveToDatabaseCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Update value of property to Disable save data to Alarm DB
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.HandlerForOnlineConfig(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called for updating main DataSet (configuration online).
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.HandlerUpdateModuleInformation(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.HandlerUpdateDiagnostics(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.HandlerInitialDisableTime(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.HandlerIsTStartupStarted(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.HandlerCheckAckTimeout(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.HandlerCheckActiveTimeDeadband(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.HandlerCheckAutoAckTime(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.HandlerDayChanged(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.OnStop(System.Boolean)">
            <summary>
            Finish module
            </summary>
            <param name="isHotStarting">Flag indicating whether module should shutdown prepared to after hot starting</param>
        </member>
        <member name="P:T.Modules.Alarm.AlarmRun.CanPauseAndContinue">
            <summary>
            Can Pause And Continue Module
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmRun.CanStop">
            <summary>
            Get a value indicating whether the module can be stopped once it has started.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.OnPause">
            <summary>
            Specifies actions to take when a module pauses.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.OnContinue">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being paused.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.OnDeactivate">
            <summary>
            Specifies actions to take when a module is deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.OnActivate">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.GetModuleMainName">
            <summary>
            Return task main name
            </summary>
            <returns>Task main name</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.GetCaption">
            <summary>
            Return task caption
            </summary>
            <returns>Task caption</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmRun.UpdateLastErrorMessage(System.String,System.DateTimeOffset)">
            <summary>
            Updates LastErrorMessage Property
            </summary>
            <param name="message">Content of error</param>
            <param name="time">Time when error occurred (will be converted to LocalDateTime here)</param>
        </member>
        <member name="T:T.Modules.Alarm.AlarmStoreAndForward">
            <summary>
            Class for AlarmStoreAndForward operation.
            </summary>
        </member>
        <member name="T:T.Modules.Alarm.AlarmStoreAndForward.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmStoreAndForward.LastStartedTimeStamp">
            <summary>
            ReadOnly property with information about last started store and forward execution.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmStoreAndForward.IsEnabled">
            <summary>
            ReadOnly flag to indicate if store and forward is enabled. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmStoreAndForward.IsActive">
            <summary>
            ReadOnly flag to indicate if store and forward is actived. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmStoreAndForward.NumberOfRows">
            <summary>
            ReadOnly flag to indicate the number of rows stored on backup. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmStoreAndForward.HasPairRedundantPending">
            <summary>
            ReadOnly flag to indicate if has pending data on pair redundant. 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmStoreAndForward.IsActiveForced">
            <summary>
            Flag to indicated if is active forced 
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmStoreAndForward.LastSyncTimeStamp">
            <summary>
            ReadOnly property with information about last sync store and forward execution.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmStoreAndForward.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmStoreAndForward.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Alarm.AlarmAuditTrail">
            <summary>
            Audit trail configuration objects
            </summary>
        </member>
        <member name="T:T.Modules.Alarm.AlarmAuditTrail.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmAuditTrail.IsEnabled">
            <summary>
            Flag to indicate that Audit trail is enabled.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmAuditTrail.LogonLogoffSecurity">
            <summary>
            Flag to indicate that Audit trail - LogonLogoff option will be used.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmAuditTrail.OpenCloseDisplays">
            <summary>
            Flag to indicate that Audit trail - OpenCloseDisplays option will be used.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmAuditTrail.OperatorActions">
            <summary>
            Flag to indicate that Audit trail - OperatorActions option will be used.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmAuditTrail.ModifyDatasets">
            <summary>
            Flag to indicate that Audit trail - ModifyDatasets option will be used.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmAuditTrail.LoadDatasets">
            <summary>
            Flag to indicate that Audit trail - LoadDatasets option will be used.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmAuditTrail.SaveReports">
            <summary>
            Flag to indicate that Audit trail - SaveReports option will be used.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmAuditTrail.SystemWarnings">
            <summary>
            Flag to indicate that Audit trail - SystemWarnings option will be used.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmAuditTrail.TagChanges">
            <summary>
            Flag to indicate that Audit trail - TagChanges option will be used.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmAuditTrail.RemoteConnections">
            <summary>
            Flag to indicate that Audit trail - RemoteConnections option will be used.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmAuditTrail.CustomMessages">
            <summary>
            Flag to indicate that Audit trail - CustomMessages option will be used.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmAuditTrail.LastTickAdded">
            <summary>
            Property that indicate the tick timestamp of last audit trail stored.
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAuditTrail.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAuditTrail.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAuditTrail.AddCustomMessage(System.String)">
            <summary>
            Add Custom Messages to Audit trail
            </summary>
            <param name="message">Message to be added to Audit trail</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAuditTrail.AddCustomMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Add Custom Messages to Audit trail
            </summary>
            <param name="message">Message to be added to Audit trail</param>
            <param name="areaName">Area related with this custom message</param>
            <param name="objectName">Object related with this custom message</param>
            <param name="value">Object Value related with this custom message</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmAuditTrail.AddCustomMessage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add Custom Messages to Audit trail
            </summary>
            <param name="message">Message to be added to Audit trail</param>
            <param name="areaName">Area related with this custom message</param>
            <param name="objectName">Object related with this custom message</param>
            <param name="value">Object Value related with this custom message</param>
            <param name="itemName">Item name</param>
            <param name="auxValue">Auxiliar value</param>
            <param name="comments">Comments</param>
            <param name="auxValue2">Auxiliar2 value</param>
            <param name="auxValue3">Auxiliar3 value</param> 
        </member>
        <member name="T:T.Modules.Alarm.AlarmsGlobalSettings.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmsGlobalSettings.AuditTrail">
            <summary>
            Provides access to AlarmAuditTrail objects.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmsGlobalSettings.InitialDisableTime">
            <summary>
            The alarm module execution will be started after this time.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmsGlobalSettings.IgnoreAlarmsDuringTimeDeadband">
            <summary>
            If true then any alarm is ignored during initial disable time.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmsGlobalSettings.LifeTime">
            <summary>
            Number of days that history will be available to access.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmsGlobalSettings.EnableLimitsByShift">
            <summary>
            ReadOnly flag to indicate the alarm limits shift execution.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmsGlobalSettings.EnableAckThirdStatus">
            <summary>
            ReadOnly flag to indicate the alarm Ack has additional ack pending status
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmsGlobalSettings.PriorityOrder">
            <summary>
            Set Order for Priority Property  0 or 1 <br/>
            0 - ascending order (default behavior) <br/>
            1 - descending order (low number means bigger priority)
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmsGlobalSettings.LogUserFullName">
            <summary>
            Flag to indicate that User FullName option will be used to save current name.
            </summary>
        </member>
        <member name="P:T.Modules.Alarm.AlarmsGlobalSettings.UpdateValueOnNormOrAck">
            <summary>
            Flag indicating whether Value should be updated when saving alarm in database (normalize or ack). Default is true
            </summary>
        </member>
        <member name="M:T.Modules.Alarm.AlarmsGlobalSettings.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Alarm.AlarmsGlobalSettings.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Alarm.AlarmsGlobalSettings.SetUpdateValueOnNormOrAck(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set UpdateValueOnNormOrAck property
            </summary>
        </member>
        <member name="T:T.Modules.ClientStation.ClientAlarmPage">
            <summary>
            Class for AlarmPage operation.
            </summary>
        </member>
        <member name="T:T.Modules.ClientStation.ClientAlarmPage.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientAlarmPage.StartDateTime">
            <summary>
            StartDateTime Client side value, availble to be used on AlarmPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientAlarmPage.EndDateTime">
            <summary>
            EndDateTime Client side value, availble to be used on AlarmPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientAlarmPage.SelectedAlarmList">
            <summary>
            Integer Client side value, tipycally used to chagned the ListType on AlarmView
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientAlarmPage.FilterHighPriority">
            <summary>
            Filter by HighPriority 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientAlarmPage.FilterMediumPriority">
            <summary>
            Filter by MediumPriority 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientAlarmPage.FilterLowPriority">
            <summary>
            Filter by LowPriority 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientAlarmPage.AckPage">
            <summary>
            Auxiliary for AlarmPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientAlarmPage.SelectedArea">
            <summary>
            SelectedArea
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientAlarmPage.Filter">
            <summary>
            Filter condition
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientAlarmPage.FilterMessage">
            <summary>
            FilterMessage input
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientAlarmPage.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.ClientStation.ClientAlarmPage.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.ClientStation.ClientChartPen">
            <summary>
            Class for ClientChartPen operation.
            </summary>
        </member>
        <member name="T:T.Modules.ClientStation.ClientChartPen.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.CursorValue">
            <summary>
            CursorValue
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.FilterLevel">
            <summary>
            FilterLevel
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.HorizontalOffset">
            <summary>
            HorizontalOffset
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.MinValue">
            <summary>
            MinValue
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.MaxValue">
            <summary>
            MaxValue
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.PenColor">
            <summary>
            PenColor
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.PenLabel">
            <summary>
            PenLabel
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.PenSettings">
            <summary>
            PenSettings
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.PenUnits">
            <summary>
            PenUnits
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.PenValue">
            <summary>
            PenValue
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.ShowHighlighted">
            <summary>
            ShowHighlighted
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.ShowValueArea">
            <summary>
            ShowValueArea
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.Square">
            <summary>
            Square
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.TagName">
            <summary>
            TagName
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientChartPen.Visible">
            <summary>
            Visible
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientChartPen.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.ClientStation.ClientChartPen.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Modules.ClientStation.ClientChartPen.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.ClientStation.ClientContext">
            <summary>
            Class for ClientContext operation.
            </summary>
        </member>
        <member name="T:T.Modules.ClientStation.ClientContext.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientContext.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.DisplayValueMode">
            <summary>
             Gets the current display value mode.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.HistorianDateTime">
            <summary>
            Gets current historian date time
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.DigitalValue">
            <summary>
            Digital value to create and test symbols
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.NumericValue">
            <summary>
            Numeric value to create and test symbols
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.TextValue">
            <summary>
            Text value to create and test symbols
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.Interval">
            <summary>
            TimeSpan Client side value, availble to be used on displays
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.DateTimeStart">
            <summary>
            DateTime Client side value, availble to be used on displays
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.DateTimeEnd">
            <summary>
            DateTime Client side value, availble to be used on displays
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.SelectedTag">
            <summary>
            Gets the selected asset.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.SelectedProperty">
            <summary>
            Gets the selected asset.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.AssetName">
            <summary>
            Gets the selected asset.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.AssetId">
            <summary>
            Gets the selected assetId
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.AssetPath">
            <summary>
            Gets the selected asset path.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.AssetNodeName">
            <summary>
            Gets the selected AssetNodeName.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.AssetNodeDepth">
            <summary>
            Gets the selected AssetNodeDepth.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.SiteName">
            <summary>
            Gets the selected asset.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.SiteId">
            <summary>
            Gets the selected assetId
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.AreaName">
            <summary>
            Gets the selected AreaName.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.AreaId">
            <summary>
            Gets the selected AreaId
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.LineName">
            <summary>
            Gets the selected LineName.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.LineId">
            <summary>
            Gets the selected LineId
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.EquipmentName">
            <summary>
            Gets the selected EquipmentName.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.EquipmentId">
            <summary>
            Gets the selected EquipmentId
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.DeviceName">
            <summary>
            Gets the selected DeviceName.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.DeviceId">
            <summary>
            Gets the selected DeviceId
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.WellName">
            <summary>
            Gets the selected WellName.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.WellId">
            <summary>
            Gets the selected WellId
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.TreeBranchFilter">
            <summary>
            Filter TAssetsTree by branch
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.TreeAttributeFilter">
            <summary>
            Filter TAssetsTree by TreeAttributeFilter.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.TreeInitialBranch">
            <summary>
            AssetsTree Initia lBranch
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientContext.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientContext.SetDisplayValueToHistorian(System.DateTime)">
            <summary>
            Sets property DisplayValue of tags with values in a specified date time
            </summary>
            <param name="datetime">Date time</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientContext.SetDisplayValueToEstimated">
            <summary>
            Sets property DisplayValue of tags to display Estimated property 
            </summary>
            <returns>Always 0</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientContext.SetDisplayValueToCurrent">
            <summary>
            Sets property DisplayValue of tags to display Value property 
            </summary>
            <returns>Always 0</returns>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.PageOpeningMethod">
            <summary>
            Full PageOpeningMethod method name in "Script.Class" with Client domain. Ex: Script.Class.ClientMain.MyPageOpeningMethod. 
            Prototype: public void PageOpeningMethod(TDisplay display).
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.PageClosingMethod">
            <summary>
            Full PageClosingMethod method name in "Script.Class" with Client domain. Ex: Script.Class.ClientMain.MyPageClosingMethod. 
            Prototype: public void PageClosingMethod(TDisplay display).
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.ValueOutOfRangeMethod">
            <summary>
            Full ValueOutOfRangeMethod method name in "Script.Class" with Client domain. Ex: Script.Class.ClientMain.MyValueOutOfRangeMethod. 
            Prototype: public bool ValueOutOfRangeMethod(string tagName, object min, object max, object value, Rect rect).
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientContext.ObjectSelectedMethod">
            <summary>
            Full ObjectSelectedMethod method name in "Script.Class" with Client domain. Ex: Script.Class.ClientMain.MyObjectSelectedMethod. 
            Prototype: public void ObjectSelectedMethod(string[] tagList).
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientContext.GetDisplayTagList(System.String,System.Boolean)">
            <summary>
            Get string array with tag list of a display
            </summary>
            <param name="displayName">Date time</param>
            <returns>String array with tag list of a display</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientContext.SetRetentiveContextToTags(System.String[],System.String)">
            <summary>
            Set retentive context to tags
            </summary>
            <param name="tags">Array containg tags</param>
            <param name="context">Context</param>
        </member>
        <member name="T:T.Modules.ClientStation.ClientDrillingChart">
            <summary>
            Class for ClientDrillingChart operation.
            </summary>
        </member>
        <member name="T:T.Modules.ClientStation.ClientDrillingChart.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientDrillingChart.DisableShowAlarms">
            <summary>
            Disable show alarms in DrillingChart control
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientDrillingChart.DisableShowTagNotes">
            <summary>
            Disable show tag notes in DrillingChart control
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientDrillingChart.DisableShowTimeNotes">
            <summary>
            Disable show time notes in DrillingChart control (ChartType = Duration)
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientDrillingChart.DisableShowXValueNotes">
            <summary>
            Disable show x value notes in DrillingChart control (ChartType = X/Y)
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientDrillingChart.DisableShowRangeEvents">
            <summary>
            Disable show range events in DrillingChart control (ChartType = Duration)
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientDrillingChart.GetAnnotationTableMethod">
            <summary>
            Full GetAnnotationTableMethod method name in "Script.Class" with Client domain. Ex: Script.Class.ClientMain.MyGetAnnotationTable. 
            Prototype: public DataTable GetAnnotationTableMethod(TDrillingChart trend, string[] tagNames, object xMinValue, object xMaxValue, bool showTagNotes, bool showTimeNotes/showXValueNotes, bool showRangeEvents).
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientDrillingChart.AddNoteMethod">
            <summary>
            Full AddNoteMethod method name in "Script.Class" with Client domain. Ex: Script.Class.ClientMain.MyAddNoteMethod. 
            Prototype: public void AddNote(TDrillingChart trend, string tagName, object xValue, double yValue). Note TagName can be null
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientDrillingChart.AddRangeEventMethod">
            <summary>
            Full AddRangeEventMethod method name in "Script.Class" with Client domain. Ex: Script.Class.ClientMain.MyAddRangeEventMethod. 
            Prototype: public void AddRangeEventMethod(TDrillingChart trend, string[] tagNames, DateTime start, TimeSpan duration).
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientDrillingChart.MouseClickAnnotationMethod">
            <summary>
            Full MouseClickAnnotationMethod method name in "Script.Class" with Client domain. Ex: Script.Class.ClientMain.MyMouseClickAnnotationMethod. 
            Prototype: public void MouseClickAnnotationMethod(MouseButtonEventArgs e, bool isEvent, string identification, string title, string contents, string color, object xValue, double yValue, double duration).
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientDrillingChart.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.ClientStation.ClientDrillingChart.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.ClientStation.ClientMessaging">
            <summary>
            Class for ClientMessaging operation.
            </summary>
        </member>
        <member name="T:T.Modules.ClientStation.ClientMessaging.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientMessaging.Queue">
            <summary>
            Queue containg messages from other clients. Columns: Source, Message, Timestamp, Processed
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientMessaging.ArrivedMessage">
            <summary>
            When message arrives this property is toggled
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientMessaging.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.ClientStation.ClientMessaging.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientMessaging.SendTo(System.String,System.String)">
            <summary>
            Send message to other client
            </summary>
            <param name="IP">Client IP. If null then send message to all clients</param>
            <param name="message">Message to send</param>
        </member>
        <member name="M:T.Modules.ClientStation.ClientMessaging.ClearQueue">
            <summary>
            Clear queue
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientMessaging.RemovedMessages(System.Int32,System.Int32)">
            <summary>
            Removed messages
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientMessaging.SetProcessedMessageFlag(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set Processed column
            </summary>
        </member>
        <member name="T:T.Modules.ClientStation.ClientStation">
            <summary>
            Client Station Runtime object
            </summary>
        </member>
        <member name="T:T.Modules.ClientStation.ClientStation.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.BlinkSlow">
            <summary>
            Gets the client's blink slow property. The blink slow property is a digital variable that toggles from 0 to 1 and from 1 to 0, remaining 250 msec in each state. 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.BlinkFast">
            <summary>
            Gets the client's blink fast property. The blink fast property is a digital variable that toggles from 0 to 1 and from 1 to 0, remaining 500 msec in each state.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Now">
            <summary>
            Gets the client's local date and time offset.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.UtcNow">
            <summary>
            Gets the UTC date and time offset.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Date">
            <summary>
            Gets the client's date.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.DateTime">
            <summary>
            Gets the client's date and time. 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.DayOfWeek">
            <summary>
            Gets the client's day of the week.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.DayOfYear">
            <summary>
            Gets the client's day of the year.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Ticks">
            <summary>
            Gets the number of ticks that represent the client's date and time.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Time">
            <summary>
            Gets the client's time of day.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.TimeSpan">
            <summary>
            Gets a timespan object.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.TimeMs">
            <summary>
            Gets the client's time of day including milliseconds.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.SimulationAnalog">
            <summary>
            Gets the analog int simulation variable, which varies from 0 to 100 (in steps of 1); returns to 0 in one step and then repeats the same pattern (sawtooth waveform). 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.SimulationDouble">
            <summary>
            Gets the analog double simulation variable, which varies in steps from 0 to 100; returns in steps from 100 to 0, then repeats the same pattern.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.SimulationDigital">
            <summary>
            Gets the digital simulation variable, which toggles from 0 to 1 and from 1 to 0, remaining 3 seconds in each state.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Millisecond">
            <summary>
            Gets the millisecond component of the client's date.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Second">
            <summary>
            Gets the second component of the client's date .
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Minute">
            <summary>
            Gets the minute component of the client's date . 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Hour">
            <summary>
            Gets the hour component of the client's date.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Day">
            <summary>
            Gets the client's day of the month.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Yesterday">
            <summary>
            Gets the day component of the client's Yesterday date.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Tomorrow">
            <summary>
            Gets the day component of the client's Tomorrow date .
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Month">
            <summary>
            Gets the month component of the client's date. 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Year">
            <summary>
            Gets the year component of the client's date.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Shutdown">
            <summary>
            Gets or sets the client's shutdown state.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Startup">
            <summary>
            Gets the client's startup state. 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.CurrentUser">
            <summary>
            Gets the client's current user.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.UserName">
            <summary>
            Gets the client's user name
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.UserInactivity">
            <summary>
            Gets a timpespan of user inactivity.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.GCCollect">
            <summary>
            Gets a timpespan of user inactivity.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.MaxCacheDisplays">
            <summary>
            Gets and sets max number of displays in memory.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.PreloadedTags">
            <summary>
            Flag to indicate wheter initial tags already was preloaded
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.NumberOfTagsLoaded">
            <summary>
            Number of tags load in memory
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.NumberOfTagPropertiesLoaded">
            <summary>
            Number of tag properites (Value, Min, Max, etc.) load in memory
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.GetCursorX">
            <summary>
            Gets the X cursor coordinates.
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.GetCursorY">
            <summary>
            Gets the Y cursor coordinates.
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.GetCursorX(System.Boolean)">
            <summary>
            Gets the X cursor coordinates.
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.GetCursorY(System.Boolean)">
            <summary>
            Gets the Y cursor coordinates.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.LogonDateTime">
            <summary>
            Gets the Logon timestamp.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.SelectedPage">
            <summary>
            Gets or sets the client's selected page name.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.InputPassword">
            <summary>
            Gets or sets the client's input password. This is an auxiliary variable used in the system default logon window. 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.InputMessage">
            <summary>
            Output message,this is an auxiliary variable used in the system default logon window. 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.InputUserName">
            <summary>
            Gets or sets the client's input user name. This is an auxiliary variable used in the system default logon window.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.OnScreenKeyboard">
            <summary>
            Gets or sets the client's on screen keyboard state.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.CultureInfo">
            <summary>
            Gets or sets the client's language selection. 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Localization">
            <summary>
            Gets the dictionary name used on localization.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Units">
            <summary>
            Gets and sets the dictionary name used on display units.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.ComputerIP">
            <summary>
            Gets the computer IP.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.ComputerName">
            <summary>
            Gets the computer name.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.LayoutName">
            <summary>
            Gets the client's layout name. 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.CurrentPage">
            <summary>
            Gets the name of the client's page currently displayed. 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.PreviousPage">
            <summary>
            Gets the client's previous page name.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.PreviousLayout">
            <summary>
            Gets the client's previous layout name.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.AlarmBeepOff">
            <summary>
            Gets or sets the client's beep off state. 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.IsWebBrowser">
            <summary>
            Gets the information if is running on web browser.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.ServerHttpAddress">
            <summary>
            Gets the server's http address
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.SwitchToStandby">
            <summary>
            Switches the Server to Standby mode. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Uid">
            <summary>
            Gets the Uid information
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.ControlWithFocus">
            <summary>
            Gets the object reference of control with focus
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.IsConnected">
            <summary>
            Flag to indicate if client is connected with server.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.RunAlwaysOnTop">
            <summary>
            Flag to indicate to run always on top.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.StatusBarVisibleOnIOS">
            <summary>
            Flag to indicate status bar visible on iOS.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.IsBackButtonVisibleOnIOS">
            <summary>
            Flag to indicate back button visible on iOS
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.SolutionChanged">
            <summary>
            Flag to indicate project changed.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.IsSmartDevice">
            <summary>
            Flag to indicate if is running on smart device
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.IsIPhone">
            <summary>
            Flag to indicate if is running on iPhone
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.IsIPad">
            <summary>
            Flag to indicate if is running on iPad
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.IsSmartDevicePortrait">
            <summary>
            Flag to indicate if is running on smart device Portrait
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.IsStarted">
            <summary>
            Flag indicating whether Dataset module was full started 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.StartCounter">
            <summary>
            Counter while starting module
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.TooltipOptions">
            <summary>
            Tooltip options to be displayed when mouse is over control
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.TooltipInitialShowDelay">
            <summary>
            Gets or sets the time in ms that passes before the ToolTip appears.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.AutoScaleMargin">
            <summary>
            Margin to be used in AutoScale of TTrendChart and TDrillingChart controls. Default is 2
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.IsLocal">
            <summary>
            Flag indicating whether client is local.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.IsRemote">
            <summary>
            Flag indicating whether client is remote.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.ReadOnly">
            <summary>
            Flag indicating client can not write in server tags.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.BackPage">
            <summary>
            Toggles to back page.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.NextPage">
            <summary>
            Toggles to next page.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.HistoryPages">
            <summary>
            String array containg open pages. Max = 10 pages.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.HistoryPagesIndex">
            <summary>
            Current index of HistoryPage.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.TrendChart">
            <summary>
            Gets reference to TrendChart objects.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.DrillingChart">
            <summary>
            Gets reference to DrillingChart objects.
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Parameters">
            <summary>
            Gets initialization parameters
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.IsSmartClient">
            <summary>
            Flag to indicate if is running as TSmartClient 
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Messaging">
            <summary>
            Refrence to message queue
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.AlarmPage">
            <summary>
            Auxiliary Properties for default AlarmPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Theme">
            <summary>
            Gets and sets the dictionary name used on theme
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientStation.Simulation">
            <summary>
            Gets and sets the client's simulation state. 
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.AfterCreateObj(System.Int32)">
            <summary>
            Called after object creation to read retentive objType or configured objType
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.GetTDisplay(System.String)">
            <summary>
            Gets instance of a specific display
            </summary>
            <param name="displayName">Display name</param>
            <returns>TDisplay reference</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.GetTDisplays">
            <summary>
            Gets list of opened displays
            </summary>
            <returns>TDisplay list</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.Locale(System.String)">
            <summary>
            Returns localization text
            </summary>
            <param name="text">Text to localize</param>
            <returns>Localized text</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.LogOnAsync(System.String,System.String)">
            <summary>
            Log on
            </summary>
            <param name="username">User name</param>
            <param name="password">User password</param>
            <returns>0: Success, >= 1: Error code</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.LogOn">
            <summary>
            Open display LogOn
            </summary>
            <returns>0: Error, 1: Success</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.LogOnGuestAsync">
            <summary>
            Log on as guest
            </summary>
            <returns>0: Success, >= 1: Error code</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.ChangeUserPasswordAsync(System.String,System.String,System.String)">
            <summary>
            Change password of runtime users
            </summary>
            <param name="username">User name</param>
            <param name="oldPassword">Current password</param>
            <param name="newPassword">New password</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.SetBlockedUserAsync(System.String,System.Boolean)">
            <summary>
            Block or unblock runtime user.
            </summary>
            <param name="username">User name</param>
            <param name="flag">Flag indicating for blocking (true) or not (false)</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.SetDeletedUserAsync(System.String,System.Boolean)">
            <summary>
            Set flag Deleted of runtime user. This method does not remove user in runtime database.
            </summary>
            <param name="username">User name</param>
            <param name="flag">Flag indicating for deleting (true) or not (false)</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.IsDisplayOpen(System.String)">
            <summary>
            Check if display is open
            </summary>
            <param name="displayName">Display name</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.IsDisplayOpeningExecuted(System.String)">
            <summary>
            Check if DisplayOpening method already executed
            </summary>
            <param name="displayName"></param>
            <returns>Flag indicating whether DisplayOpening method already executed (true) or not (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.OpenDisplay(System.String)">
            <summary>
            Open display
            </summary>
            <param name="displayName">Display Name</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.OpenDisplay(System.String,System.Object[])">
            <summary>
            Open display with optional parameters
            </summary>
            <param name="displayName">Display name</param>
            <param name="items">LabelList [label1=tag1;label2=tag2], Left, Top, Width, Height</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.NewPopup(System.String,System.Object[])">
            <summary>
            Begin open new popup. If display is already open then a new instance will be open
            </summary>
            <param name="displayName">Display name</param>
            <param name="items">LabelList [label1=tag1;label2=tag2], Left, Top, Width, Height</param>
            <returns>Always empty string</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.OpenPreviousPage">
            <summary>
            Open previous page
            </summary>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.OpenDisplayAtPanel(System.String,System.Int32)">
            <summary>
            OpenDisplayAtPanel
            </summary>
            <param name="displayName">Display name</param>
            <param name="panelLocation">position on the panel</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.OpenDisplayAtIndex(System.String,System.Int32)">
            <summary>
            Begin open display at z-order list of displays. Current display is closed.
            </summary>
            <param name="displayName">Display name</param>
            <param name="index">Index of list</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.CloseDisplay(System.String)">
            <summary>
            Begin close display
            </summary>
            <param name="displayName">Display name</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.PrintDisplay(System.String,System.Boolean)">
            <summary>
            Begin print display
            </summary>
            <param name="displayName">Display name</param>
            <param name="defaultPrinter">Flag indicating whether default printer is used</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.PrintDisplayDefaultPrinter(System.String,System.Int32)">
            <summary>
            Begin print display using default printer
            </summary>
            <param name="displayName">Display name</param>
            <param name="pageOrientation">0: Portrati, 1: Landscape</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.OpenLayout(System.String)">
            <summary>
            Begin open layout
            </summary>
            <param name="layoutName">Layout name</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.OpenLayout(System.String,System.String)">
            <summary>
            Begin open layout
            </summary>
            <param name="layoutName">Layout name</param>
            <param name="initialDisplay">Initial display name</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.PrintLayout">
            <summary>
            Begin print current layout
            </summary>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.PrintLayoutDefaultPrinter(System.Int32)">
            <summary>
            Begin print current layout
            </summary>
            <param name="pageOrientation">0: Portrait, 1: Landscape</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.SaveDisplayAsImageFile(System.String,System.String)">
            <summary>
            Save display to file. Display must be opened
            </summary>
            <param name="displayName">Display name</param>
            <param name="fileName">File name</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.SaveDisplayAsPngFile(System.String,System.String)">
            <summary>
            Save display to file. Display must be opened
            </summary>
            <param name="displayName">Display name</param>
            <param name="fileName">File name</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.SaveLayoutAsImageFile(System.String)">
            <summary>
            Sabe current layout to file
            </summary>
            <param name="fileName">File name</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.SaveScreenAsImageFile(System.String)">
            <summary>
            Save desktop to file
            </summary>
            <param name="fileName">File name</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.PrintScreenDefaultPrinter(System.Int32)">
            <summary>
            Print desktop using default printer
            </summary>
            <param name="pageOrientation">0: Portrait, 1: Landscape</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.SetLocalization(System.String)">
            <summary>
            Set new dicationry name
            </summary>
            <param name="name">Dictionary name</param>
            <returns>Returns always 0</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.OpenQuickNote(System.String,System.String,System.Boolean,System.Double,System.Double)">
            <summary>
            Open quick popup note
            </summary>
            <param name="title">Title</param>
            <param name="description">Decription</param>
            <param name="isReadOnly">Flag indicating whether readonly</param>
            <param name="left">Left position</param>
            <param name="top">Top position</param>
            <returns>Reference to open popup</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.GetPasswordHintAsync(System.String)">
            <summary>
            Get password hint
            </summary>
            <param name="userName">User name</param>
            <returns>Password hint</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.SetMainWindowSize(System.Double,System.Double)">
            <summary>
            Set main window size
            </summary>
            <param name="width">New width</param>
            <param name="height">New height</param>
            <returns>Value indicating success (1) or fail (0)</returns>
        </member>
        <member name="M:T.Modules.ClientStation.ClientStation.AddDisplayInCacheList(System.String)">
            <summary>
            Get string array with tag list of a display
            </summary>
            <param name="displayName">Display name</param>
        </member>
        <member name="T:T.Modules.ClientStation.ClientTrendChart">
            <summary>
            Class for ClientTrendChart operation.
            </summary>
        </member>
        <member name="T:T.Modules.ClientStation.ClientTrendChart.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.IsRealTime">
            <summary>
            Sets chart to Realtime current data
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.Paused">
            <summary>
            TrendChart is Paused [Legacy] or showing historical values
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.DisableShowAlarms">
            <summary>
            Disable show alarms in TrendChart control
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.DisableShowTagNotes">
            <summary>
            Disable show tag notes in TrendChart control
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.DisableShowTimeNotes">
            <summary>
            Disable show time notes in TrendChart control (ChartType = Duration)
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.DisableShowXValueNotes">
            <summary>
            Disable show x value notes in TrendChart control (ChartType = X/Y)
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.DisableShowRangeEvents">
            <summary>
            Disable show range events in TrendChart control (ChartType = Duration)
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.GetAnnotationTableMethod">
            <summary>
            Full GetAnnotationTableMethod method name in "Script.Class" with Client domain. Ex: Script.Class.ClientMain.MyGetAnnotationTable. 
            Prototype: public DataTable GetAnnotationTableMethod(TTrendChart trend, string[] tagNames, object xMinValue, object xMaxValue, bool showTagNotes, bool showTimeNotes/showXValueNotes, bool showRangeEvents).
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.AddNoteMethod">
            <summary>
            Full AddNoteMethod method name in "Script.Class" with Client domain. Ex: Script.Class.ClientMain.MyAddNoteMethod. 
            Prototype: public void AddNote(TTrendChart trend, string tagName, object xValue, double yValue). Note TagName can be null
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.AddRangeEventMethod">
            <summary>
            Full AddRangeEventMethod method name in "Script.Class" with Client domain. Ex: Script.Class.ClientMain.MyAddRangeEventMethod. 
            Prototype: public void AddRangeEventMethod(TTrendChart trend, string[] tagNames, DateTime start, TimeSpan duration).
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.MouseClickAnnotationMethod">
            <summary>
            Full MouseClickAnnotationMethod method name in "Script.Class" with Client domain. Ex: Script.Class.ClientMain.MyMouseClickAnnotationMethod. 
            Prototype: public void MouseClickAnnotationMethod(MouseButtonEventArgs e, bool isEvent, string identification, string title, string contents, string color, object xValue, double yValue, double duration).
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.IsPaused">
            <summary>
            Paused
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.StartDateTime">
            <summary>
            StartDateTime
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.EndDateTime">
            <summary>
            EndDateTime
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.CursorOutput">
            <summary>
            CursorOutput
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.CursorPosition">
            <summary>
            CursorPosition
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.VerticalCursor">
            <summary>
            VerticalCursor
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.XStartValue">
            <summary>
            XStartValue
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.XEndValue">
            <summary>
            XEndValue
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.XLabelFormat">
            <summary>
            XLabelFormat
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.XLabels">
            <summary>
            XLabels
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.YLabelFormat">
            <summary>
            YLabelFormat
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.YLabels">
            <summary>
            YLabels
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.Pens">
            <summary>
            Pens
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.SelectPenIndex">
            <summary>
            SelectPenIndex - Auxiliary to implement default TrendPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.CanNextZoom">
            <summary>
            CanNextZoom - Auxiliary to implement default TrendPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.SelectedSetDuration">
            <summary>
            SelectedSetDuration - Auxiliary to implement default TrendPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.SelectedSetStartDateTime">
            <summary>
            SelectedSetStartDateTime - Auxiliary to implement default TrendPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.CanBackZoom">
            <summary>
            CanBackZoom - Auxiliary to implement default TrendPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.BackZoom">
            <summary>
            BackZoom - Auxiliary to implement default TrendPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.NextZoom">
            <summary>
            NextZoom - Auxiliary to implement default TrendPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.EnableMouseCursorConnection">
            <summary>
            EnableMouseCursorConnection - Auxiliary to implement default TrendPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.StackPens">
            <summary>
            StackPens - Auxiliary to implement default TrendPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.MergeSameYScales">
            <summary>
            MergeSameYScales - Auxiliary to implement default TrendPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.IsYScaleDefault">
            <summary>
            IsYScaleDefault - Auxiliary to implement default TrendPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.IsYScaleAuto">
            <summary>
            IsYScaleAuto - Auxiliary to implement default TrendPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.IsYScaleCombined">
            <summary>
            IsYScaleCombined - Auxiliary to implement default TrendPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.TimeBeforeNow">
            <summary>
            TimeBeforeNow - Auxiliary to implement default TrendPage
            </summary>
        </member>
        <member name="P:T.Modules.ClientStation.ClientTrendChart.GridLinesBrush">
            <summary>
            GridLinesBrush - Auxiliary to implement default TrendPage
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientTrendChart.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.ClientStation.ClientTrendChart.SetIsRealTime(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set IsRealTime property
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientTrendChart.SetIsPaused(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set IsRealTime property
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientTrendChart.SetTimeBeforeNow(System.Object,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,T.Kernel.Core.eRunEvent,System.Int64,System.Func{System.Boolean},System.String)">
            <summary>
            Set IsRealTime property
            </summary>
        </member>
        <member name="M:T.Modules.ClientStation.ClientTrendChart.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Dataset.ModuleDataset">
            <summary>
            Class for Dataset operation.
            </summary>
        </member>
        <member name="T:T.Modules.Dataset.ModuleDataset.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.ModuleDataset.File">
            <summary>
            Provides access to DatasetFile objects.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.ModuleDataset.DB">
            <summary>
            Provides access to DatasetDB objects.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.ModuleDataset.Table">
            <summary>
            Provides access to the DatasetTable objects.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.ModuleDataset.Query">
            <summary>
            Provides access to DatasetQuery objects.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.ModuleDataset.RunReadOnly">
            <summary>
            Flag indicating Dataset module running as read only mode 
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.ModuleDataset.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Dataset.ModuleDataset.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Dataset.LinkColumnObjRef">
            <summary>
            Class used to box ObjRef and Column name
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.LinkColumnObjRef.obj">
            <summary>
             ObjRef
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.LinkColumnObjRef.objName">
            <summary>
            ObjName
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.LinkColumnObjRef.columnName">
            <summary>
            Column Name        
            </summary>
        </member>
        <member name="T:T.Modules.Dataset.DatasetsDBs">
            <summary>
            Class for DatasetDBList operation.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetsDBs.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetsDBs.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Dataset.DatasetDB">
            <summary>
            Class for DatasetDB operation.
            </summary>
        </member>
        <member name="T:T.Modules.Dataset.DatasetDB.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetDB.Id">
            <summary>
            Object ID (Internal Use).
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetDB.Provider">
            <summary>
            Selected DB provider.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetDB.ConnectionString">
            <summary>
            String used to connect with the database.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetDB.Database">
            <summary>
            Name of the DB object Database.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetDB.LogonPassword">
            <summary>
            Logon Password used to connect with the database.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetDB.TimeoutControl">
            <summary>
            Timeout used with database control
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetDB.Level">
            <summary>
            ReadOnly property with levels configured to DB object.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetDB.Category">
            <summary>
            ReadOnly property with categories configured to DB object.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetDB.ServerIP">
            <summary>
            ReadOnly property with Server IP configured to use a remote gateway.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetDB.OpenStatusMessage">
            <summary>
            Open status message
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetDB.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetDB.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:T.Modules.Dataset.DatasetDB.CopySettingsFromSourceDB(System.String)" -->
        <member name="T:T.Modules.Dataset.DatasetsFiles">
            <summary>
            Class for DatasetFileList operation.
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetsFiles.isRunning">
            <summary>
            Flag that indicate the module state
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetsFiles.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetsFiles.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Dataset.DatasetFile">
            <summary>
            Class for DatasetFile operation.
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetFile.objRefList">
            <summary>
             ObjRef List of maping objects
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetFile.objectNameList">
            <summary>
            ObjName List of maping objects
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetFile.valueList">
            <summary>
            Value List of maping objects
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetFile.maxIndexList">
            <summary>
            Max Offset Index (only in the first objref of array)
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetFile.initIndexList">
            <summary>
            Initial Offset Index (only in the first objref of array)
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetFile.datasetRoot">
            <summary>
            Reference to main module
            </summary>
        </member>
        <member name="T:T.Modules.Dataset.DatasetFile.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.Id">
            <summary>
            Object ID (Internal Use).
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.FileName">
            <summary>
            Complete path of the file that will be created or loaded.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:T.Modules.Dataset.DatasetFile.FileType" -->
        <member name="P:T.Modules.Dataset.DatasetFile.Objects">
            <summary>
            This property represents the configured objects to receive or send values to external file.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.Description">
            <summary>
            Gets the description of the configured DatasetFile.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.Disable">
            <summary>
            Disables the commands to the DatasetFile when the value is greater than zero.
            <para>0 = Enables the commands to the DatasetFile </para>
            <para>1 = Disables the commands to the DatasetFile</para>
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.LastStatus">
            <summary>
            Gets the status of the last (most recent) asynchronous operation.
            <para>zero = success </para>
            <para>different than zero = error code </para>
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.LastStatusMessage">
            <summary>
            Gets the status message of the last (most recent) asynchronous operation.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.Completed">
            <summary>
            The value of this property is incremented when an operation is concluded.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.Save">
             <summary>
             Sends an asynchronous Save command when the value is changed.
             </summary>
             <remarks>The value of the SaveExecuted property is changed when the operation is concluded.</remarks>
             <example>
             C# Example
             <code>
             if (@Dataset.File.File1Unicode.Save.Equals(0))
             @Dataset.File.File1Unicode.Save= 1;
             else
            @Dataset.File.File1Unicode.Save= 0;
             </code>
             </example>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.Load">
             <summary>
             Sends an asynchronous Load command when the value is changed.
             </summary>
             <remarks>The value of the LoadExecuted property is changed when the operation is concluded. </remarks>
             <example>
             C# Example
             <code>
             if (@Dataset.File.File1Unicode.Load.Equals(0))
             @Dataset.File.File1Unicode.Load = 1;
             else
            @Dataset.File.File1Unicode.Load = 0;
             </code>
             </example>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.Delete">
             <summary>
             Sends an asynchronous Delete command when the value is changed.
             </summary>
             <remarks>The value of the DeleteExecuted property is changed when the operation is concluded. </remarks>
             <example>
             C# Example
             <code>
             if (@Dataset.File.File1Unicode.Load.Equals(0))
             @Dataset.File.File1Unicode.Delete = 1;
             else
            @Dataset.File.File1Unicode.Delete = 0;
             </code>
             </example>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.Initialize">
            <summary>
            Sends an asynchronous Initialize command when the value is changed.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetFile.SaveCommandAsync">
            <summary>
            Saves the values of the tags configured in the Objects property to the file indicated by the FileName property. 
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetFile.DeleteCommandAsync">
            <summary>
            Delete the values of the tags configured in the Objects property to the file indicated by the FileName property
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetFile.LoadCommandAsync">
            <summary>
            Loads the values of the tags configured in the Objects property from the file indicated by the FileName property. 
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetFile.InitializeCommandAsync">
            <summary>
            Execute the method initialize command. 
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.LoadExecuted">
            <summary>
            The value of this property is changed when the asynchronous Load command is completed.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.SaveExecuted">
            <summary>
            The value of this property is changed when the asynchronous Save command is completed.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.DeleteExecuted">
            <summary>
            The value of this property is changed when the asynchronous Delete command is completed.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.Level">
            <summary>
            ReadOnly property with levels configured to DatasetFile.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.Category">
            <summary>
            ReadOnly property with categories configured to DatasetFile object.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.XmlSchemaType">
            <summary>
            ReadOnly property with Xml Schema Type configured on DatasetFile XML.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetFile.XmlSchemaFile">
            <summary>
            ReadOnly property with Xml Schema File configured on DatasetFile XML.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetFile.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetFile.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Dataset.DatasetFile.BindProperties">
            <summary>
            Set Bind property
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetFile.UnBindProperties">
            <summary>
            UnBind property
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetFile.ReceiveLoadCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Receive event of load command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetFile.ReceiveSaveCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Receive event of save command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetFile.FillObjectLists">
            <summary>
            Fill the Object Lists with Name, ObjRef, Initial and Max index 
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetFile.GetRefListValue">
            <summary>
            Get value from ObjRefList and update in the ValueList
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetFile.InitializeListValue">
            <summary>
            Initializes the ValueList
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetFile.UpdateObjRefValueFromValueList">
            <summary>
            Update value in the ObjRefList from ValueList
            </summary>
        </member>
        <member name="T:T.Modules.Dataset.DatasetsQueries">
            <summary>
            Class for DatasetQueryList operation.
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetsQueries.isRunning">
            <summary>
            Flag that indicate the module state
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetsQueries.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetsQueries.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Dataset.DatasetQuery">
            <summary>
            Class for DatasetQuery operation.
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetQuery.datasetRoot">
            <summary>
             Reference to main module (dataset)
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetQuery.linkList">
            <summary>
            List of ObjRef configured 
            used to set and get value from kernel/database
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetQuery.dbRef">
            <summary>
            DB reference
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetQuery.currentDatatable">
            <summary>
            Current Data Table
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetQuery.dbHandle">
            <summary>
            Handle of Database in the server service
            </summary>
        </member>
        <member name="T:T.Modules.Dataset.DatasetQuery.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.Id">
            <summary>
            Object ID (Internal Use).
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.DB">
            <summary>
            Gets the DB configured in EditDatasetsTables.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.SqlStatement">
            <summary>
            Defines the SQL command to be executed.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.Mapping">
            <summary>
            Gets the mapping of the resulting DataTable columns with the Tags.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.Description">
            <summary>
            Gets the description of the DatasetQuery.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.Disable">
            <summary>
            Disables the commands to the DatasetQuery when the value is greater than zero.
            <para>0 = Enables the commands to the DatasetQuery</para>
            <para>1 = Disables the commands to the DatasetQuery</para>
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.LastStatus">
            <summary>
            Gets the status of the last (most recent) asynchronous operation.
            <para>zero = success</para>
            <para>different than zero = error code </para>
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.LastStatusMessage">
            <summary>
            Gets the status message of the last (most recent) asynchronous operation, where an empty string indicates success.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.Completed">
            <summary>
            The value of this property is incremented when an asynchronous operation is concluded.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.CursorIndex">
            <summary>
            Defines the current row position in the resulting DatasetTable.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.RowCount">
            <summary>
            Gets the total number of rows in the resulting DatasetTable.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.Execute">
             <summary>
             Sends an asynchronous Execute command when the value is changed.
             </summary>
             <remarks>The value of the ExecutedCompleted property is changed when the operation is concluded. </remarks>
             <example>
             C# Example:
             <code>
             if (@Dataset.Query.Query1.Execute.Equals(0))
             @Dataset.Query.Query1.Execute = 1;
            else
            @Dataset.Query.Query1.Execute = 0;
             </code>
             </example>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.Select">
             <summary>
             Sends an asynchronous Select command when the value is changed.
             </summary>
             <remarks>The value of the SelectExecuted property is changed when the operation is concluded.  </remarks>
             <example>
             C# Example:
             <code>
             if (@Dataset.Query.Query1.Select.Equals(0))
             @Dataset.Query.Query1.Select= 1;
            else
            @Dataset.Query.Query1.Select= 0;
             </code>
             </example>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.Next">
            <summary>
            Sends an asynchronous Next command when the value is changed.
            </summary>
            <remarks>The value of the NextExecuted property is changed when the operation is concluded.</remarks>
            <example>
            C# Example:
            <code>
            if (@Dataset.Query.Query1.Next.Equals(0))
              @Dataset.Query.Query1.Next = 1;
            else
              @Dataset.Query.Query1.Next = 0;
            </code>
            </example>
        </member>
        <member name="M:T.Modules.Dataset.DatasetQuery.ExecuteCommandAsync">
            <summary>
            Execute an asynchronous command according to the SqlStatement
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:T.Modules.Dataset.DatasetQuery.SelectCommandAsync" -->
        <!-- Badly formed XML comment ignored for member "M:T.Modules.Dataset.DatasetQuery.SelectCommandWithStatusAsync(T.Library.TRef{System.Int32})" -->
        <member name="M:T.Modules.Dataset.DatasetQuery.BeginSelectCommandAsync(System.AsyncCallback)">
            <summary>
            Begin executing an asynchronous Select command on the DatasetQuery
            </summary>
            <param name="callback">Callback that will be called after executing</param>
            <returns>Reference to object that should be passed to EndSelectCommand method while executing callback.</returns>
        </member>
        <member name="M:T.Modules.Dataset.DatasetQuery.EndSelectCommand(System.IAsyncResult)">
            <summary>
            End executing an asynchronous Select command on the DatasetTable
            </summary>
            <param name="ar">Reference to object returned by BeginSelectCommand method</param>
            <param name="statusMessage">Return status message</param>
            <returns>If sucess returs 0 else error code</returns>
        </member>
        <member name="M:T.Modules.Dataset.DatasetQuery.NextCommandAsync">
            <summary>
            Executes a synchronous Next command that increments the value of the CursorIndex property.
            </summary>
            <remarks>The tags configured in the mapping column will receive the value of the next row.</remarks>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.AsyncContents">
            <summary>
            Contains the TDataTable that resulted from one of the asynchronous commands, such as Select or Next.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.LocalContents">
            <summary>
            Contains the TDataTable that resulted from one of the sync commands, such as SelectCommand or NextCommand.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.SelectExecuted">
            <summary>
            The value of this property is changed when the asynchronous Select command is completed.
            </summary>
            <remarks>The value of the SelectExecutedproperty is changed when the operation is concluded.</remarks>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.NextExecuted">
            <summary>
            The value of this property is changed when the asynchronous Next command is completed.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.ExecuteCompleted">
            <summary>
            The value of this property is changed when the asynchronous Execute command is completed.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.Level">
            <summary>
            ReadOnly property with levels configured to DatasetQuery object.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.Category">
            <summary>
            ReadOnly property with categories configured to DatasetQuery object.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetQuery.DateTimeMode">
            <summary>
            Mapping DateTime Mode: (0-Local, 1-UTC)
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetQuery.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetQuery.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Dataset.DatasetQuery.FillObjectLists">
            <summary>
            Fill the Object Lists with ObjRef, and Column
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetQuery.BindProperties">
            <summary>
            Set Bind property
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetQuery.UnBindProperties">
            <summary>
            UnBind property
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetQuery.ReceiveSelectCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Receive event of select command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetQuery.ReceiveNextCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Receive event of next command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetQuery.ReceiveExecuteCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Receive event of execute command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetQuery.GetValueFromDataTable">
            <summary>
            Get value from DataTable (current cursor index) and set in the kernal/database
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetQuery.ResetCurrentDataTable">
            <summary>
            Method called to reset datatable when Redundancy switch between activated and deactivated
            Next command must failed if called before a new select
            </summary>
        </member>
        <member name="T:T.Modules.Dataset.DatasetRun">
            <summary>
            Test class
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetRun.isRunning">
            <summary>
            Flag that indicate the module state
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetRun.#ctor(T.Kernel.Core.TModule,T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Dataset.DatasetRun.HandlerForOnlineConfig(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called for updating main DataSet (configuration online).
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetRun.HandlerUpdateModuleInformation(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetRun.OnStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetRun.OnAfterStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module after starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetRun.OnInitialWaitingValueFromServer(System.Int32)">
            <summary>
            Specifies actions to take when the module waiting initial value from server.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetRun.OnStop(System.Boolean)">
            <summary>
            Finish module
            </summary>
            <param name="isHotStarting">Flag indicating whether module should shutdown prepared to after hot starting</param>
        </member>
        <member name="P:T.Modules.Dataset.DatasetRun.CanPauseAndContinue">
            <summary>
            Can Pause And Continue Module
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetRun.CanStop">
            <summary>
            Get a value indicating whether the module can be stopped once it has started.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetRun.OnPause">
            <summary>
            Specifies actions to take when a module pauses.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetRun.OnContinue">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being paused.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetRun.OnDeactivate">
            <summary>
            Specifies actions to take when a module is deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetRun.OnActivate">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetRun.GetModuleMainName">
            <summary>
            Return task main name
            </summary>
            <returns>Task main name</returns>
        </member>
        <member name="M:T.Modules.Dataset.DatasetRun.GetCaption">
            <summary>
            Return task caption
            </summary>
            <returns>Task caption</returns>
        </member>
        <member name="T:T.Modules.Dataset.DatasetsTables">
            <summary>
            Class for DatasetTableList operation.
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetsTables.isRunning">
            <summary>
            Flag that indicate the module state
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetsTables.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetsTables.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Dataset.DatasetTable">
            <summary>
            Class for DatasetTable operation.
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetTable.datasetRoot">
            <summary>
            Reference to main dataset 
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetTable.linkList">
            <summary>
            List of ObjRef configured 
            used to set and get value from kernel/database
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetTable.dbRef">
            <summary>
            DB reference
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetTable.currentDatatable">
            <summary>
            Current Data Table
            </summary>
        </member>
        <member name="F:T.Modules.Dataset.DatasetTable.dbHandle">
            <summary>
            Handle of Database in the server service
            </summary>
        </member>
        <member name="T:T.Modules.Dataset.DatasetTable.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.Id">
            <summary>
            Object ID (Internal Use).
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.DB">
            <summary>
            Gets the DB configured in EditDatasetsTables
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.TableName">
            <summary>
            Gets the name of the DataTable.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.WhereCondition">
            <summary>
            Defines the Where condition for the DatasetTable.
            </summary>
            <remarks>The SQL WHERE clause is used to select data conditionally.</remarks>
            <example>//The select command will return only the items where the DateAdded is greather than 01/01/2010
            <code>
            @Dataset.Table.table1.WhereCondition = "DateAdded > '01/01/2010'";
            </code>
            </example>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.Access">
            <summary>
            Access Type of the DatasetTable.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.Mapping">
            <summary>
            Gets the mapping of the DataTable columns with the Tags.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.Description">
            <summary>
            Gets the description of the DatasetTable.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.Disable">
            <summary>
            Disables the commands to the DatasetTable when the value is greater than zero.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.Select">
            <summary>
            Sends an asynchronous Select command when the value is changed.
            </summary>
            <remarks>The value of the SelectExecuted property is changed when the operation is concluded. </remarks>
            <example>
            C# Example:
            <code>
            if (@Dataset.Table.table1.Select.Equals(0))
            @Dataset.Table.table1.Select = 1;
            else
            @Dataset.Table.table1.Select = 0;
            </code>
            </example>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.Next">
            <summary>
            Sends an asynchronous Next command when the value is changed.
            </summary>
            <remarks>The value of the NextExecuted property is changed when the operation is concluded. </remarks>
            <example>
            C# Example:
            <code>
            if (@Dataset.Table.table1.Next.Equals(0))
            @Dataset.Table.table1.Next= 1;
            else
            @Dataset.Table.table1.Next = 0;
            </code>
            </example>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.Insert">
            <summary>
            Sends an asynchronous Insert command when the value is changed.
            </summary>
            <remarks>The value of the NextExecuted property is changed when the operation is concluded. </remarks>
            <example>
            C# Example:
            <code>
            if (@Dataset.Table.table1.Insert.Equals(0))
            @Dataset.Table.table1.Insert= 1;
            else
            @Dataset.Table.table1.Insert = 0;
            </code>
            </example>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.Update">
            <summary>
            Sends an asynchronous Update command when the value is changed.
            </summary>
            <remarks>The value of the UpdateExecuted property is changed when the operation is concluded.</remarks>
            <example>
            C# Example:
            <code>
            if (@Dataset.Table.table1.Update.Equals(0))
            @Dataset.Table.table1.Update = 1;
            else
            @Dataset.Table.table1.Update = 0;
            </code>
            </example>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.Delete">
            <summary>
            Sends an asynchronous Delete command when the value is changed.
            </summary>
            <remarks>The value of the DeleteExecuted property is changed when the operation is concluded. </remarks>
            <example>
            C# Example:
            <code>
            if (@Dataset.Table.table1.Delete.Equals(0))
            @Dataset.Table.table1.Delete= 1;
            else
            @Dataset.Table.table1.Delete = 0;
            </code>
            </example>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.LastStatus">
            <summary>
            Gets the status of the last (most recent) asynchronous operation.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.LastStatusMessage">
            <summary>
            Gets the status message of the last (most recent) asynchronous operation, where an empty string signifies success.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.Completed">
            <summary>
            The value of this property is incremented when an asynchronous operation is concluded.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.CursorIndex">
            <summary>
            Defines the current row position in the DatasetTable.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.RowCount">
            <summary>
            Gets the total number of rows in the DatasetTable.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:T.Modules.Dataset.DatasetTable.SelectCommandAsync" -->
        <!-- Badly formed XML comment ignored for member "M:T.Modules.Dataset.DatasetTable.SelectCommandWithStatusAsync(T.Library.TRef{System.Int32})" -->
        <member name="M:T.Modules.Dataset.DatasetTable.BeginSelectCommandAsync(System.AsyncCallback)">
            <summary>
            Begin executing an asynchronous Select command on the DatasetTable
            </summary>
            <param name="callback">Callback that will be called after executing</param>
            <returns>Reference to object that should be passed to EndSelectCommand method while executing callback.</returns>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.EndSelectCommand(System.IAsyncResult)">
            <summary>
            End executing an asynchronous Select command on the DatasetTable
            </summary>
            <param name="ar">Reference to object returned by BeginSelectCommand method</param>
            <returns>If sucess returs 0 else error code</returns>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.NextCommandAsync">
            <summary>
            Executes an asynchronous Next command that increments the value of the CursorIndex property.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.InsertCommandAsync">
            <summary>
            Inserts the values from the tags configured in the mapping column into the DatasetTable at the position indicated by the CursorIndex property.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.ReplaceAllContentsAsync(System.Data.DataTable)">
            <summary>
            Replace all contents of datatable on database. The current datatable is deleted and the new datatable is inserted.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.ReplaceAllContentsWithStatusAsync(System.Data.DataTable,T.Library.TRef{System.Int32})">
            <summary>
            Replace all contents of datatable on database. The current datatable is deleted and the new datatable is inserted.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.UpdateFromDataTableAsync(System.Data.DataTable,System.Boolean)">
            <summary>
            Update all contents of datatable on database. The current datatable is updated with data of new datatable.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.UpdateFromDataTableWithStatusAsync(System.Data.DataTable,T.Library.TRef{System.Int32},System.Boolean)">
            <summary>
            Update all contents of datatable on database. The current datatable is updated with data of new datatable.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.UpdateCommandAsync">
            <summary>
            Updates the current row of the DatasetTable with the values from the tags configured in the mapping column.
            </summary>
            <remarks>The index of the current row is defined by the CursorIndex property.</remarks>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.UpdateCommandWithStatusAsync(T.Library.TRef{System.Int32})">
            <summary>
            Updates the current row of the DatasetTable with the values from the tags configured in the mapping column, and provides status information.
            </summary>
            <remarks>The index of the current row is defined by the CursorIndex property.</remarks>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.DeleteCommandAsync">
            <summary>
            Deletes the current row of the DatasetTable.
            </summary>
            <remarks>The index of the current row is defined by the CursorIndex property.</remarks>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.AsyncContents">
            <summary>
            Contains the TDataTable resulting from one of the asynchronous commands, such as Select or Update.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.LocalContents">
            <summary>
            Contains the TDataTable resulting from one of the synchronous commands, such as SelectCommand or UpdateCommand.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.SelectExecuted">
            <summary>
            The value of this property is changed when the asynchronous Select command is completed.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.NextExecuted">
            <summary>
            The value of this property is changed when the asynchronous Next command is completed.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.InsertExecuted">
            <summary>
            The value of this property is changed when the asynchronous Insert command is completed.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.UpdateExecuted">
            <summary>
            The value of this property is changed when the asynchronous Update command is completed.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.DeleteExecuted">
            <summary>
            The value of this property is changed when the asynchronous Delete command is completed.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.Level">
            <summary>
            ReadOnly property with levels configured on DatasetTable object.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.Category">
            <summary>
            ReadOnly property with categories configured on DatasetQuery object.
            </summary>
        </member>
        <member name="P:T.Modules.Dataset.DatasetTable.DateTimeMode">
            <summary>
            Mapping DateTime Mode: (0-Local, 1-UTC)
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.FillObjectLists">
            <summary>
            Fill the Object Lists with ObjRef, and Column. Return flag indicating whether connection already try to initialize.
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.BindProperties">
            <summary>
            Set Bind property
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.UnBindProperties">
            <summary>
            UnBind property
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.ReceiveSelectCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Receive event of select command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.ReceiveNextCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Receive event of next command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.ReceiveInsertCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Receive event of insert command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.ReceiveUpdateCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Receive event of update command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.ReceiveDeleteCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Receive event of delete command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.GetValueFromDataTable">
            <summary>
            Get value from DataTable (current cursor index) and set in the kernal/database
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.GetDataTableFromValue">
            <summary>
            Get value from kernal/database and set in the DataTable (current cursor index)
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.GetDataTableFromInsertedValue(System.String@)">
            <summary>
            Get value from kernal/database and insert in the DataTable 
            </summary>
        </member>
        <member name="M:T.Modules.Dataset.DatasetTable.ResetCurrentDataTable">
            <summary>
            Method called to reset datatable when Redundancy switch between activated and deactivated
            Next command must failed if called before a new select
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalChannelCfg.drvNodeList">
            <summary>
            
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalChannelCfg.nodeLink">
            <summary>
            Node Link ChannelCFg
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalChannelCfg.chCfg">
            <summary>
            ChannelCfg linked with list of Channel Internal
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalChannelCfg.commAPIListAvailable">
            <summary>
            Public member with list of channel linked with a specified channelcfg
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalChannelCfg.objDrvListAvailable">
            <summary>
            List of ObjDrv from DLL Assembly avaible to link with ThreadExec
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalChannelCfg.ChCfg">
            <summary>
            Get and Set of ChannelCfg
            </summary>
        </member>
        <member name="M:T.Modules.Device.InternalChannelCfg.GetObjDrvIntFreeFromList(T.Modules.Device.InternalObjDrv@)">
            <summary>
            gets the first available ObjDrvInternal object from the list.
            </summary>
            <param name="oDrvInt">reference to the available ObjDrvInternal object</param>
            <returns>
            true - the ObjDrvInternal object has been got successfully
            false - failed to get ObjDrvInternal ocject.
            </returns>
        </member>
        <member name="T:T.Modules.Device.ModuleDevice">
            <summary>
            Class for Device operation.
            </summary>
        </member>
        <member name="T:T.Modules.Device.ModuleDevice.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Device.ModuleDevice.Channel">
            <summary>
            Access to DeviceChannel objects. 
            </summary>
        </member>
        <member name="P:T.Modules.Device.ModuleDevice.Node">
            <summary>
            Access to DeviceNode objects. 
            </summary>
        </member>
        <member name="P:T.Modules.Device.ModuleDevice.AccessType">
            <summary>
            Access to DeviceAccessType objects. 
            </summary>
        </member>
        <member name="M:T.Modules.Device.ModuleDevice.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Device.ModuleDevice.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Device.DevicesAccessTypes">
            <summary>
            Class for DeviceAccessTypeList operation.
            </summary>
        </member>
        <member name="M:T.Modules.Device.DevicesAccessTypes.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Device.DevicesAccessTypes.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Device.DeviceAccessType">
            <summary>
            Class for DeviceAccessType operation.
            </summary>
        </member>
        <member name="T:T.Modules.Device.DeviceAccessType.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.ReadPolling">
            <summary>
            When set to true, it indicates that the read Pooling is enabled for this device point. 
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.ReadPollingRate">
            <summary>
            Indicates the Pooling rate for the group of points.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.WriteEventEnabled">
            <summary>
            When set to true, the device point is written to the device when the device's value changes.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.ReadOnStartup">
            <summary>
            When set to true, the device point will be read on the startup of the Devices Module. 
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.AcceptUnsolicited">
            <summary>
            When set to true, the device points are allowed to receive unsolicited messages. 
            </summary>
            <remarks>When set to true, the device points are allowed to receive unsolicited messages. </remarks>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.Disable">
            <summary>
            When set to true, all group related with this access type is disabled. 
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.ReadTrigger">
            <summary>
            Object configured to trigger a read command action.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.ReadStatus">
            <summary>
            Object configured to receive the read command action status.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.ReadCompleted">
            <summary>
            Object configured to be triggered when a read command action is completed..
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.WriteTrigger">
            <summary>
            Object configured to trigger a write command action.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.WriteStatus">
            <summary>
            Object configured to receive the write command action status.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.WriteCompleted">
            <summary>
            Object configured to be triggered when a write command action is completed.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.BlockCommand">
            <summary>
            Block command configuration. Read protocol documentation to more information.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.PendingRead">
            <summary>
            Number of pending read on queue to be executed.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.PendingWrite">
            <summary>
            Number of pending write on queue to be executed.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.ForcedRead">
            <summary>
            Flag used to force a read command.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.ForcedWrite">
            <summary>
            Flag used to force a write command.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceAccessType.IsDeviceControl">
            <summary>
            Flag IsDeviceControl configuration. Read protocol documentation to more information.
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceAccessType.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Device.DeviceAccessType.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Device.DeviceAccessType.ForceReadTrigger(System.Int32)">
            <summary>
            Forces read trigger
            </summary>
            <param name="timeout">Timeout in ms</param>
            <returns>Status. 0: Success, -1: Device is not running, -2: Tag in ReadTrigger not defined, -3: Reserved, -4: Timeout, -5: Tag In ReadStatus not defined, Others: Protocol error</returns>
        </member>
        <member name="M:T.Modules.Device.DeviceAccessType.ForceWriteTrigger(System.Int32)">
            <summary>
            Forces writer trigger
            </summary>
            <param name="timeout">Timeout in ms</param>
            <returns>Status. 0: Success, -1: Device is not running, -2: Tag in WriteTrigger not defined, -3: Reserved, -4: Timeout, -5: Tag In WriteStatus not defined, Others: Protocol error</returns>
        </member>
        <member name="T:T.Modules.Device.DevicesChannels">
            <summary>
            Class for DeviceChannelList operation.
            </summary>
        </member>
        <member name="M:T.Modules.Device.DevicesChannels.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Device.DevicesChannels.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Device.DeviceChannel">
            <summary>
            Class for DeviceChannel operation.
            </summary>
        </member>
        <member name="T:T.Modules.Device.DeviceChannel.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.Status">
            <summary>
            Current status for this Channel. 
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.InitialState">
            <summary>
            Initial state of channel.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.LastErrorCode">
            <summary>
            Last (most recent) Error Status Code that occurred in this Channel.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.LastErrorDateTime">
            <summary>
            TimeStamp of the last (most recent) error in this Channel.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.SuccessAmount">
            <summary>
            Amount of communication executed with success.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.FailAmount">
            <summary>
            Amount of communication executed with fail.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.AverageTime">
            <summary>
            Avarage time of communication.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.AverageCycleTime">
            <summary>
            Avarage cycle time of communication.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.AverageReadCycleTime">
            <summary>
            Average read cycle time of communication.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.Activity">
            <summary>
            Activity indication. 
            <para>The device module toggles this value to each operation completed in this Channel.</para>
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.Disable">
            <summary>
            Indicates whether the Channel is Disabled
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.IsRunning">
            <summary>
            Indicates whether the Channel is running.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.ResetStatistics">
            <summary>
            ResetStatistics of module
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.Level">
            <summary>
            ReadOnly property with levels configured on DeviceChannel object.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.Category">
            <summary>
            ReadOnly property with categories configured on DeviceChannel object.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.DriverVersion">
            <summary>
            Indicates the driver version
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.Diagnostics">
            <summary>
            Indicates a string with information to channel diagnostics
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.ClearReadQueue">
            <summary>
            Flag used to clear the read queue.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.ClearWriteQueue">
            <summary>
            Flag used to clear the write queue.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.IsStarted">
            <summary>
            Flag indicating whether Dataset module was full started 
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.StartCounter">
            <summary>
            Counter while starting module
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.SleepTime">
            <summary>
            SleepTime of module
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.ResetModule">
            <summary>
            ResetModule of module
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.ProcessName">
            <summary>
            Process name
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.ProcessPID">
            <summary>
            Process PID
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.MaxThreads">
            <summary>
            Max Threads
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.WatchDog">
            <summary>
            WatchDog
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceChannel.DeactivateCounter">
            <summary>
            Counter is increased during module deactivation process
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceChannel.Start(System.Int32)">
            <summary>
            Method to start channel.
            </summary>
            <param name="timeoutInSeconds">
            Timeout in seconds.
            </param>
            <returns> Return if channel is running.</returns>
        </member>
        <member name="M:T.Modules.Device.DeviceChannel.Stop(System.Int32)">
            <summary>
            Method to stop channel
            </summary>
            <param name="timeoutInSeconds">
            Timeout in seconds.
            </param>
        </member>
        <member name="M:T.Modules.Device.DeviceChannel.BeginStart">
            <summary>
            Method to begin start channel.
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceChannel.BeginStop">
            <summary>
            Method to begin stop channel
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceChannel.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Device.DeviceChannel.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Device.DevicesNodes">
            <summary>
            Class for DeviceNodeList operation.
            </summary>
        </member>
        <member name="M:T.Modules.Device.DevicesNodes.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Device.DevicesNodes.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Device.DeviceNode">
            <summary>
            Class for DeviceNode operation.
            </summary>
        </member>
        <member name="T:T.Modules.Device.DeviceNode.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.Status">
            <summary>
            Current status for this Node.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.LastErrorCode">
            <summary>
            Last Error Code status (most recent) that occurred in this Node.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.LastErrorDateTime">
            <summary>
            DateTime for the last (most recent) error in this Node.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.Activity">
            <summary>
            Activity indication.
            <para>The device module toggles this value to each operation completed in this Node.</para>
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.ActivityCounter">
            <summary>
            Activity counter indication.
            <para>The device module increments this value to each operation completed in this Node.</para>
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.PrimaryStation">
            <summary>
            Current primary station for this Node. 
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.BackupStation">
            <summary>
            Current backup station for this Node. 
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.FailOverStation">
            <summary>
            Current backup station for this Node. 
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.IsRedundancyEnabled">
            <summary>
            Node redundancy indication.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.IsPrimary">
            <summary>
            PrimaryStation active indication. 
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.IsBackup">
            <summary>
            BackupStation active indication.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.IsFailOver">
            <summary>
            IsFailOver active indication.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.Disable">
            <summary>
            Indicates whether the Node is disabled
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.Level">
            <summary>
            ReadOnly property with levels configured on DeviceNode object.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.Category">
            <summary>
            ReadOnly property with categories configured on DeviceNode object.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.InvalidAddresses">
            <summary>
            String with all invalid address detected on device startup.
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.DisableAutoSwitch">
            <summary>
            Disable auto switch when using redundancy
            </summary>
        </member>
        <member name="P:T.Modules.Device.DeviceNode.ForceSwitch">
            <summary>
            Force switch redundancy
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceNode.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Device.DeviceNode.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Device.DeviceRun">
            <summary>
            Test class
            </summary>
            <summary>
            Test class
            </summary>
            <summary>
            Test class
            </summary>
            <summary>
            Test class
            </summary>
            <summary>
            Test class
            </summary>
            <summary>
            Test class
            </summary>
            <summary>
            Test class
            </summary>
            <summary>
            Test class
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.protocolName">
            <summary>
            Attribute used to store the dll name used by this driver module
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.tableChannel">
            <summary>
            Attribute used to store the configurartion tables
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.maxThreadPerDevice">
            <summary>
            Max number of threads per driver
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.currentMaxThreadPerDevice">
            <summary>
            MaxThread per driver configured by user
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.ChLink">
            <summary>
            List of Configured channels to this scpecific driver module
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.nodeLinkChCfg">
            <summary>
            Node Link ChannelCFg
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.internalChannelCfgList">
            <summary>
            List of Channel avaible to link in the ObjDrv objects - create from ChannelCfgList
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.dicCurrentInUseByIPPortOnShare">
            <summary>
            Dictionary containg number of CommAPI in use by IP/Port when share node connection is enabled
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.rdWrIntDrvBlockList">
            <summary>
            List of Virtual Groups to include reference in the ObjDrv
            the GrpCfg will be determined by IsSameGrp function
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.wrItemIntDrvBlockList">
            <summary>
            List of Virtual Groups - of a single item to include reference
            in the ObjDrv. Only to Write items.
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.drvObjAssembly">
            <summary>
            Assembly from driver Dll to link with ObjDrv
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.objDrvClassType">
            <summary>
             Type to ObjDrv
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.dllName">
            <summary>
            Assembly name
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.listOfWorkItemToExecuteBottomPriority">
            <summary>
            List of WorkItem (EventModule) queued to execute with Bottom priority
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.listOfWorkItemToExecuteTopPriority">
            <summary>
            List of WorkItem (EventModule) queued to execute with Top priority
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.listOfWorkItemToExecuteTopMostPriority">
            <summary>
            List of WorkItem (EventModule) queued to execute with TopMost priority
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.listOfAllReadWriteItem">
            <summary>
            List to link Read and Write Groups
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.sts">
            <summary>
            Object used to store info about Status and Performance
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.enableWriteGroup">
            <summary>
            Flag indicating whether write group is enabled
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.shouldSetInitialUndefinedTagQuality">
            <summary>
            Flag indicating whether should set initial undefined tag quality
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.enableCheckingWorkItemAfterWriting">
            <summary>
            Flag indicating whether checking Work Item after writing (only CUSTOM Interface) is enabled
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.enableUpdateTagsByCustomSetValueOnly">
            <summary>
            Flag indicating whether internally we never get the DrvItem and execute the SetValue. If true then the responsible to set value in this case is the own specific device code
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.customParseUserTypes">
            <summary>
            Flag indicating whether should use template as a communication point (and not its members)
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.useLastArrayPosition">
            <summary>
            Flag indicating whether must use last array position
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.disableReadEvent">
            <summary>
            Flag indicating whether read event is disabled
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.shouldCloseCommAPIAfterErrors">
            <summary>
            Flag indicating whether should close CommAPI when occurs any error
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.legacyAcceptUnsolicitedMsg">
            <summary>
            Flag indicating whether should work as legacy AcceptUnsolicitedMsg
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.enableQualityEvent">
            <summary>
            Flag indicating whether should quality event is enabled
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.autoCheckWatchDog">
            <summary>
            Flag indicating whether auto check WatchDog is enabled
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.nodeRedundancy">
            <summary>
            Flag indicating if Node Redundancy is active
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.configOnline">
            <summary>
            Flag indicating if config online is active
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:T.Modules.Device.DeviceRun.isRestartingByOnlineConfig" -->
        <member name="F:T.Modules.Device.DeviceRun.runReadOnly">
            <summary>
            flag indicating if runReadOnly is active
            </summary>
        </member>
        <member name="F:T.Modules.Device.DeviceRun.dicNodeConfigChangedForCustomOrOPC">
            <summary>
            List with flags indicating whether configuration nodes were changed (only valid for Custom or OPC)
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.#ctor(T.Kernel.Core.TModule,T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.LoadDrvAssembly">
             <summary>
             Validate and Load Drv Assembly
             </summary>
             <returns>
            
             </returns>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.CreateThreadPool">
            <summary>
            Create ThThreadPool and Manager to Driver Execution Task
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.ReadChannelCfgFromConfiguration">
            <summary>
            // Read ChannelCFG XMls
            XML:
            DriverName
                 ChannelsCfg Info
            </summary>
            <returns>
            false - Read channelcfg failed
            true -  Read channelcfg successfully
            </returns>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.CreateObjDrvListFromChannelCfg">
            <summary>
            Create ObjDrvList
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.CreateCommAPIListFromChannelCfg">
            <summary>
            Create ChannelList
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.CreateGrpCfgFromConfigurationFile">
             <summary>
             Create GroupCfgList
            
              - If there is online configuration, this method must be called
             to recreate the groups
            
            
             XML:
             DriverName
                  TagList
                      TagName
                          Station (not IP)
                          Item
                          Scan Info
                          Add / Mult
                          Read /Write
             </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.CreateGrpCfg(T.Modules.Device.InternalDrvBlock@,T.Modules.Device.InternalDrvBlock@,T.ProtocolAPI.DrvItem@,T.ProtocolAPI.DrvItem,System.Collections.Generic.List{T.Modules.Device.InternalDrvBlock},System.Collections.Generic.List{T.Modules.Device.InternalDrvBlock},T.ProtocolAPI.ProtocolBase)">
            <summary>
            this method verifies the items, checks which groups
            they must be and add the items to its respective lists.
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.CreateEventsAndFillGrpCfg">
            <summary>
            Create Events to GrpCfg
            Bind to Read - Scan Time or Trigger Change
            Bind to Write - Value Change
            Event only Read and Write unsolicted
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.OnStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.OnAfterStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module after starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.OnInitialWaitingValueFromServer(System.Int32)">
            <summary>
            Specifies actions to take when the module waiting initial value from server.
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.OnStop(System.Boolean)">
            <summary>
            Finish module
            </summary>
            <param name="isHotStarting">Flag indicating whether module should shutdown prepared to after hot starting</param>
        </member>
        <member name="P:T.Modules.Device.DeviceRun.CanStop">
            <summary>
            Get a value indicating whether the module can be stopped once it has started.
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.OnPause">
            <summary>
            Specifies actions to take when a module pauses.
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.OnContinue">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being paused.
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.OnDeactivate">
            <summary>
            Specifies actions to take when a module is deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.OnActivate">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.CustomModuleExecute(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Main function called all time to thread lists, events queued and threads
            </summary>
            <param name="sender">
            the module that send the event
            </param>
            <param name="e">
            the event received is not used.
            </param>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.HandleRuntimeEventStation(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.HandleRuntimeEventForceSwitch(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.HandlerForOnlineConfig(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called for updating main DataSet (configuration online).
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:T.Modules.Device.DeviceRun.EnterTaskList(T.Kernel.Core.EventModule)" -->
        <member name="M:T.Modules.Device.DeviceRun.HandleRuntimeEvent(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.WorkItemExecute(System.Object)">
            <summary>
            Function called by the Thread Pool when some thread is available
            - Here the ObjDrv execute the Read and Write commands
            </summary>
            <param name="ODrvInt">
            ObjDrv is received as a parameter
            </param>
        </member>
        <member name="M:T.Modules.Device.DeviceRun.GetModuleMainName">
            <summary>
            Return task main name
            </summary>
            <returns>Task main name</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:T.Modules.Device.DeviceRun.HandlerForUpdatingDiagnostics(System.Object,T.Kernel.Core.RuntimeEventArgs)" -->
        <member name="T:T.Modules.Device.InternalCommAPI">
            <summary>
            Class Internal to customize the channel object
            some attributes are used only by drv task and don´t
            need be exposed to ObjDrv object
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalCommAPI.isInUse">
            <summary>
            flag used to indicate if this object is in use by any ObjDrv in Thread Execution
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalCommAPI.comm">
            <summary>
            CommAPI Object
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalCommAPI.nodeName">
            <summary>
            Node name
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalCommAPI.IsInUse">
            <summary>
            Get and Set flag of use - Probably must have a critical section here ***
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalCommAPI.Comm">
            <summary>
            Get and Set channel
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalCommAPI.NodeName">
            <summary>
            Node Name of associated node
            </summary>
        </member>
        <member name="T:T.Modules.Device.InternalDrvBlock">
            <summary>
            Class used to customize the GroupCfg and dont pass 
            some info to ObjDrv, only GroupCfg is passed
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalDrvBlock.internalChannelCfgListIndex">
            <summary>
            Index of ChannelLink that have the correct channel to this Group
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalDrvBlock.isInEventListRead">
            <summary>
            Flag to indicate that this object is already  in the EventList
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalDrvBlock.isInEventListWrite">
            <summary>
            Flag to indicate that this object is already  in the EventList
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalDrvBlock.isInThreadExecution">
            <summary>
            Flag to indicate that this object is already in the Thread Pool Execution
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalDrvBlock.block">
            <summary>
            Group Object encapsulated
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalDrvBlock.stsGrp">
            <summary>
            Status and Performance to any group
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalDrvBlock.nodeName">
            <summary>
            Node name
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalDrvBlock.isGroupEnabledForReading">
            <summary>
            Flag indicating whether group is enabled for reading (used by OnDisplayOrOPCServer)
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalDrvBlock.InternalChannelCfgListIndex">
            <summary>
            Get and set the channelCfgListIndex value
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalDrvBlock.IsInEventListRead">
            <summary>
            Get and Set Flag to indicate that is already in Event List
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalDrvBlock.IsInEventListWrite">
            <summary>
            Get and Set Flag to indicate that is already in Event List
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalDrvBlock.IsInThreadExecution">
            <summary>
             Get and Set Flag to indicate that is already in thread pool execution
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalDrvBlock.Block">
            <summary>
            Get and Set GroupCfg object
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalDrvBlock.StsGrp">
            <summary>
            Status and Performance of group
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalDrvBlock.NodeName">
            <summary>
            Node Name Value
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalDrvBlock.IsGroupEnabledForReading">
            <summary>
            Flag indicating whether group is enabled for reading (used by OnDisplayOrOPCServer)
            </summary>
        </member>
        <member name="T:T.Modules.Device.InternalObjDrv">
            <summary>
            Class ObjDrvInternal to customize the ObjDrv Object
             - link to release channel
             - info to Status and Performance control
             - ObjDrv list control
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalObjDrv.alreadyCreated">
            <summary>
            Flag that indicate if ObjDrv already have the Create methody called
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalObjDrv.isInUse">
            <summary>
            Flag used to indicate if ObjDRv is InUse by a thread execution
            Verified by CustomModuleExecute
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalObjDrv.isExecFinished">
            <summary>
            Flag used to indicate if ObjDrv already finished the execution
            in the thread pool;
            Verified by CustomModuleExecute and Set by ExecuteWorkItem 
            (two different threads)
            Probably MUST a critical section HERE ***
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalObjDrv.lastIndexChannelList">
            <summary>
            Value of Channel list index used by this ObjDrv to release channel
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalObjDrv.lastIndexChannelInUse">
            <summary>
            Value of Channel list index used by this ObjDrv to release channel
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalObjDrv.lastIndexNodeList">
            <summary>
            
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalObjDrv.sts">
            <summary>
            Status and Performance to any group
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalObjDrv.oDrv">
            <summary>
            ObjDrv object encapsulated
            It is created loading info from a external assembly
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalObjDrv.blockInternal">
            <summary>
            Object used to released flag that indicate Group in use by thread pool excution 
            </summary>
        </member>
        <member name="F:T.Modules.Device.InternalObjDrv.drvMsg">
            <summary>
            object that contains reference to the communication agent (socket, serial port, etc)
            and the stored buffer from the unsolicited message.
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalObjDrv.AlreadyCreated">
            <summary>
            Get and Set AlreadyCreated
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalObjDrv.IsInUse">
            <summary>
            Get and Set IsInUse
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalObjDrv.IsExecFinished">
            <summary>
            Get and Set IsExecFinished
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalObjDrv.LastIndexChannelList">
            <summary>
            Get and Set LastIndexChannelList
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalObjDrv.LastIndexChannelInUse">
            <summary>
            Get and Set LastIndexChannelInUse
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalObjDrv.ODrv">
            <summary>
            Get and Set ODrv
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalObjDrv.BlockInternal">
            <summary>
            Get and Set gI Object
            </summary>
        </member>
        <member name="P:T.Modules.Device.InternalObjDrv.DrvMsg">
            <summary>
            Get and Set drvMsgInfo Object
            </summary>
        </member>
        <member name="T:T.Modules.Device.LinkReadWriteItem">
            <summary>
            Class used to link Read and Write Groups
            </summary>
        </member>
        <member name="F:T.Modules.Device.LinkReadWriteItem.isItemQueuedToWrite">
            <summary>
            Increased when the Read or Write related is in the queue.
            </summary>
        </member>
        <member name="F:T.Modules.Device.LinkReadWriteItem.isItemExecutingWrite">
            <summary>
            Set when the read or write related is executing in the thread execution
            </summary>
        </member>
        <member name="P:T.Modules.Device.LinkReadWriteItem.IsItemDiscarded">
            <summary>
            Set and Get IsItemDiscarded
            </summary>
        </member>
        <member name="P:T.Modules.Device.LinkReadWriteItem.HasIsItemExecutingWrite">
            <summary>
            Set and Get IsItemExecutingReadOrWrite
            </summary>
        </member>
        <member name="T:T.Modules.Device.StatusAndPerformance">
            <summary>
            Class used to store info about status and performance
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.eventAmount">
            <summary>
            Amount of Event pending in the queue
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.threadAmount">
            <summary>
            Amount of Thread available to execute
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.successAmount">
            <summary>
            Amount of success execution
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.failAmount">
            <summary>
            Amount of failed execution
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.lastNodeName">
            <summary>
            Last node name
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.lastStatus">
            <summary>
            Error code generated by the last failed execution
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.lastErrorCode">
            <summary>
            Error code generated by the last failed execution
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.lastErrorTimestamp">
            <summary>
            TimeStamp of LastErrorCode
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.timeOfLastThreadAlloc">
            <summary>
            TickCount of last execution, allocating thread
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.timeOfLastThreadStart">
            <summary>
            TickCount of last execution, thread starting the execution
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.timeOfLastThreadCallBuildCommand">
            <summary>
            TickCount of last execution, calling BuildCommand (objdrv function)
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.timeOfLastThreadCallSendAndWait">
            <summary>
            TickCount of last execution, calling SendAndWait (CommAPI function)
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.timeOfLastThreadCallParseReply">
            <summary>
            TickCount of last execution, calling ParseReply (objdrv function)
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.timeOfLastThreadDBAccessFinished">
            <summary>
            TickCount of last execution, returned of Read or Write (objdrv function)
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.timeOfLastThreadFinished">
            <summary>
            TickCount of last execution, returned of Read or Write (objdrv function)
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.timeOfLastThreadRelease">
            <summary>
            TickCount of last execution, thread was release
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.timeOfLastExecution">
            <summary>
            TickCount of total execution, from alloc to release
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.channelCfgAmount">
            <summary>
            Amount of channel configured by user
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.channelObjAmount">
            <summary>
            Amount of Channel created, using the simultaneous request info
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.channelStartedAmount">
            <summary>
            Amount of channel that was already started
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.rdGroupAmount">
            <summary>
            Read Group Amount
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.wrGroupAmount">
            <summary>
            Write Group Amount
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.discardedItemsAmount">
            <summary>
            Discarded items amount
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.cumulativeTime">
            <summary>
            CumulativeTime to calc the average time
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.timeAverage">
            <summary>
            Avarage of execution
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.cumulativeCycleTime">
            <summary>
            CumulativeTime cycle time
            </summary>
        </member>
        <member name="P:T.Modules.Device.StatusAndPerformance.LastExecutionTickCount">
            <summary>
            Last execution TickCount
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.averageCycleTime">
            <summary>
            Average Cycle Time
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.averageReadCycleTime">
            <summary>
            Average Read Cycle Time
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.timeBetweenHandlerExecute">
            <summary>
            Internal time between executions
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.timeHandlerExecution">
            <summary>
            Internal execution time
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.NumberOfReadEvents">
            <summary>
            Number of read events
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.NumberOfWriteEvents">
            <summary>
            Number of write events
            </summary>
        </member>
        <member name="F:T.Modules.Device.StatusAndPerformance.NumberOfStationChangedEvents">
            <summary>
            Number of station change events
            </summary>
        </member>
        <member name="T:T.Modules.Display.DisplaysList">
            <summary>
            Class for DisplayList operation.
            </summary>
        </member>
        <member name="M:T.Modules.Display.DisplaysList.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Display.DisplaysList.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Display.Display">
            <summary>
            Class for Display operation.
            </summary>
        </member>
        <member name="T:T.Modules.Display.Display.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Display.Display.Id">
            <summary>
            Object ID (Internal Use). 
            </summary>
        </member>
        <member name="P:T.Modules.Display.Display.Description">
            <summary>
            Gets the Description of the display, configured in DT.Table(eObjType.DisplaysList).
            </summary>
        </member>
        <member name="P:T.Modules.Display.Display.IsOpened">
            <summary>
            Indicates if the selected display is opened. 
            </summary>
        </member>
        <member name="P:T.Modules.Display.Display.ZoomLevel">
            <summary>
            Indicates the zoom level of page. One is the normal zoom level.
            </summary>
        </member>
        <member name="P:T.Modules.Display.Display.VerticalScroll">
            <summary>
            Indicates the vertical scroll value. 
            </summary>
        </member>
        <member name="P:T.Modules.Display.Display.HorizontalScroll">
            <summary>
            Indicates the horizontal scroll value. 
            </summary>
        </member>
        <member name="P:T.Modules.Display.Display.Level">
            <summary>
            ReadOnly property with levels configured on Display object.
            </summary>
        </member>
        <member name="P:T.Modules.Display.Display.Category">
            <summary>
            ReadOnly property with categories configured on Display object.
            </summary>
        </member>
        <member name="P:T.Modules.Display.Display.CustomProperties">
            <summary>
            Array containg Custom Properties
            </summary>
        </member>
        <member name="M:T.Modules.Display.Display.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Display.Display.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Display.Display.Open">
            <summary>
            Begin open display
            </summary>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Display.Display.OpenModal">
            <summary>
            Open display as modal. Disabled for Mono and HTML5
            </summary>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Display.Display.NewPopup(System.Object[])">
            <summary>
            Begin open new popup
            </summary>
            <param name="items">LabelList [label1=tag1;label2=tag2], Left, Top, Width, Height</param>
            <returns>Always empty string</returns>
        </member>
        <member name="M:T.Modules.Display.Display.Close">
            <summary>
            Begin close display
            </summary>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Display.Display.PrintDisplay(System.Boolean)">
            <summary>
            Begin print display
            </summary>
            <param name="defaultPrinter">Flag indicating whether default must be used</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Display.Display.PrintDisplayDefaultPrinter(System.Int32)">
            <summary>
            Begin print display using default printer
            </summary>
            <param name="pageOrientation">0: Portrait, 1: Landscape</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Display.Display.GetCustomPropertyValue(System.String,System.String)">
            <summary>
            Get value of custom property name
            </summary>
            <param name="propertyName">Property name</param>
            <param name="defaultValue">Default value if property could not be found</param>
            <returns>Property value</returns>
        </member>
        <member name="M:T.Modules.Display.Display.SetCustomPropertyValue(System.String,System.Object)">
            <summary>
            Set custom property value. If property not exist then it is created
            </summary>
            <param name="propertyName">Property name. If name starts with '@' and rest of string is a valid tag name then the property is a reference to Tag Value</param>
            <param name="propertyValue">Property value</param>
            <returns>Always 0. Not used</returns>
        </member>
        <member name="M:T.Modules.Display.Display.SetCustomProperties(System.String,System.String)">
            <summary>
            Set several custom properties at the same time. Example: Prop1=10;Prop2=123
            </summary>
            <param name="str">String containg custom properties separated by 'sep'</param>
            <param name="sep">Separator to each custom property</param>
            <returns>Always 0. Not used</returns>
        </member>
        <member name="M:T.Modules.Display.Display.RemoveAllCustomProperties">
            <summary>
            Remove all custom properties
            </summary>
            <returns>Always 0. Not used</returns>
        </member>
        <member name="M:T.Modules.Display.Display.GetCustomPropertiesAsString(System.String)">
            <summary>
            Get all custom properties. Example: Prop1=10;Prop2=123
            </summary>
            <param name="sep">Separator. Default is ';'</param>
            <returns>String</returns>
        </member>
        <member name="T:T.Modules.Display.DisplayCustomProperty">
            <summary>
            Class for DisplayCustomProperty operation.
            </summary>
        </member>
        <member name="T:T.Modules.Display.DisplayCustomProperty.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Display.DisplayCustomProperty.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:T.Modules.Display.DisplayCustomProperty.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:T.Modules.Display.DisplayCustomProperty.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Display.DisplayCustomProperty.#ctor(T.Kernel.Core.RunObj,System.Int32[])">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="arrayIndexes">Array indexes</param>
        </member>
        <member name="M:T.Modules.Display.DisplayCustomProperty.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Display.DisplaysLayouts">
            <summary>
            Class for LayoutList operation.
            </summary>
        </member>
        <member name="M:T.Modules.Display.DisplaysLayouts.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Display.DisplaysLayouts.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Display.DisplayLayout">
            <summary>
            Class for Layout operation.
            </summary>
        </member>
        <member name="T:T.Modules.Display.DisplayLayout.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Display.DisplayLayout.Id">
            <summary>
            Object ID (Internal Use). 
            </summary>
        </member>
        <member name="P:T.Modules.Display.DisplayLayout.Description">
            <summary>
            Gets the Description of the layout, configured in EditDisplaysLayouts.
            </summary>
        </member>
        <member name="M:T.Modules.Display.DisplayLayout.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Display.DisplayLayout.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Display.DisplayLayout.Open">
            <summary>
            Begin open layout
            </summary>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="T:T.Modules.Historian.ModuleHistorian">
            <summary>
            Class for Historian operation.
            </summary>
        </member>
        <member name="T:T.Modules.Historian.ModuleHistorian.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.Table">
            <summary>
            Runtime properties for HistorianTable Objects.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.Item">
            <summary>
            Runtime properties for HistorianTag Objects.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.StorageLocation">
            <summary>
            Runtime properties for StorageLocations Objects.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.LastErrorMessage">
            <summary>
            Gets the last error message in any of the Historian Tables
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.IsSecondaryActive">
            <summary>
            Indicates if secondary historian database is active.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.IsDeleting">
            <summary>
            Indicates if historian is deleting registers.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.ProcessingCompleted">
            <summary>
            Indicates if historian custom processing is completed.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.Restart">
            <summary>
            Flag to restart the historian module.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.Redundancy">
            <summary>
            Runtime properties for HistorianRedundancy Object.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.StoreAndForward">
            <summary>
            Runtime properties for HistorianStoreAndForward Object.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.ClearCache">
            <summary>
            Clear cache
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.EnableCache">
            <summary>
            Enable cache
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.MaxSamplesByTime">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.WorkingOnCacheMessage">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.TimeFlushNormalizedTables">
            <summary>
            Time in ms to flush normalized tables. Default is 5000 ms
            </summary>
        </member>
        <member name="P:T.Modules.Historian.ModuleHistorian.DisableSaveToDatabase">
            <summary>
            If true then data will not be stored in HistorianTable Dataset DB
            </summary>
        </member>
        <member name="M:T.Modules.Historian.ModuleHistorian.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Historian.ModuleHistorian.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Historian.ModuleHistorian.VerifyDBConnection">
            <summary>
            Verify and Reopen database connection
            </summary>
            <returns>returns zero</returns>
        </member>
        <member name="M:T.Modules.Historian.ModuleHistorian.GetNormalizedInfo(System.String[],System.String[]@,System.Int32[]@,System.String[]@)">
            <summary>
            Get normalized info
            </summary>
            <param name="tagNames">Tag names</param>
            <param name="tableNames">Table names</param>
            <param name="objIndexes">Object indexes</param>
            <param name="suffixTableName">Suffixes table names</param>
            <returns>Flag indicating success or fail</returns>
        </member>
        <member name="M:T.Modules.Historian.ModuleHistorian.InvalidateCache(System.Data.DataTable)">
            <summary>
            Invalidate cache
            </summary>
        </member>
        <member name="T:T.Modules.Historian.HistorianRedundancy">
            <summary>
            Class for HistorianRedundancy operation.
            </summary>
        </member>
        <member name="T:T.Modules.Historian.HistorianRedundancy.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianRedundancy.LastSyncMessage">
            <summary>
            Gets last sync message of historian redundancy operation. 
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianRedundancy.LastSyncErrorMessage">
            <summary>
            Gets last sync error message of historian redundancy operation. 
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianRedundancy.LastSyncTimestamp">
            <summary>
            Gets last sync timestamp of historian redundancy operation.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianRedundancy.LastSyncErrorTimestamp">
            <summary>
            Gets last sync error timestamp of historian redundancy operation.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianRedundancy.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianRedundancy.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Historian.HistorianRun">
            <summary>
            Test class
            </summary>
        </member>
        <member name="F:T.Modules.Historian.HistorianRun.historianAPI">
            <summary>
            Dataset API to create , get and update databases
            </summary>
        </member>
        <member name="F:T.Modules.Historian.HistorianRun.solutionName">
            <summary>
             Current solutionName
            </summary>
        </member>
        <member name="F:T.Modules.Historian.HistorianRun.executionPath">
            <summary>
            Current executionPath
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.#ctor(T.Kernel.Core.TModule,T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.OnStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.OnAfterStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module after starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.OnInitialWaitingValueFromServer(System.Int32)">
            <summary>
            Specifies actions to take when the module waiting initial value from server.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.OnStop(System.Boolean)">
            <summary>
            Finish module
            </summary>
            <param name="isHotStarting">Flag indicating whether module should shutdown prepared to after hot starting</param>
        </member>
        <member name="P:T.Modules.Historian.HistorianRun.CanPauseAndContinue">
            <summary>
            Can Pause And Continue Module
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianRun.CanStop">
            <summary>
            Get a value indicating whether the module can be stopped once it has started.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.OnPause">
            <summary>
            Specifies actions to take when a module pauses.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.OnContinue">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being paused.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.OnDeactivate">
            <summary>
            Specifies actions to take when a module is deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.OnActivate">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.GetModuleMainName">
            <summary>
            Return task main name
            </summary>
            <returns>Task main name</returns>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.DisableSaveToDatabaseCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Update value of property to Disable save data to Alarm DB
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.HandlerForOnlineConfig(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called for updating main DataSet (configuration online).
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.HandlerUpdateModuleInformation(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.HandlerUpdateDiagnostics(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.PrepareDB">
            <summary>
            Initialize Database API
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.DeleteOldHistory(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianRun.UpdateLastErrorMessage(System.String,System.DateTimeOffset)">
            <summary>
            Updates LastErrorMessage Property
            </summary>
            <param name="message">Content of error</param>
            <param name="time">Time when error occurred (will be converted to LocalDateTime here)</param>
        </member>
        <member name="T:T.Modules.Historian.HistorianStorageLocations">
            <summary>
            Class for HistorianStorageLocations operation.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianStorageLocations.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianStorageLocations.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Historian.HistorianStorageLocation">
            <summary>
            Class for HistorianStorageLocation operation.
            </summary>
        </member>
        <member name="T:T.Modules.Historian.HistorianStorageLocation.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianStorageLocation.Id">
            <summary>
            Object ID (Internal Use). 
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianStorageLocation.DataRepository">
            <summary>
            DataRepository name.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianStorageLocation.Disable">
            <summary>
            Disable.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianStorageLocation.StoreAndForward">
            <summary>
            StoreAndForward
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianStorageLocation.BlockSize">
            <summary>
            BlockSize
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianStorageLocation.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianStorageLocation.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Historian.HistorianStorageLocationListRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianStorageLocationListRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Historian.HistorianStorageLocationRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="T:T.Modules.Historian.HistorianStoreAndForward">
            <summary>
            Class for HistorianStoreAndForward operation.
            </summary>
        </member>
        <member name="T:T.Modules.Historian.HistorianStoreAndForward.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianStoreAndForward.IsEnabled">
            <summary>
            Flag to indicate if historian store and forward is enabled.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianStoreAndForward.HasPairRedundantPending">
            <summary>
            Flag to indicate if has pair redundant pending.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianStoreAndForward.IsActiveForced">
            <summary>
            Flag to indicate if historian store and forward is active forced.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianStoreAndForward.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianStoreAndForward.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Historian.HistorianHistorianTables">
            <summary>
            Class for HistorianTableList operation.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianHistorianTables.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianHistorianTables.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Historian.HistorianTable">
            <summary>
            Class for HistorianTable operation.
            </summary>
        </member>
        <member name="T:T.Modules.Historian.HistorianTable.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.Id">
            <summary>
            Object ID (Internal Use). 
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.AutoCreate">
            <summary>
            Indicates the HistorianTable auto creation.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.TimeDeadband">
            <summary>
            Object ID (Internal Use). 
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.LifeTime">
            <summary>
            Number of days that history will be available to access.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.StorageLocation">
            <summary>
            Gets StorageLocation historian.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.Disable">
            <summary>
            Disable/Enable the HistorianTable
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.SaveOnChange">
            <summary>
            Flag to enable save on tag value changed.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.SaveQuality">
            <summary>
            Flag to enable save quality or not
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.LastStoredTimeStamp">
            <summary>
            Gets the last stored timestamp on HistorianTable
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.LastStoredErrorMessage">
            <summary>
            Gets the last error message when storing data
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.LastErrorMessage">
            <summary>
            Gets the last error message in HistorianTable
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.LastDeletedTimeStamp">
            <summary>
            Gets the last timestamp when deleting data
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.LastDeletedErrorMessage">
            <summary>
            Gets the last error message when deleting data
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.InitializationMessage">
            <summary>
            Gets the initialization message
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.RowsCount">
            <summary>
            Gets the HistorianTable rows count
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.RowCount">
            <summary>
            Gets the HistorianTable rows count
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.Trigger">
            <summary>
            Gets the configured object to trigger store operation
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.IsDeleting">
            <summary>
            Indicates if historian is deleting data. 
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.Level">
            <summary>
            ReadOnly property with levels configured on HistorianTable object.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.Category">
            <summary>
            ReadOnly property with categories configured on HistorianTable object.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.ErrorCount">
            <summary>
            Gets the store operation error count.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.SuccessCount">
            <summary>
            Gets the store operation success count.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.StoreAndForward">
            <summary>
            Runtime properties for HistorianTableStoreAndForward Objects.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.Normalized">
            <summary>
            Gets flag indicating whether table is normalized
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTable.ValueType">
            <summary>
            Gets number indicating value type of table: 0 -> Double (8 bytes) or 1 -> Single (4 bytes)
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianTable.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianTable.SaveToTextFile(System.DateTime,System.DateTime)">
            <summary>
            Save historian to text file
            </summary>
            <param name="start">Star date time</param>
            <param name="end">End date time</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Historian.HistorianTable.SaveToTextFile(System.String,System.String,System.String,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Save historian to text file
            </summary>
            <param name="start">Star date time</param>
            <param name="end">End date time</param>
            <param name="outputFileName">File name</param>
            <param name="chSep">Char separator</param>
            <param name="addHeader">Flag indicating whether header must de added</param>
            <param name="saveLogType">Flag indicating whether LogType must de added</param>
            <param name="saveQuality">Flag indicating whether quality must de added</param>
            <param name="precision">Double precision</param>
            <param name="ci">Culture info</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Historian.HistorianTable.SaveToTextFile(System.String,System.String)">
            <summary>
            Save historian to text file
            </summary>
            <param name="start">Star date time</param>
            <param name="end">End date time</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Historian.HistorianTable.SaveToTextFile(System.DateTime,System.DateTime,System.String,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Save historian to text file
            </summary>
            <param name="start">Star date time</param>
            <param name="end">End date time</param>
            <param name="outputFileName">File name</param>
            <param name="chSep">Char separator</param>
            <param name="addHeader">Flag indicating whether header must de added</param>
            <param name="saveLogType">Flag indicating whether LogType must de added</param>
            <param name="saveQuality">Flag indicating whether quality must de added</param>
            <param name="precision">Double precision</param>
            <param name="ci">Culture info</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Historian.HistorianTable.GetObjectListAsync">
            <summary>
            Get list of items related to tag
            </summary>
            <param name="objectName">Tag name</param>
            <returns>List containg alarm items</returns>
        </member>
        <member name="M:T.Modules.Historian.HistorianTable.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Historian.HistorianTable.ForceTrigger(System.Int64,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Force trigger to save historian
            </summary>
            <param name="timeStampUTCTicks">Default is -1. If it is greater than -1 this tick will be used as sample's timestamp</param>
            <param name="onlySync">Default is false. If true will execute only PI replication history configured</param>
            <param name="async">Default is false. If true will execute async</param>
            <param name="onlyChanged">Default is false. If true indicate that only save if changed. Valid only for Normalized tables</param>
            <returns> 0-Timeout waiting write samples 1-force command executed with success</returns>
        </member>
        <member name="M:T.Modules.Historian.HistorianTable.DeleteSamples(System.DateTime,System.DateTime)">
            <summary>
            Delete samples
            </summary>
            <param name="dtUTCStart">Start UTC datetime</param>
            <param name="dtUTCEnd">End UTC datetime</param>
            <returns> 0-Timeout waiting delete samples 1-delete executed with success</returns>
        </member>
        <member name="M:T.Modules.Historian.HistorianTableListRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianTableListRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Historian.HistorianTableRun.OnStop(System.Boolean)">
            <summary>
            Create Property that is out of table config.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianTableRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianTableRun.AddItem(T.Modules.Historian.HistorianTagRun)">
            <summary>
            Trigger item in the child list
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:T.Modules.Historian.HistorianTableRun.HandlerTimeSpan(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called each TimeSpan
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianTableRun.SaveSamples(T.TSystem.eTrendLogType)">
            <summary>
            This method is called each TimeSpan
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianTableRun.HandlerSaveNormalized(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called to save Normnalize table
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianTableRun.UpdateLastErrorMessage(System.String,System.DateTimeOffset)">
            <summary>
            Updates LastErrorMessage Property
            </summary>
            <param name="message">Content of error</param>
            <param name="time">Time when error occurred (will be converted to LocalDateTime here)</param>
        </member>
        <member name="T:T.Modules.Historian.HistorianTableStoreAndForward">
            <summary>
            Class for HistorianTableStoreAndForward operation.
            </summary>
        </member>
        <member name="T:T.Modules.Historian.HistorianTableStoreAndForward.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTableStoreAndForward.LastStartedTimeStamp">
            <summary>
            Gets timestamp of last started process of store and forward operation.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTableStoreAndForward.IsActive">
            <summary>
            Gets status if store and forward is active.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTableStoreAndForward.NumberOfRows">
            <summary>
            Gets number of rows used by store and forward operation.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTableStoreAndForward.LastSyncTimeStamp">
            <summary>
            ReadOnly property with information about last sync store and forward execution.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianTableStoreAndForward.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianTableStoreAndForward.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Historian.HistorianHistorianTags">
            <summary>
            Class for HistorianTagList operation.
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianHistorianTags.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianHistorianTags.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Historian.HistorianTag">
            <summary>
            Class for HistorianTag operation.
            </summary>
        </member>
        <member name="T:T.Modules.Historian.HistorianTag.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTag.Id">
            <summary>
            Object ID (Internal Use). 
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTag.TagName">
            <summary>
            TagName object to be stored on HistorianTable
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTag.Deadband">
            <summary>
            Deadband used with tagname value to filter the store operation.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTag.Deviation">
            <summary>
            Deviation used with tagname value to filter the store operation.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTag.RateOfChange">
            <summary>
            RateOfChange used with tagname value to filter the store operation.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTag.HistorianTable">
            <summary>
            Gets the name of the HistorianTable
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTag.DeviationDeadBandType">
            <summary>
            Deviation/Deadband/RateOfChange Type used with tagname value to filter the store operation.
            </summary>
        </member>
        <member name="P:T.Modules.Historian.HistorianTag.DeviationDeadBandLimit">
            <summary>
            Deviation/Deadband/RateOfChange type used with tagname value to filter the store operation. Its is onlye used when DeviationDeadBandType is 1 (Percentagge).
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianTag.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Historian.HistorianTag.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Historian.HistorianTagListRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianTagListRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Historian.HistorianTagRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianTagRun.OnStart(T.Modules.Historian.HistorianRun,T.Modules.Historian.HistorianTableRun)">
            <summary>
            Initialize any item on startup
            </summary>
            <param name="module">Historian Module</param>
            <param name="histTable">Group of this Historian Item</param>
        </member>
        <member name="M:T.Modules.Historian.HistorianTagRun.OnStop">
            <summary>
            Finalize any item on stop
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:T.Modules.Historian.HistorianTagRun.HandlerItemChangedEvent(System.Object,T.Kernel.Core.RuntimeEventArgs)" -->
        <member name="T:T.Modules.Info.ModuleInfo">
            <summary>
            Class for Info operation.
            </summary>
        </member>
        <member name="T:T.Modules.Info.ModuleInfo.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.Solution">
            <summary>
            Provides access to InfoProjectVersion objects. 
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.CategoryItem">
            <summary>
            Provides access to CategoryItem objects. 
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.EvaluationTimeRemaining">
            <summary>
            When In EvaluationMode, remaining time for the runtime session
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.IsSyncModuleConnected">
            <summary>
            Flag to indicate if Sync module is connected.
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.Module">
            <summary>
            Provides access to InfoModule objects. 
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.License">
            <summary>
            Provides access to InfoLicense objects. 
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.Profile">
            <summary>
            integer of the execution profile.
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.ProfileName">
            <summary>
            Name of current execution profile.
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.TestMode">
            <summary>
            Flag to indicate if testmode is enabled.
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.EvaluationMode">
            <summary>
            Flag To Indicate the Solution is running in evaluation mode
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.ExecutionPath">
            <summary>
            Gets execution path.
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.OnlineConfig">
            <summary>
            Flag to indicate if onlineconfig is enabled.
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.HotStartup">
            <summary>
            Flag to indicate if HotStartup is enabled.
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.Types">
            <summary>
            Gets internal types datatable.
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.ScriptClasses">
            <summary>
            Gets internal scriptclasses datatable.
            </summary>
        </member>
        <member name="M:T.Modules.Info.ModuleInfo.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Info.ModuleInfo.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Info.ModuleInfo.Trace(System.String)">
            <summary>
            Trace messages to trace window tools
            </summary>
            <param name="message">Message to trace</param>
            <returns>Returns zero</returns>
        </member>
        <member name="M:T.Modules.Info.ModuleInfo.Trace(System.String,T.Toolkit.TK.eTkTraceType)">
            <summary>
            Trace messages to trace window tools
            </summary>
            <param name="message">Message to trace</param>
            <param name="type">Message type (eTraceType)</param>
            <returns>Returns zero</returns>
        </member>
        <member name="M:T.Modules.Info.ModuleInfo.Trace(System.String,T.Toolkit.TK.eTkTraceType,System.String,System.String,System.String)">
            <summary>
            Trace messages to trace window tools
            </summary>
            <param name="message">Message to trace</param>
            <param name="type">Message type (eTraceType)</param>
            <param name="objectName">Information to show on info1 column</param>
            <param name="eventSource">Information to show on info2 column</param>
            <param name="eventValue">Information to show on info3 column</param>
            <returns>Returns zero</returns>
        </member>
        <member name="M:T.Modules.Info.ModuleInfo.GetExecutionFolder">
            <summary>
            Gets the execution folder
            </summary>
            <returns>Returns the execution folder</returns>
        </member>
        <member name="M:T.Modules.Info.ModuleInfo.GetExecutionPath">
            <summary>
            Gets the execution path
            </summary>
            <returns>Returns the execution path</returns>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.LastInvalidSetValue">
            <summary>
            Last invalid set value
            </summary>
        </member>
        <member name="P:T.Modules.Info.ModuleInfo.CurrentTotalAssets">
            <summary>
            Number of assets created from TagProvider's
            </summary>
        </member>
        <member name="M:T.Modules.Info.ModuleInfo.GetTypeDefinition(System.String)">
            <summary>
            Gets type definition from table
            </summary>
            <returns>DataTable containing type definition</returns>
        </member>
        <member name="T:T.Modules.Info.InfoLicense">
            <summary>
            Class for InfoLicense operation.
            </summary>
        </member>
        <member name="T:T.Modules.Info.InfoLicense.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.SerialNumber">
            <summary>
            Gets the license serial number.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.ProductLicensed">
            <summary>
            Product Version and Series licenses
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.ServerConnected">
            <summary>
            Gets the server full address.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.AllowedWebClients">
            <summary>
            Gets number of allowed web clients.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.AllowediOSClients">
            <summary>
            Gets number of allowed iOS clients.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.ExtraNumber1">
            <summary>
            Gets extranumber1 information.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.ExtraNumber2">
            <summary>
            Gets extranumber2 information.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.AllowedWebViews">
            <summary>
            Gets number of allowed web views.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.AllowedDevices">
            <summary>
            Gets number of allowed devices (channels).
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.AllowedEngineeringUsers">
            <summary>
            Gets number of allowed engineering users.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.AllowedRunInstances">
            <summary>
            Gets number of allowed run instances.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.AllowedRichClients">
            <summary>
            Gets number of allowed rich clients.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.AllowedTagElements">
            <summary>
            Gets number of allowed tag elements.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.DateCreated">
            <summary>
            Gets the date and time the license was created.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.DateModified">
            <summary>
            Gets the date and time the license was modified.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.ExpirationDate">
            <summary>
            Gets the date and time the license will expire.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.ProductFamily">
            <summary>
            Gets the license products family .
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.LicenseMedia">
            <summary>
            Gets the license media.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.LicenseType">
            <summary>
            Gets the license type.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.ProductModel">
            <summary>
            Gets the license product model.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.ProductVersion">
            <summary>
            Gets the license product version.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.AllowedProtocolsStandard">
            <summary>
            Gets number of allowed protocols standard.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.AllowedProtocolsPremium">
            <summary>
            Gets number of allowed protocols premium.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.AllowedPI">
            <summary>
            Flag to indicate if PI is enabled.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.Registered">
            <summary>
            Flag to indicate if was registered.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.IsAllowedTagElementsEqualCommPoints">
            <summary>
            Flag to indicate if is allowed tag elements equal communication points. [DEPRECATED]
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.HardKeyRetryCount">
            <summary>
            Count of hardkey retries.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.ActivationCode">
            <summary>
            String containg Activation Code.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.SubscriptionType">
            <summary>
            String containg SubscriptionType:  Perpetual, Monthly or Annual.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.AllowedRemoteLicenseClients">
            <summary>
            Max number of remote license clients allowed
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.RemoteLicenseServer">
            <summary>
            Remote license server.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.SubscriptionExpiration">
            <summary>
            DateTime when license with Subscription expires.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoLicense.Target">
            <summary>
            Target: (INT):  0 -> Windows Desktop, 1 -> Windows Embedded, 2 - Linux (Mono Framework), 3 - Windows Compact Embeeded (CE)
            </summary>
        </member>
        <member name="M:T.Modules.Info.InfoLicense.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Info.InfoLicense.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Info.InfoModules">
            <summary>
            Class for InfoModules operation.
            </summary>
        </member>
        <member name="T:T.Modules.Info.InfoModules.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModules.Device">
            <summary>
            Provides access to Device objects.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModules.Alarm">
            <summary>
            Provides access to Alarm objects.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModules.Historian">
            <summary>
            Provides access to Historian objects.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModules.Dataset">
            <summary>
            Provides access to Dataset objects.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModules.Report">
            <summary>
            Provides access to Report objects.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModules.Script">
            <summary>
            Provides access to Script objects.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModules.Security">
            <summary>
            Provides access to Security objects.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModules.Display">
            <summary>
            Provides access to Display objects.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModules.TraceWindow">
            <summary>
            Provides access to TraceWindow objects.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModules.ModuleInformation">
            <summary>
            Provides access to ModuleInformation objects.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModules.PropertyWatch">
            <summary>
            Provides access to PropertyWatch objects.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModules.Server">
            <summary>
            Provides access to Server objects.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModules.TagProvider">
            <summary>
            Provides access to TagProvider objects.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModules.OPCServer">
            <summary>
            Provides access to OPVServer objects.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModules.ReportServer">
            <summary>
            Provides access to ReportServer objects.
            </summary>
        </member>
        <member name="M:T.Modules.Info.InfoModules.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Info.InfoModules.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Info.InfoModule">
            <summary>
            Class for InfoModule operation.
            </summary>
        </member>
        <member name="T:T.Modules.Info.InfoModule.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModule.RowsChanges">
            <summary>
            Gets rows changed information.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModule.IsRunning">
            <summary>
            Flag to indicate if module is running.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModule.IsPaused">
            <summary>
            Flag to indicate if module is paused.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModule.IsActivated">
            <summary>
            Flag to indicate if module is activated.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModule.Diagnostics">
            <summary>
            Gets diagnostics information.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModule.IsStarted">
            <summary>
            Flag indicating whether Alarm module was full started
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModule.StartStepCounter">
            <summary>
            StartStepCounter
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoModule.StartMessage">
            <summary>
            StatusMessage
            </summary>
        </member>
        <member name="M:T.Modules.Info.InfoModule.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Info.InfoModule.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Info.InfoModule.Start(System.Int32)">
            <summary>
            Start module
            </summary>
            <param name="timeoutInSeconds">Timeout in seconds</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Info.InfoModule.Stop(System.Int32)">
            <summary>
            Stop module
            </summary>
            <param name="timeoutInSeconds">Timeout in seconds</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="T:T.Modules.Info.InfoProduct">
            <summary>
            Class for InfoProduct operation.
            </summary>
        </member>
        <member name="T:T.Modules.Info.InfoProduct.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoProduct.ProductVersion">
            <summary>
            Product Version in use
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoProduct.ProductName">
            <summary>
            Current Product name
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoProduct.Company">
            <summary>
            Product Company Name
            </summary>
        </member>
        <member name="M:T.Modules.Info.InfoProduct.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Info.InfoProduct.GetProductPath">
            <summary>
            Gets the product path
            </summary>
            <returns>Returns the product path</returns>
        </member>
        <member name="M:T.Modules.Info.InfoProduct.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Info.InfoSolution">
            <summary>
            Class for SolutionInfo.
            </summary>
        </member>
        <member name="T:T.Modules.Info.InfoSolution.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoSolution.Settings">
            <summary>
            Provides access to SolutionSettings objects. 
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoSolution.VersionString">
            <summary>
            Gets the Project version string. 
            </summary>
            <example>"1.0 (Editing)".</example>
        </member>
        <member name="P:T.Modules.Info.InfoSolution.DateCreated">
            <summary>
            Gets the DateTime object that represents the date the Project version was created. 
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoSolution.DateModified">
            <summary>
            Last DateTime the Solution was modified. 
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoSolution.Description">
            <summary>
            Gets the Project version description.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoSolution.SolutionName">
            <summary>
            Gets the Solution name of the Project version. 
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoSolution.SolutionPath">
            <summary>
            Gets the Project version path.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoSolution.ProductName">
            <summary>
            Gets the Project version product name.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoSolution.ProductFamily">
            <summary>
            Gets the project version product family.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoSolution.RequiredLicense">
            <summary>
            License Required to use the solution in production
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoSolution.ProductModel">
            <summary>
            Gets the Project version product model.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoSolution.ProductVersion">
            <summary>
            Product used when last editing the dolution
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoSolution.CurrentBuild">
            <summary>
            Current Solution build number.
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoSolution.SchemaVersion">
            <summary>
            Get the current schema version that define internal struct modification. 
            </summary>
        </member>
        <member name="P:T.Modules.Info.InfoSolution.VersionID">
            <summary>
            Solution VersionID, automatically incremented on any configuration change
            </summary>
        </member>
        <member name="M:T.Modules.Info.InfoSolution.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Info.InfoSolution.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Info.CategoryItemList.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Info.CategoryItemList.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Info.CategoryItem.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Info.CategoryItem.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:T.Modules.Info.CategoryItem.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:T.Modules.Info.CategoryItem.DateModified">
            <summary>
            Last date time modified
            </summary>
        </member>
        <member name="P:T.Modules.Info.CategoryItem.DateCreated">
            <summary>
            Date ime created
            </summary>
        </member>
        <member name="M:T.Modules.Info.CategoryItem.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Info.CategoryItem.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Info.SolutionSettings">
            <summary>
            Class for SolutionSettings operation.
            </summary>
        </member>
        <member name="T:T.Modules.Info.SolutionSettings.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Info.SolutionSettings.CultureInfo">
            <summary>
            Gets project culture information.
            </summary>
        </member>
        <member name="P:T.Modules.Info.SolutionSettings.AutoDuplicateQuoteEscape">
            <summary>
            Auto duplicate quote escape.
            </summary>
        </member>
        <member name="P:T.Modules.Info.SolutionSettings.LimitValuesMinMax">
            <summary>
            Limit values Min Max.
            </summary>
        </member>
        <member name="P:T.Modules.Info.SolutionSettings.ChildSolutions">
            <summary>
            String containg names of child projects separated by ';'
            </summary>
        </member>
        <member name="P:T.Modules.Info.SolutionSettings.PythonRuntimePath">
            <summary>
            String containg names of child projects separated by ';'
            </summary>
        </member>
        <member name="M:T.Modules.Info.SolutionSettings.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Info.SolutionSettings.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.OPCServer.ModuleOPCServer.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.OPCServer.ModuleOPCServer.Status">
            <summary>
            Gets OPCServer status.
            </summary>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServer.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServer.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.OPCServer.ModuleOPCServerRun">
            <summary>
            ModuleOPCServerRun class
            </summary>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServerRun.#ctor(T.Kernel.Core.TModule,T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServerRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServerRun.OnStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServerRun.OnAfterStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module after starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServerRun.OnInitialWaitingValueFromServer(System.Int32)">
            <summary>
            Specifies actions to take when the module waiting initial value from server.
            </summary>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServerRun.OnStop(System.Boolean)">
            <summary>
            Finish module
            </summary>
            <param name="isHotStarting">Flag indicating whether module should shutdown prepared to after hot starting</param>
        </member>
        <member name="P:T.Modules.OPCServer.ModuleOPCServerRun.CanPauseAndContinue">
            <summary>
            Can Pause And Continue Module
            </summary>
        </member>
        <member name="P:T.Modules.OPCServer.ModuleOPCServerRun.CanStop">
            <summary>
            Get a value indicating whether the module can be stopped once it has started.
            </summary>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServerRun.OnPause">
            <summary>
            Specifies actions to take when a module pauses.
            </summary>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServerRun.OnContinue">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being paused.
            </summary>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServerRun.OnDeactivate">
            <summary>
            Specifies actions to take when a module is deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServerRun.OnActivate">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServerRun.GetModuleMainName">
            <summary>
            Return task main name
            </summary>
            <returns>Task main name</returns>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServerRun.GetCaption">
            <summary>
            Return task caption
            </summary>
            <returns>Task caption</returns>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServerRun.GetAbout">
            <summary>
            Return task about
            </summary>
            <returns>Task about</returns>
        </member>
        <member name="M:T.Modules.OPCServer.ModuleOPCServerRun.MenuItemClicked(System.Int32)">
            <summary>
            This method is called when a menu item is clicked
            </summary>
            <param name="item">Index (based on zero) of the menu item</param>
        </member>
        <member name="T:T.Modules.Report.ModuleReport">
            <summary>
            Class for Report operation.
            </summary>
        </member>
        <member name="T:T.Modules.Report.ModuleReport.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Report.ModuleReport.WebData">
            <summary>
            Access to ReportWebData objects. Syntax: Report.WebData
            </summary>
        </member>
        <member name="P:T.Modules.Report.ModuleReport.Form">
            <summary>
            Access to ReportForm objects. Syntax: Report.Form.ReportFormName
            </summary>
        </member>
        <member name="P:T.Modules.Report.ModuleReport.PreloadedTags">
            <summary>
            Flag to indicate wheter initial tags already was preloaded
            </summary>
        </member>
        <member name="P:T.Modules.Report.ModuleReport.RunReadOnly">
            <summary>
            Flag indicating Dataset module running as read only mode 
            </summary>
        </member>
        <member name="M:T.Modules.Report.ModuleReport.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Report.ModuleReport.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Report.ReportsForms">
            <summary>
            List of report form objects
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportsForms.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Report.ReportsForms.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Report.ReportForm">
            <summary>
            Class for ReportForm operation.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:T.Modules.Report.ReportForm.Id" -->
        <member name="P:T.Modules.Report.ReportForm.Description">
            <summary>
            Gets the ReportForm Description configured in EditReportsReports.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.Padding">
            <summary>
            Gets the report item's padding value. 
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.SaveFileName">
            <summary>
            Gets or sets the complete path without resolved objects name used when saving the Report. 
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.SaveFileNameResolved">
            <summary>
            Gets or sets the complete path with resolved objects name used when saving the Report .
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.Disable">
            <summary>
            Disables the ReportForm operations when the value is greater than zero.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.LastStatus">
            <summary>
            Gets or sets the status of the last ReportForm processed.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.LastStatusMessage">
            <summary>
            Gets or sets the status message of the last ReportForm processed. 
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.Completed">
            <summary>
            The value of this property is incremented when a Save or Load operation is concluded.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.Append">
            <summary>
            Indicates whether the report will be overwritten or appended on Save commands
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.SaveFormat">
            <summary>
            Gets or sets the report item's save format. 
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportForm.SaveCommandAsync">
            <summary>
            Saves the selected report into the path indicated by the SaveFileName property. 
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.OpenExecuted">
            <summary>
            Gets or sets the report item's OpenExecuted state.
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportForm.SaveCommandWithOrientationAsync(System.Int32)">
            <summary>
            Saves the selected report using a Custom Orientation
            </summary>
            <param name="orientation">Orientation: 0 -> Portrait and 1 -> Landspace</param>
            <returns>Flag indicating success or fail</returns>
        </member>
        <member name="M:T.Modules.Report.ReportForm.GetPageCount(System.Int32)">
            <summary>
            Get the number of pages. Disabled for Mono projects and HTML5 displays
            </summary>
            <param name="orientation">Orientation: -1 -> Use orientation of default printer, 0 -> Portrait and 1 -> Landspace</param>
            <returns>Number of pages</returns>
        </member>
        <member name="P:T.Modules.Report.ReportForm.SaveExecuted">
            <summary>
            Gets or sets the report item's SaveExecuted state. 
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.IsSavingContent">
            <summary>
            Is execution Saving operation on the server
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.ConfigContent">
            <summary>
            Gets or sets the report config
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.DocumentClient">
            <summary>
            Report document created to client usage.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.Level">
            <summary>
            ReadOnly property with levels configured on Report object.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.Category">
            <summary>
            ReadOnly property with categories configured on Report object.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.UseDatasetAsyncContents">
            <summary>
            Flag to use DatasetAsyncContent on datatable grid report.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.Save">
            <summary>
            Property used to trigger the save report action.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.SaveTrigger">
            <summary>
            Gets trigger the save report action.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.Header">
            <summary>
            Gets Header.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportForm.Footer">
            <summary>
            Gets Footer.
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportForm.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportForm.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Report.ReportsFormsRun">
            <summary>
            List of report form objects
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportsFormsRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Report.ReportsFormsRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Report.ReportFormRun">
            <summary>
            Class for ReportForm operation.
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportFormRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportFormRun.BindProperties">
            <summary>
            Set Bind property
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportFormRun.UnBindProperties">
            <summary>
            UnBind property
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportFormRun.ReceivedSaveCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Receive event of save command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:T.Modules.Report.ReportRun.#ctor(T.Kernel.Core.TModule,T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Report.ReportRun.HandlerUpdateModuleInformation(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportRun.OnStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.Report.ReportRun.OnAfterStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module after starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.Report.ReportRun.OnInitialWaitingValueFromServer(System.Int32)">
            <summary>
            Specifies actions to take when the module waiting initial value from server.
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportRun.OnStop(System.Boolean)">
            <summary>
            Finish module
            </summary>
            <param name="isHotStarting">Flag indicating whether module should shutdown prepared to after hot starting</param>
        </member>
        <member name="P:T.Modules.Report.ReportRun.CanPauseAndContinue">
            <summary>
            Can Pause And Continue Module
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportRun.CanStop">
            <summary>
            Get a value indicating whether the module can be stopped once it has started.
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportRun.OnPause">
            <summary>
            Specifies actions to take when a module pauses.
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportRun.OnContinue">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being paused.
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportRun.OnDeactivate">
            <summary>
            Specifies actions to take when a module is deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportRun.OnActivate">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportRun.HandlerForOnlineConfig(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called for updating main DataSet (configuration online).
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Modules.Report.ReportRun.GetModuleMainName">
            <summary>
            Return task main name
            </summary>
            <returns>Task main name</returns>
        </member>
        <member name="M:T.Modules.Report.ReportRun.GetCaption">
            <summary>
            Return task caption
            </summary>
            <returns>Task caption</returns>
        </member>
        <member name="T:T.Modules.Report.ReportsWebData">
            <summary>
            List of report webdata objects
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportsWebData.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Report.ReportsWebData.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Report.ReportWebData">
            <summary>
            Class for ReportWebData operation.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.Id">
            <summary>
            Object ID (Internal Use).
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.Description">
            <summary>
            Gets the ReportWebData Description configured in EditReportsWebData.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.Padding">
            <summary>
            Gets the report item's padding value.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.SaveFileName">
            <summary>
            Gets or sets the complete path without resolved objects name used when saving the Report.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.SaveFileNameResolved">
            <summary>
            Gets or sets the complete path with resolved objects name used when saving the Report .
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.DefaultURL">
            <summary>
            Gets or sets the complete url without resolved object names when definind the URL to use in Requests
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.DefaultURLResolved">
            <summary>
            Gets or sets the complete url  with object names when definind the URL to use in Requests (client side property)
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.Authorization">
            <summary>
            Gets or sets the Authorization token to access the Rest API
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.Disable">
            <summary>
            Disables the ReportWebData operations when the value is greater than zero.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.LastStatus">
            <summary>
            Gets or sets the status of the last ReportWebData processed.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.LastStatusMessage">
            <summary>
            Gets or sets the status message of the last ReportWebData processed.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.Completed">
            <summary>
            The value of this property is incremented when a Save or Load operation is concluded.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.SaveExecuted">
            <summary>
            Gets or sets the report item's SaveExecuted state.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.OpenExecuted">
            <summary>
            Gets or sets the report item's OpenExecuted state.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.ConfigContent">
            <summary>
            Gets or sets the report config
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.DocumentClient">
            <summary>
            Report document created to client usage.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.Level">
            <summary>
            ReadOnly property with levels configured on Report object.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.Category">
            <summary>
            ReadOnly property with categories configured on Report object.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.UseDatasetAsyncContents">
            <summary>
            Flag to use DatasetAsyncContent on datatable grid report.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.Save">
            <summary>
            Property used to trigger the save report action.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.Headers">
            <summary>
            Gets Headers response at Server execution
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.HeadersClient">
            <summary>
            Gets Headers response at Client execution.
            </summary>
        </member>
        <member name="P:T.Modules.Report.ReportWebData.Encoding">
            <summary>
            Indicates the file format
            <para>JSON = 5</para>
            <para>XML = 6</para>
            <para>HTML = 7</para>
            <para>Text = 8</para>
            </summary>
            <remarks>
            This property represents the value that was configured in the Encoding column.
            </remarks>
        </member>
        <member name="M:T.Modules.Report.ReportWebData.SaveCommandAsync">
            <summary>
            Saves the selected report into the path indicated by the SaveFileName property.
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportWebData.LoadCommandAsync">
            <summary>
            Loads the values of the tags configured in the Objects property from the file indicated by the FileName property. <br/>
            Returns Flag indicating success or fail
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportWebData.LoadCommandWithStatusAsync(T.Library.TRef{System.Int32})">
            <summary>
            Loads the values of the tags configured in the Objects property from the file indicated by the FileName property.
            <para>Parameters</para>
            <para>message with the status of the save command</para>
            Returns Flag indicating success or fail
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportWebData.UpdateCommandAsync">
            <summary>
            UpdateCommand the selected document with the current value of the tags.
            </summary>
            <returns></returns>
        </member>
        <member name="M:T.Modules.Report.ReportWebData.PostRequestAsync">
             <summary>
             Performs an HTTP / HTTPS POST Request. <br/>
             Returns flag indicating if request was successfull <br/> <br/>
             </summary>
            
        </member>
        <member name="M:T.Modules.Report.ReportWebData.BeginPostRequestAsync(System.AsyncCallback,System.String)">
            <summary>
            Begin executing an asynchronous Post Request
            </summary>
            <param name="callback">Callback that will be called after executing</param>
            <returns>Reference to object that should be passed to EndPostRequest method while executing callback.</returns>
        </member>
        <member name="M:T.Modules.Report.ReportWebData.EndPostRequest(System.IAsyncResult)">
            <summary>
            End executing an asynchronous Post Request
            </summary>
            <param name="ar">Reference to object returned by BeginPostRequest method</param>
            <returns>Flag indicating success</returns>
        </member>
        <member name="M:T.Modules.Report.ReportWebData.GetRequestAsync">
             <summary>
             Performs an HTTP / HTTPS GET Request. <br/>
             Returns stauts, and output Get Request response. 
             </summary>
            
        </member>
        <member name="M:T.Modules.Report.ReportWebData.GetRequestWithStatusAsync(T.Library.TRef{System.Int32})">
            <summary>
            Performs an HTTP / HTTPS GET Request. <br/>
            Returns Get Request response. If null or empty means it failed<br/> <br/>
            Parameters <br/>
            bool status: flag indicating success or failed<br/>
            string statusMessage: message with the status of the Get Request
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportWebData.BeginGetRequestAsync(System.AsyncCallback,System.String)">
            <summary>
            Begin executing an asynchronous Get Request
            </summary>
            <param name="callback">Callback that will be called after executing</param>
            <param name="state">Reference to any object</param>
            <returns>Reference to object that should be passed to EndGetRequest method while executing callback.</returns>
        </member>
        <member name="M:T.Modules.Report.ReportWebData.EndGetRequest(System.IAsyncResult,System.Int32@)">
            <summary>
            End executing an asynchronous Get Request
            </summary>
            <param name="ar">Reference to object returned by BeginGetRequest method</param>
            <param name="status">Return flag indicating success or fail</param>
            <param name="statusMessage">Return status message</param>
            <returns>Content from GetRequest, if success, or null if failed</returns>
        </member>
        <member name="M:T.Modules.Report.ReportWebData.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportWebData.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Report.ReportsWebDataRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Report.ReportsWebDataRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Report.ReportWebDataRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportWebDataRun.BindProperties">
            <summary>
            Set Bind property
            </summary>
        </member>
        <member name="M:T.Modules.Report.ReportWebDataRun.ReceiveSaveCommand(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            Receive event of save command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:T.Modules.Report.ReportWebDataRun.OnStop">
            <summary>
            Create Property that is out of table config.
            </summary>
        </member>
        <member name="T:T.Modules.Script.ExecuteMethodService">
            <summary>
            Implement service based to contract
            </summary>
        </member>
        <member name="M:T.Modules.Script.ExecuteMethodService.#ctor(System.String)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="T:T.Modules.Script.ModuleScript">
            <summary>
            Class for Script operation.
            </summary>
        </member>
        <member name="T:T.Modules.Script.ModuleScript.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Script.ModuleScript.Task">
            <summary>
            Access to ScriptTask objects. Syntax: Script.Task.TaskName
            </summary>
        </member>
        <member name="P:T.Modules.Script.ModuleScript.Class">
            <summary>
            Access to Script Class objects. Syntax: Script.Class.ClassName
            </summary>
        </member>
        <member name="P:T.Modules.Script.ModuleScript.DisableMultiThreading">
            <summary>
            Flag to disable the script multi threading execution.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ModuleScript.Expression">
            <summary>
            Access to ScriptExpression objects.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ModuleScript.PreloadedTags">
            <summary>
            Flag to indicate wheter initial tags already was preloaded
            </summary>
        </member>
        <member name="M:T.Modules.Script.ModuleScript.GetTaskEventCount">
            <summary>
            Return number of events to be executed
            </summary>
            <returns>Number of events to be executed</returns>
        </member>
        <member name="M:T.Modules.Script.ModuleScript.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Script.ModuleScript.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Script.ScriptsExpressions">
            <summary>
            Class for ScriptExpressionList operation.
            </summary>
        </member>
        <member name="M:T.Modules.Script.ScriptsExpressions.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Script.ScriptsExpressions.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Script.ScriptExpression">
            <summary>
            Class for ScriptExpression operation.
            </summary>
        </member>
        <member name="T:T.Modules.Script.ScriptExpression.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptExpression.Disable">
            <summary>
            Disable/Enable ascript expression.
            </summary>
        </member>
        <member name="F:T.Modules.Script.ScriptExpression.running">
            <summary>
            Gets if expression is running
            </summary>
        </member>
        <member name="F:T.Modules.Script.ScriptExpression.errorMessage">
            <summary>
            Gets error message
            </summary>
        </member>
        <member name="F:T.Modules.Script.ScriptExpression.lastExecution">
            <summary>
            Gets last execution date time
            </summary>
        </member>
        <member name="F:T.Modules.Script.ScriptExpression.lastCPUTime">
            <summary>
            Gets last CPU date time
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptExpression.PeakDuration">
            <summary>
            Gets last peak CPU date time
            </summary>
        </member>
        <member name="F:T.Modules.Script.ScriptExpression.executionsCount">
            <summary>
            Gets counter executions
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptExpression.Description">
            <summary>
            Gets the script expression's description.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptExpression.Trigger">
            <summary>
            Gets the trigger configured to execute the script expression.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptExpression.ObjectName">
            <summary>
            Gets the ObjectName configured to receive the result of script expression.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptExpression.Time">
            <summary>
            Gets the time configured to execute the script expression.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptExpression.Domain">
            <summary>
            Gets the domain server or client of script expression.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptExpression.Execution">
            <summary>
            Gets the execution information of script expression.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptExpression.StopExecutionOnError">
            <summary>
            Flag to indicate if script expression will stop on error.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptExpression.Expression">
            <summary>
             Gets the expression of script expression.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptExpression.DisableCondition">
            <summary>
            Gets the string with condition to disable the script expression.
            </summary>
        </member>
        <member name="M:T.Modules.Script.ScriptExpression.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Script.ScriptExpression.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="F:T.Modules.Script.ScriptsExpressionsRun.ListOfPendingExpressions">
            <summary>
            Queue containg pending expression to run
            </summary>
        </member>
        <member name="F:T.Modules.Script.ScriptsExpressionsRun.NumberOfThreadsInPoolInUse">
            <summary>
            Flag indicating number of Threads in ThreadPool in use
            </summary>
        </member>
        <member name="M:T.Modules.Script.ScriptsExpressionsRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Script.ScriptsExpressionsRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Script.ScriptsExpressionsRun.HandlerUpdateModuleInformation(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="F:T.Modules.Script.ScriptExpressionRun.lastTriggerValue">
            <summary>
            Field to store the last trigger value
            </summary>
        </member>
        <member name="F:T.Modules.Script.ScriptExpressionRun.objRefDisplayIsPaused">
            <summary>
            Reference to Info.Module.Display.IsPaused
            </summary>
        </member>
        <member name="M:T.Modules.Script.ScriptExpressionRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Script.ScriptExpressionRun.HandlerRun(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Script.ScriptExpressionRun.HanderChangedPeriod(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Script.ScriptExpressionRun.HandlerForDayTime(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Script.ModuleScriptRun.#ctor(T.Kernel.Core.TModule,T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Script.ModuleScriptRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Script.ModuleScriptRun.GetTaskEventCount">
            <summary>
            Return number of events to be executed
            </summary>
            <returns>Number of events to be executed</returns>
        </member>
        <member name="M:T.Modules.Script.ModuleScriptRun.OnStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.Script.ModuleScriptRun.OnAfterStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module after starts.
            </summary>
            <param name="args">arguments</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.Script.ModuleScriptRun.OnInitialWaitingValueFromServer(System.Int32)">
            <summary>
            Specifies actions to take when the module waiting initial value from server.
            </summary>
        </member>
        <member name="M:T.Modules.Script.ModuleScriptRun.LoadRunBuildReferences">
            <summary>
            Load Build References
            </summary>
        </member>
        <member name="M:T.Modules.Script.ModuleScriptRun.PreloadScriptClassesNamespaceAssemblies">
            <summary>
            Preload script classes Namespace assemblies
            </summary>
        </member>
        <member name="M:T.Modules.Script.ModuleScriptRun.OnStop(System.Boolean)">
            <summary>
            Finish module
            </summary>
            <param name="isHotStarting">Flag indicating whether module should shutdown prepared to after hot starting</param>
        </member>
        <member name="P:T.Modules.Script.ModuleScriptRun.CanPauseAndContinue">
            <summary>
            Can Pause And Continue Module
            </summary>
        </member>
        <member name="P:T.Modules.Script.ModuleScriptRun.CanStop">
            <summary>
            Get a value indicating whether the module can be stopped once it has started.
            </summary>
        </member>
        <member name="M:T.Modules.Script.ModuleScriptRun.OnPause">
            <summary>
            Specifies actions to take when a module pauses.
            </summary>
        </member>
        <member name="M:T.Modules.Script.ModuleScriptRun.OnContinue">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being paused.
            </summary>
        </member>
        <member name="M:T.Modules.Script.ModuleScriptRun.OnDeactivate">
            <summary>
            Specifies actions to take when a module is deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.Script.ModuleScriptRun.OnActivate">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.Script.ModuleScriptRun.GetModuleMainName">
            <summary>
            Return task main name
            </summary>
            <returns>Task main name</returns>
        </member>
        <member name="M:T.Modules.Script.ModuleScriptRun.HandlerForOnlineConfig(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called for updating main DataSet (configuration online).
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="T:T.Modules.Script.ScriptsTasks">
            <summary>
            List of script task objects
            </summary>
        </member>
        <member name="M:T.Modules.Script.ScriptsTasks.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Script.ScriptsTasks.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Script.ScriptTask">
            <summary>
            Script Task runtime object
            </summary>
        </member>
        <member name="T:T.Modules.Script.ScriptTask.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptTask.Disable">
            <summary>
            Disables the ScriptTask execution when the value is greather than zero.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptTask.Running">
            <summary>
            Indicates if the current script is running. 
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptTask.ErrorMessage">
            <summary>
            Contains the message with the last (most recent) error that occurred in the script execution.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptTask.LastRun">
            <summary>
            Contains the TimeSpan of the last (most recent) execution of the script. 
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptTask.LastDuration">
            <summary>
            Gets the CPU time used during the last (most recent) execution of the script. 
            </summary>
        </member>
        <member name="F:T.Modules.Script.ScriptTask.lastPeakCPUTime">
            <summary>
            Gets the Peak CPU time used during all execution of the script. 
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptTask.Counter">
            <summary>
            Gets the executions amount since the module has started.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptTask.Description">
            <summary>
            Gets the ScriptTask Description configured in EditScriptsTasks.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptTask.Trigger">
            <summary>
            Gets the Tag or Object that triggers the Task execution. 
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptTask.Period">
            <summary>
            Period of time required to execute a Task (ms)
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptTask.Domain">
            <summary>
            Indicates the ScriptTask Domain
            <para>Server:</para>
            <para>The ScriptTask runs in the Server context, it cannot access Client objects i.e., Displays or client domain tags.</para>
            <para>Client:</para>
            <para>The ScriptTask runs in each Client where the ModuleScript is running.</para>
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptTask.Expression">
            <summary>
            Gets the expression information.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptTask.StopExecutionOnError">
            <summary>
            Flag to indicate if stop script execution on error.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptTask.Level">
            <summary>
            String with configured levels of ScriptTask.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptTask.Category">
            <summary>
            String with configured categories of ScriptTask.
            </summary>
        </member>
        <member name="P:T.Modules.Script.ScriptTask.PeakDateTime">
            <summary>
            Gets the Peak CPU time used during all execution of the script. 
            </summary>
        </member>
        <member name="M:T.Modules.Script.ScriptTask.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Script.ScriptTask.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Script.ScriptTask.CreateEvent(System.Object,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Create an event to be executed
            </summary>
            <param name="obj">An object containing information to be used when this task will be executed</param>
            <param name="isSequential">Flag indicating whether this event must run only after previous event finishes</param>
            <param name="addToLast">Flag indicating whether this event should be added to last</param>
            <param name="priority">Priority. 0: Normal, 1: AboveNormal, 2: Highest</param>
            <returns>If success returns 0 else returns > 0 (1: Client Task Events cannot be created, 2: Script Task Server is not running)</returns>
        </member>
        <member name="M:T.Modules.Script.ScriptTask.GetEvent">
            <summary>
            Return object containing information being executed
            </summary>
            <returns>An object containing information being executed</returns>
        </member>
        <member name="F:T.Modules.Script.ScriptsTasksRun.ListOfPendingTasks">
            <summary>
            Queue containg pending tasks to run
            </summary>
        </member>
        <member name="F:T.Modules.Script.ScriptsTasksRun.NumberOfThreadsInPoolInUse">
            <summary>
            Flag indicating number of Threads in ThreadPool in use
            </summary>
        </member>
        <member name="M:T.Modules.Script.ScriptsTasksRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Script.ScriptsTasksRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Script.ScriptsTasksRun.HandlerUpdateModuleInformation(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Script.ScriptsTasksRun.HandlerUpdateDiagnostics(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="F:T.Modules.Script.ScriptTaskRun.lastTriggerValue">
            <summary>
            Field to store the last trigger value
            </summary>
        </member>
        <member name="F:T.Modules.Script.ScriptTaskRun.objRefDisplayIsPaused">
            <summary>
            Reference to Info.Module.Display.IsPaused
            </summary>
        </member>
        <member name="M:T.Modules.Script.ScriptTaskRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Script.ScriptTaskRun.HandlerRun(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Script.ScriptTaskRun.HanderChangedPeriod(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called when an event should be handled.
            </summary>
        </member>
        <member name="M:T.Modules.Script.ScriptTaskRun.CreateEvent(System.Object,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Create an event to be executed
            </summary>
            <param name="obj">An object containing information to be used when this task will be executed</param>
            <param name="isSequential">Flag indicating whether this event must run only after previous event finishes</param>
            <param name="addToLast">Flag indicating whether this event should be added to last</param>
            <param name="priority">Priority. 0: Normal, 1: AboveNormal, 2: Highest</param>
            <returns>If success returns 0 else returns > 0 (1: Client Task Events cannot be created, 2: Script Task Server is not running)</returns>
        </member>
        <member name="M:T.Modules.Script.ScriptTaskRun.GetEvent">
            <summary>
            Get object containing information being executed
            </summary>
            <returns>An object containing information being executed</returns>
        </member>
        <member name="T:T.Modules.Script.ScriptsClasses">
            <summary>
            List of user defined Script Classes
            </summary>
        </member>
        <member name="M:T.Modules.Script.ScriptsClasses.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Script.ScriptsClasses.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Script.ScriptClass">
            <summary>
            Script Class runtime object
            </summary>
        </member>
        <member name="T:T.Modules.Script.ScriptClass.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="M:T.Modules.Script.ScriptClass.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Script.ScriptClass.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Security.ModuleSecurity">
            <summary>
            Class for Security operation.
            </summary>
        </member>
        <member name="T:T.Modules.Security.ModuleSecurity.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="F:T.Modules.Security.ModuleSecurity.currentUser">
            <summary>
            Reference to current user
            </summary>
        </member>
        <member name="P:T.Modules.Security.ModuleSecurity.Policy">
            <summary>
            Access to SecurityPolicy objects. 
            </summary>
        </member>
        <member name="P:T.Modules.Security.ModuleSecurity.User">
            <summary>
            Access to SecurityUser objects. 
            </summary>
        </member>
        <member name="P:T.Modules.Security.ModuleSecurity.RuntimeUser">
            <summary>
            Access to SecurityRuntimeUser objects. 
            </summary>
        </member>
        <member name="P:T.Modules.Security.ModuleSecurity.Permission">
            <summary>
            Access to SecurityPermission objects. 
            </summary>
        </member>
        <member name="P:T.Modules.Security.ModuleSecurity.WindowsUser">
            <summary>
            Current Windows User. 
            </summary>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.Load">
            <summary>
            Load configuration
            </summary>
        </member>
        <member name="P:T.Modules.Security.ModuleSecurity.CurrentUser">
            <summary>
            Get and set reference to current user
            </summary>
        </member>
        <member name="P:T.Modules.Security.ModuleSecurity.CurrentUserName">
            <summary>
            Get and set name of current user
            </summary>
        </member>
        <member name="P:T.Modules.Security.ModuleSecurity.CanShutdown">
            <summary>
            Get flag indicating whether can shutdown
            </summary>
        </member>
        <member name="P:T.Modules.Security.ModuleSecurity.CanClientStart">
            <summary>
            Get flag indicating whether can start Client module
            </summary>
        </member>
        <member name="P:T.Modules.Security.ModuleSecurity.CanClientShutdown">
            <summary>
            Get flag indicating whether can stop Client module
            </summary>
        </member>
        <member name="P:T.Modules.Security.ModuleSecurity.CanToolsSetValues">
            <summary>
            Get flag indicating whether Tools modules can set values
            </summary>
        </member>
        <member name="P:T.Modules.Security.ModuleSecurity.CanCreateUsers">
            <summary>
            Get flag indicating whether users can be created
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:T.Modules.Security.ModuleSecurity.CanDataAccessAPI" -->
        <!-- Badly formed XML comment ignored for member "P:T.Modules.Security.ModuleSecurity.CanRESTFulAPI" -->
        <!-- Badly formed XML comment ignored for member "P:T.Modules.Security.ModuleSecurity.CanRemoteManagerAPI" -->
        <member name="M:T.Modules.Security.ModuleSecurity.GetPolicyFromString(System.String)">
            <summary>
            Gets policy ID from string
            </summary>
            <param name="policyStr">Policy name</param>
            <returns>ID</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.GetPermissionsFromString(System.String)">
            <summary>
            Get permission number from string
            </summary>
            <param name="permissionsStr">Permission names</param>
            <returns>Number</returns>
        </member>
        <member name="P:T.Modules.Security.ModuleSecurity.CanSwitchApplication">
            <summary>
            Get flag indicating whether can switch between Windows applications
            </summary>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.CheckUser(System.String@,System.String,System.String)">
            <summary>
            Check user
            </summary>
            <param name="username">User name</param>
            <param name="password">User password</param>
            <returns>Error</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.UserChangePassword(System.String,System.String,System.String)">
            <summary>
            Change user password
            </summary>
            <param name="username">User name</param>
            <param name="oldPassword">User old password</param>
            <param name="newPassword">User new password</param>
            <returns>Flag indicating whether password was changed</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.SetBlockedUser(System.String,System.Boolean)">
            <summary>
            Block or unblock runtime user.
            </summary>
            <param name="username">User name</param>
            <param name="flag">Flag indicating for blocking (true) or not (false)</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.SetDeletedUser(System.String,System.Boolean)">
            <summary>
            Set flag Deleted of runtime user. This method does not remove user in runtime database.
            </summary>
            <param name="username">User name</param>
            <param name="flag">Flag indicating for deleting (true) or not (false)</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.LogOn(System.String,System.String)">
            <summary>
            Do synchronous log on
            </summary>
            <param name="username">User name</param>
            <param name="password">Password</param>
            <returns>If success then it returns OK else error code</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.LogOnAsync(System.String,System.String)">
            <summary>
            Do synchronous log on
            </summary>
            <param name="username">User name</param>
            <param name="password">Password</param>
            <returns>If success then it returns OK else error code</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.InternalSetNewUserAsync(System.String,System.String)">
            <summary>
            Do asynchronous log on
            </summary>
            <param name="username">User name</param>
            <param name="password">User password</param>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.CheckPermissionsGroup(System.Int64)">
            <summary>
            Check permissions of current user
            </summary>
            <param name="permissions">Request permissions</param>
            <returns>Flag indicating whether request permissions are allowed</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.IsESignEnabled">
            <summary>
            Gets if current user has ESign enabled
            </summary>
            <returns>Flag indicating whether current user has ESign enabled</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.ESignTimeout">
            <summary>
            Gets ESign timeout of current
            </summary>
            <returns>ESign timeout of current</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.ShouldAutoLogoff">
            <summary>
            Check auto log off
            </summary>
            <returns>Flag indicating whether auto log off was executed</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.CheckRunPermission(System.Int64)">
            <summary>
            Check Runpermissions of current user
            </summary>
            <param name="permissions">Request permissions</param>
            <returns>Flag indicating whether request permissions are allowed</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.GetRunPermissions">
            <summary>
            Get run permissions of current user
            </summary>
            <returns>Run permissions</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.CheckRunPermission(T.TSystem.ePermissionsRun)">
            <summary>
            Check permission of current user
            </summary>
            <param name="permission">Request permission</param>
            <returns>Flag indicating whether request permission is allowed</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.CheckLevel(System.Int32)">
            <summary>
            Check level of current user
            </summary>
            <param name="level">Request level</param>
            <returns>Flag indicating whether request level is allowed</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.CheckRunPermissionFromUser(System.String,T.TSystem.ePermissionsRun)">
            <summary>
            Check permission from user
            </summary>
            <param name="name">User name</param>
            <param name="permission">Request permission</param>
            <returns>Flag indicating whether request permission is allowed</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.GetUserNames">
            <summary>
            Get user names
            </summary>
            <returns>List containg user names</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.AddRuntimeUserAsync(System.String,System.String,System.String)">
            <summary>
            Add runtime user
            </summary>
            <param name="name">New name</param>
            <param name="permissionsStr">Permission names</param>
            <param name="password">New password</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.AddRuntimeUserAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Add runtime user
            </summary>
            <param name="name">User name</param>
            <param name="permissionsStr">Permissions</param>
            <param name="password">Password</param>
            <param name="passwordHint">Password hint</param>
            <param name="policyStr">Policy</param>
            <param name="concatInfoEmail">ConcatInfo email</param>
            <param name="concatInfoPhone">ConcatInfo phone</param>
            <param name="concatInfoCompleteName">ConcatInfo complete name</param>
            <param name="oneTimePassword">One time password</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.NewRuntimeUserAsync(System.String)">
            <summary>
            New runtime user
            </summary>
            <param name="name">User name</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.NewRuntimeUserAsync(System.String,T.Library.TRef{System.Int32})">
            <summary>
            New runtime user
            </summary>
            <param name="name">User name</param>
            <param name="errorCode">Error code [output]</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.UpdateRuntimeUserAsync(System.String,T.Library.TRef{System.Int32})">
            <summary>
            Update runtime user
            </summary>
            <param name="name">User name</param>
            <param name="errorCode">Error code [output]</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.GetUsersAsync">
            <summary>
            Get users
            </summary>
            <returns>Table containg list of users</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.UpdateRuntimeUserAsync(System.String)">
            <summary>
            Update runtime user
            </summary>
            <param name="name">User name</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.UpdateRuntimeUserAsync(System.String,System.String)">
            <summary>
            Update runtime user
            </summary>
            <param name="name">User name</param>
            <param name="values">User objects values</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.AddRuntimeUserAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,T.Library.TRef{System.Int32})">
            <summary>
            Add runtime user
            </summary>
            <param name="name">User name</param>
            <param name="permissionsStr">Permissions</param>
            <param name="password">Password</param>
            <param name="passwordHint">Password hint</param>
            <param name="policyStr">Policy</param>
            <param name="concatInfoEmail">ConcatInfo email</param>
            <param name="concatInfoPhone">ConcatInfo phone</param>
            <param name="concatInfoCompleteName">ConcatInfo complete name</param>
            <param name="errorCode">Error code</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.AddRuntimeUserAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,T.Library.TRef{System.Int32})">
            <summary>
            Add runtime user
            </summary>
            <param name="name">User name</param>
            <param name="permissionsStr">Permissions</param>
            <param name="password">Password</param>
            <param name="passwordHint">Password hint</param>
            <param name="policyStr">Policy</param>
            <param name="concatInfoEmail">ConcatInfo email</param>
            <param name="concatInfoPhone">ConcatInfo phone</param>
            <param name="concatInfoCompleteName">ConcatInfo complete name</param>
            <param name="oneTimePassword">One time password</param>
            <param name="errorCode">Error code</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.RemoveRuntimeUserAsync(System.String)">
            <summary>
            Remove runtime user
            </summary>
            <param name="name">User name</param>
            <returns>Flag indicating success (true) or fail (false)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.ReloadRuntimeUsersAsync">
            <summary>
            Reload runtime users
            </summary>
            <returns>String array containg user names. If failed then returns null</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.GetListOfUserNames">
            <summary>
            Get user names
            </summary>
            <returns>List containg user names separated by \n(line feed)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.GetListOfPredefinedUserNames">
            <summary>
            Get predefined user names
            </summary>
            <returns>List containg predefined user names separated by \n(line feed)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.GetListOfRuntimeUserNames">
            <summary>
            Get runtime user names
            </summary>
            <returns>List containg runtime user names separated by \n(line feed)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.GetListOfPermissionNamesOfUsers">
            <summary>
            Get permission names of users
            </summary>
            <returns>List containg permission names of users separated by \n(line feed)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.GetListOfPermissionNamesOfPredefinedUsers">
            <summary>
            Get permission names of predefined users
            </summary>
            <returns>List containg permission names of predefined users separated by \n(line feed)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.GetListOfPermissionNamesOfRuntimeUsers">
            <summary>
            Get permission names of runtime users
            </summary>
            <returns>List containg permission names of runtime users separated by \n(line feed)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.GetPasswordHint(System.String)">
            <summary>
            Get password hint of user
            </summary>
            <returns>List containg user names separated by \n(line feed)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.GetPasswordHintAsync(System.String)">
            <summary>
            Get password hint of user
            </summary>
            <returns>List containg user names separated by \n(line feed)</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:T.Modules.Security.ModuleSecurity.ValidateUser(System.String,System.String)" -->
        <member name="M:T.Modules.Security.ModuleSecurity.GetPermissions(System.String@)">
            <summary>
            Get permissions of user
            </summary>
            <param name="userName">User name</param>
            <returns>Number</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.AddRuntimeUserInDatabase(System.String,System.Int64,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Data.DataTable@)">
            <summary>
            Add runtime user in datatabase
            </summary>
            <param name="name">User name</param>
            <param name="permissions">Permissions</param>
            <param name="password">Password</param>
            <param name="passwordHint">Password hint</param>
            <param name="policy">Policy</param>
            <param name="concatInfoEmail">ConcatInfo email</param>
            <param name="concatInfoPhone">ConcatInfo phone</param>
            <param name="concatInfoCompleteName">ConcatInfo complete name</param>
            <returns>String containg the error message (if error) or empty string (if not error)</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.GetRuntimeUsersTable">
            <summary>
            Get table of runtime users
            </summary>
            <returns>Reference to DataTable object</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.RemoveRuntimeUserInDatabase(System.String,System.Data.DataTable@)">
            <summary>
            Remove runtime user in database
            </summary>
            <param name="name">User name</param>
            <param name="tableChanges">Table changes</param>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.UpdateRuntimeUserInDatabase(System.String,System.Data.DataTable@,System.String)">
            <summary>
            Update runtime user in database
            </summary>
            <param name="name">User name</param>
            <param name="tableChanges">Table changes</param>
            <param name="values">Values of separated by semicolon</param>
            <returns>String containg status. If success then returns empty string</returns>
        </member>
        <member name="M:T.Modules.Security.ModuleSecurity.SaveUserPasswordRuntimeUserInDatabase(System.String,System.String)">
            <summary>
            Save new password in database
            </summary>
            <param name="name">User name</param>
            <param name="password">User password</param>
            <returns>Flag success</returns>
        </member>
        <member name="T:T.Modules.Security.SecurityPermissions">
            <summary>
            Class for SecurityPermissionList operation.
            </summary>
        </member>
        <member name="M:T.Modules.Security.SecurityPermissions.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Security.SecurityPermissions.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Security.SecurityPermission">
            <summary>
            Class for SecurityPermission operation.
            </summary>
        </member>
        <member name="T:T.Modules.Security.SecurityPermission.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPermission.Name">
            <summary>
            Security Permission's name configured.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPermission.Edit">
            <summary>
            List of permission to edit environment.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPermission.Run">
            <summary>
            List of permission to runtime environment.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPermission.DateModified">
            <summary>
            Security permission date modified information.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPermission.DateCreated">
            <summary>
            Security permission date created information.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPermission.Description">
            <summary>
            Security Permission Description configured in EditSecurityPermission.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPermission.Level">
            <summary>
            String with the configured levels of Security Permission
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPermission.Category">
            <summary>
            String with the configured categories of Security Permission
            </summary>
        </member>
        <member name="M:T.Modules.Security.SecurityPermission.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Security.SecurityPermission.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Security.SecurityPolicies">
            <summary>
            Class for SecurityPolicyList operation.
            </summary>
        </member>
        <member name="M:T.Modules.Security.SecurityPolicies.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Security.SecurityPolicies.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Security.SecurityPolicy">
            <summary>
            Class for SecurityPolicy operation.
            </summary>
        </member>
        <member name="T:T.Modules.Security.SecurityPolicy.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.Name">
            <summary>
            Security policy's name
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.Identification">
            <summary>
            Gets the identification string.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.Logon">
            OLD - Compatibility
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.BlockOnInvalidAttempt">
            OLD - Compatibility
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.ESign">
            <summary>
            Gets the ESign configuration.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.Session">
            <summary>
            Gets the session configuration.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.DateModified">
            <summary>
            Gets date modified information of security policy.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.DateCreated">
            <summary>
            Gets date information of security policy creation.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.Description">
            <summary>
            Security Policy's description.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.Level">
            <summary>
            String with the configured levels of Security Policy
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.Category">
            <summary>
            String with the configured categories of Security Policy
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.SessionInactivityMinutes">
            <summary>
            Amount of minutes to finalize an inactivity session.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.SessionDurationHours">
            <summary>
            Session duration hours.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.PasswordMinLength">
            <summary>
            Minimum length to password configuration.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.UserNameMinLength">
            <summary>
            Minimum length to user name configuration.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.PasswordHistory">
            <summary>
            Remember last passwords. Range: 0-5
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.MaxPasswordAge">
            <summary>
            Maximum password age in hours.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.MinPasswordAge">
            <summary>
            Minimum password age in hours.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.BlockAging">
            <summary>
            Block aging in hours.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.BlockOnInvalidAttempts">
            <summary>
            Maximum amount of invalid attempts.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.AllowPasswordChange">
            <summary>
            Flag indicating whether allow password change.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityPolicy.AllowShareUser">
            <summary>
            Flag indicating whether allow password change.
            </summary>
        </member>
        <member name="M:T.Modules.Security.SecurityPolicy.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Security.SecurityPolicy.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Security.SecurityPolicy.AfterCreateObj(System.Int32)">
            <summary>
            Called after object creation to read retentive objType or configured objType
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:T.Modules.Security.SecurityPolicy.SaveRetentive(System.Int32,System.Object)">
            <summary>
            Called to save retentive values of properties 
            </summary>
            <param name="id">object id of object</param>
            <param name="obj">objType</param>
            <returns></returns>
        </member>
        <member name="T:T.Modules.Security.SecurityUsers">
            <summary>
            Class for SecurityUserList operation.
            </summary>
        </member>
        <member name="M:T.Modules.Security.SecurityUsers.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Security.SecurityUsers.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Security.SecurityRuntimeUserList">
            <summary>
            Class for SecurityRunTimeUserList operation.
            </summary>
        </member>
        <member name="M:T.Modules.Security.SecurityRuntimeUserList.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Security.SecurityRuntimeUserList.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.Security.SecurityUser">
            <summary>
            Class for SecurityUser operation.
            </summary>
        </member>
        <member name="T:T.Modules.Security.SecurityUser.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.Name">
            <summary>
            Security User's Name
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.ContactInfo">
            <summary>
            Gets Contact information.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.Password">
            <summary>
            Gets password information.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.PasswordHint">
            <summary>
            Gets password hint.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.PolicyName">
            <summary>
            Gets the policy name related with security user.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.Policy">
            <summary>
            Get policy information related with security user.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.Blocked">
            <summary>
            Flag to indicate if security user is blocked.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.Deleted">
            <summary>
            Flag to indicate if security user is deleted.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.DateModified">
            <summary>
            Gets date modified of security user.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.DateCreated">
            <summary>
            Gets date created of security user.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.RunPermissions">
            <summary>
            Gets the run permissions related with security user.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.Permissions">
            <summary>
            Gets permissions related with security user.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.PermissionsName">
            <summary>
            Gets permission name related with security user.
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.Level">
            <summary>
            String with the configured levels of Security User
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.Category">
            <summary>
            String with the configured categories of Security User
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.Realm">
            <summary>
            Realm: Internal, Runtime, AD (Activew Directory).
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.Alias">
            <summary>
            String with the Alias of Security User
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.Company">
            <summary>
            String with the Company of Security User
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.UserGroup">
            <summary>
            String with the UserGroup of Security User
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.InvalidAttempts">
            <summary>
            Number of invalid attempts to logon. Valid only for runtime users
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.LastChangePasswordUTC_Ticks">
            <summary>
            Last change password UTC ticks. Valid only for runtime users
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.LastBlockedUserUTC_Ticks">
            <summary>
            Last user blocked UTC ticks. Valid only for runtime users
            </summary>
        </member>
        <member name="P:T.Modules.Security.SecurityUser.ChangePasswordRequired">
            <summary>
            Flag indicating whether user should change password
            </summary>
        </member>
        <member name="M:T.Modules.Security.SecurityUser.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Security.SecurityUser.#ctor(T.Kernel.Core.RunObj,System.Int32,System.Boolean)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.Security.SecurityUser.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.Security.SecurityUser.ToString">
            <summary>
            Converts this instance to its equivalent string representation.
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:T.Modules.Security.SecurityUser.AddSessionPermission(System.String)">
            <summary>
            Add permission.
            </summary>
            <param name="name">Permission name</param>
            <returns>Flag indicating whether permission was added</returns>
        </member>
        <member name="M:T.Modules.Security.SecurityUser.RemoveSessionPermission(System.String)">
            <summary>
            Remove permission.
            </summary>
            <param name="name">Permission name</param>
        </member>
        <member name="T:T.Modules.ServerStation.ServerRedundancy">
            <summary>
            Class for Serveredundancy operation.
            </summary>
        </member>
        <member name="T:T.Modules.ServerStation.ServerRedundancy.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRedundancy.PairStartedTime">
            <summary>
            Gets timestamp of PairStartedTime start.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRedundancy.LastSwitchTime">
            <summary>
            Gets timestamp of LastSwitchTime start.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRedundancy.LastSwithReason">
            <summary>
            Gets the server's LastSwithReason used. 
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRedundancy.IsPrimary">
            <summary>
            Gets the server's IsPrimary state.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRedundancy.IsSecondary">
            <summary>
            Gets the server's IsSecondary state.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRedundancy.PrimaryIP">
            <summary>
            Gets the server's PrimaryIP used. 
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRedundancy.SecondaryIP">
            <summary>
            Gets the server's SecondaryIP used. 
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRedundancy.PrimaryPort">
            <summary>
            Gets the server's Primary Port used. 
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRedundancy.SecondaryPort">
            <summary>
            Gets the server's Secondary Port used. 
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRedundancy.IsRedundancyEnabled">
            <summary>
            Gets the server's IsRedundancyEnabled state.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRedundancy.IsStandByActive">
            <summary>
            Gets the server's IsStandByActive state.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRedundancy.IsSwitchToPrimaryEnabled">
            <summary>
            Gets the server's IsSwitchToPrimayEnabled state.
            </summary>
        </member>
        <member name="M:T.Modules.ServerStation.ServerRedundancy.SwitchToStandby">
            <summary>
            Begin switch to standby [Redundancy]
            </summary>
            <returns>Flag success</returns>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRedundancy.RedundancyPendingObjects">
            <summary>
            Gets number of redundancy pending objects to sync.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRedundancy.UpdateSolutionOnInactiveServer">
            <summary>
            Flag used to indicate if project will be updated on inactive server.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRedundancy.UpdateSolutionIPPathName">
            <summary>
            String IP and pathname of source project used to update project. 
            </summary>
        </member>
        <member name="M:T.Modules.ServerStation.ServerRedundancy.ForceRedundancyRefreshValues">
            <summary>
            Force resend all objets to standby [Redundancy]
            </summary>
            <returns>Always true</returns>
        </member>
        <member name="M:T.Modules.ServerStation.ServerRedundancy.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.ServerStation.ServerRedundancy.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.ServerStation.ServerRetentive">
            <summary>
            Class for ServerRetentive operation.
            </summary>
        </member>
        <member name="T:T.Modules.ServerStation.ServerRetentive.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRetentive.PendingObjects">
            <summary>
            Gets and sets number of retentive pending objects to save.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRetentive.BlockSizeOnSaving">
            <summary>
            Gets and sets retentive block size to save each time.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRetentive.PackExecute">
            <summary>
            Execute pack database
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRetentive.LastPackExecutedTimeStamp">
            <summary>
            Gets last pack execute time.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerRetentive.LastPackExecutedErrorMessage">
            <summary>
            Gets last pack execute error message.
            </summary>
        </member>
        <member name="M:T.Modules.ServerStation.ServerRetentive.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.ServerStation.ServerRetentive.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.ServerStation.ServerStation">
            <summary>
            Class for Server operation.
            </summary>
        </member>
        <member name="T:T.Modules.ServerStation.ServerStation.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Now">
            <summary>
            Gets the server's local date and time offset. 
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Date">
            <summary>
            Gets the server's date. 
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.DayOfWeek">
            <summary>
            Gets the server's day of the week.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.DayOfYear">
            <summary>
            Gets the server's day of the year.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Ticks">
            <summary>
            Gets the number of ticks that represent the server's date and time.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Time">
            <summary>
            Gets the server's time of day.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.TimeMs">
            <summary>
            Gets the server's time of day (including milliseconds). 
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.TimeSpan">
            <summary>
            Gets a timespan object.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Second">
            <summary>
            Gets the second component of the server's date . 
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Minute">
            <summary>
            Gets the minute component of the server's date . 
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Hour">
            <summary>
            Gets the hour component of the server's date .
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Day">
            <summary>
            Gets the server's day of the month.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.UtcDay">
            <summary>
            Gets the server's day of the month on UTC.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Yesterday">
            <summary>
            Gets the server's yesterday.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Tomorrow">
            <summary>
            Gets the server's tomorrow.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Month">
            <summary>
            Gets the month component of the server's date .
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Year">
            <summary>
            Gets the year component of the server's date . 
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Shutdown">
            <summary>
            Gets or sets the server's shutdown state.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Restart">
            <summary>
            Gets or sets the server's restart state.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.OSVersion">
            <summary>
            Operating System on the computer running the solution
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Startup">
            <summary>
            Gets the server's startup state.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.ComputerIP">
            <summary>
            Gets the server's computer IP.
            </summary>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStation.GetComputerIP">
            <summary>
            Gets the server's computer IP.
            </summary>
            <returns>Computer IP</returns>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.ComputerName">
            <summary>
            Gets the server's computer name.
            </summary>
            <returns>Computer name</returns>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.HttpAddress">
            <summary>
            Gets the server's http address.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.DateString">
            <summary>
            Gets the server's date on string format.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.IsRunningAsService">
            <summary>
            Flag to indicate if runtime is running as service.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.TStartupStartedTime">
            <summary>
            Timestamp when the soslution started running
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.IsTServerStartedByTStartup">
            <summary>
            Flag to indicate if TServer is started by TStartup.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.IsTStartupStarted">
            <summary>
            Flag to indicate if TStartup is started.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.IsStarted">
            <summary>
            Flag indicating whether Dataset module was full started 
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.StartCounter">
            <summary>
            Counter while starting module
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.SaveDiagnostics">
            <summary>
            Save diagnostics
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.GCCollect">
            <summary>
            Call GCCollect
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Retentive">
            <summary>
            Gets reference to Retentive objects.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.Redundancy">
            <summary>
            Gets reference to Retentive objects.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.SystemMonitor">
            <summary>
            Gets reference to SystemMonitor objects.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.ReloadAppDomain">
            <summary>
            Reload app domains
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.NumberOfTagsLoaded">
            <summary>
            Number of tags loaded in memory
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.NumberOfTagPropertiesLoaded">
            <summary>
            Number of tag properites (Value, Min, Max, etc.) load in memory
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.IsRunningOnDocker">
            <summary>
            Flag to indicate if runtime is running on docker.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStation.ResetStatistics">
            <summary>
            Reset statistics of connections.
            </summary>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStation.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStation.OnCreateObj(System.Int32)">
            <summary>
            Create runtime object
            </summary>
            <param name="id">ID to create</param>
            <returns>Runtime object</returns>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStation.LoadSolutionVersion(System.String)">
            <summary>
            Begin load selection version
            </summary>
            <param name="solutionPathName">Solution file name</param>
            <returns>Flag success</returns>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStation.ShutdownCommand">
            <summary>
            Shut downs
            </summary>
            <returns>Always 0</returns>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStation.RunAndSaveDiagnostics(System.String)">
            <summary>
            Save diagnostics to file
            </summary>
            <param name="fileName">File name</param>
            <returns>Always 0</returns>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStation.GetClientConnectionsAsync">
            <summary>
            Get client connections
            </summary>
            <returns>Table containg client connections</returns>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStation.GetAllConnectionsAsync">
            <summary>
            Get all connections
            </summary>
            <returns>Table containg all connections</returns>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStation.CloseConnectionAsync(System.String,System.String)">
            <summary>
            Close connection
            </summary>
            <param name="ip">IP address</param>
            <param name="moduleName">Module name. Optional</param>
        </member>
        <member name="T:T.Modules.ServerStation.ServerStationRun.eActiveTags">
            <summary>
            Visibility of the tag
            </summary>
        </member>
        <member name="F:T.Modules.ServerStation.ServerStationRun.isRunning">
            <summary>
            Flag indicating status of execution
            </summary>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStationRun.#ctor(T.Kernel.Core.TModule,T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStationRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStationRun.CanPauseAndContinue">
            <summary>
            Get a value indicating whether the module can be paused and resumed.
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerStationRun.CanStop">
            <summary>
            Get a value indicating whether the module can be stopped once it has started.
            </summary>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStationRun.OnStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStationRun.OnAfterStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module after starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStationRun.OnInitialWaitingValueFromServer(System.Int32)">
            <summary>
            Specifies actions to take when the module waiting initial value from server.
            </summary>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStationRun.ActiveTags(T.Kernel.Core.ObjRef,T.Modules.ServerStation.ServerStationRun.eActiveTags,System.Int32)">
            <summary>
            Scan all tags and call OnStart function from Timers and Counters
            </summary>
            <param name="completeName"></param>
            <param name="objName"></param>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStationRun.OnPause">
            <summary>
            Specifies actions to take when a module pauses.
            </summary>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStationRun.OnContinue">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being paused.
            </summary>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStationRun.OnDeactivate">
            <summary>
            Specifies actions to take when a module is deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStationRun.OnActivate">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStationRun.OnStop(System.Boolean)">
            <summary>
            Specifies actions to take when a module stops running.
            </summary>
            <param name="isHotStarting">Flag indicating whether module should shutdown prepared to after hot starting</param>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStationRun.HandlerForUpdatingDateTime(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called for updating date time.
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStationRun.HandlerForOnlineConfig(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called for updating main DataSet (configuration online).
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Modules.ServerStation.ServerStationRun.UpdateDateTime">
            <summary>
            Update date time
            </summary>
        </member>
        <member name="T:T.Modules.ServerStation.ServerSystemMonitor">
            <summary>
            Class for ServerSystemMonitor operation.
            </summary>
        </member>
        <member name="T:T.Modules.ServerStation.ServerSystemMonitor.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerSystemMonitor.CPUName">
            <summary>
            Gets CPU Name
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerSystemMonitor.CPUClock">
            <summary>
            Gets  CPU Clock in GHz
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerSystemMonitor.CPUUsage">
            <summary>
            Gets CPU Usage in %
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerSystemMonitor.MemoryUsage">
            <summary>
            Gets Memory Usage in %
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerSystemMonitor.AvailableRAM">
            <summary>
            Gets AvailableRAM In Gigabytes
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerSystemMonitor.TotalRAM">
            <summary>
            Gets TotalRAM In Gigabytes
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerSystemMonitor.DiskSpace">
            <summary>
            Gets Server DiskSpace in Gigabytes
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerSystemMonitor.TServerCPUUsage">
            <summary>
            Gets TServer CPU Usage in %
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerSystemMonitor.TServerMemoryMB">
            <summary>
            Gets TServer Memory in Megabytes
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerSystemMonitor.Uptime">
            <summary>
            TimeSpan the solution is in execution
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerSystemMonitor.VisualizerCPUUsage">
            <summary>
            Gets Visualizer CPU Usage in %
            </summary>
        </member>
        <member name="P:T.Modules.ServerStation.ServerSystemMonitor.VisualizerMemoryMB">
            <summary>
            Gets Visualizer Memory in Megabytes
            </summary>
        </member>
        <member name="M:T.Modules.ServerStation.ServerSystemMonitor.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">Id of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.ServerStation.ServerSystemMonitor.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">Id to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="T:T.Modules.TagProviderService.UnsTagProvider">
            <summary>
            Class for UnsTagProvider operation.
            </summary>
        </member>
        <member name="T:T.Modules.TagProviderService.UnsTagProvider.e">
            <summary>
            Enum containg list of IDs of runtime objects
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.Id">
            <summary>
            Object ID (Internal Use). 
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.Protocol">
            <summary>
            Provider name.
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.Separators">
            <summary>
            Parameters. 
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.PrimaryStation">
            <summary>
            Primary station
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.BackupStation">
            <summary>
            Backup station
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.CurrentStation">
            <summary>
            Current station
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.ProtocolOptions">
            <summary>
            Protocol Options
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.Access">
            <summary>
            Access (Read only, Write only or ReadWrite).
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.Disable">
            <summary>
            Disable.
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.ReadTime">
            <summary>
            ReadTime (in ms)
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.WriteTime">
            <summary>
            WriteTime (in ms)
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.BranchSeparator">
            <summary>
            Branch separator
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.AttributeSeparator">
            <summary>
            Attribute separator
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.IsConnected">
            <summary>
            IsConnected
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.ConnectionStatus">
            <summary>
            Connection status
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.ServerIP">
            <summary>
            ServerIP
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvider.IsHistorian">
            <summary>
            Historian
            </summary>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvider.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvider.GetLocalTags">
            <summary>
            Get local tags
            </summary>
            <returns>Datatable (Name, Value, Quality, Timestamp)</returns>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvider.GetGlobalTags">
            <summary>
            Get global tags
            </summary>
            <returns>Datatable (Name, Value, Quality, Timestamp)</returns>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvider.GetObject(System.String)">
            <summary>
            Get reference to object
            </summary>
            <param name="tagName">Tag name</param>
            <returns>Reference to object</returns>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvider.Restart">
            <summary>
            Restart TagProvider Source
            </summary>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvider.ForceActive(System.String,System.Boolean)">
            <summary>
            Active ou deactive assets
            <param name="asset">Initial asset name</param>
            <param name="flag">Flag true(active) ou false(deactive)</param>
            </summary>
        </member>
        <member name="T:T.Modules.TagProviderService.UnsTagProviderRun">
            <summary>
            Class for UnsTagProviderRun operation.
            </summary>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProviderRun.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProviders.#ctor(T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name="parent">Reference to parent</param>
            <param name="id">ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProviders.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="F:T.Modules.TagProviderService.UnsTagProvidersRun.isRunning">
            <summary>
            Flag indicating status of execution
            </summary>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvidersRun.#ctor(T.Kernel.Core.TModule,T.Kernel.Core.RunObj,System.Int32)">
            <summary>
            Construct the instance
            </summary>
            <param name = "parent" > Reference to parent</param>
            <param name = "id" > ID of the runtime object of this instance</param>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvidersRun.OnCreateObj(System.Int32)">
            <summary>
            Get runtime object
            </summary>
            <param name="id">ID to get</param>
            <returns>Runtime object</returns>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvidersRun.CanPauseAndContinue">
            <summary>
            Get a value indicating whether the module can be paused and resumed.
            </summary>
        </member>
        <member name="P:T.Modules.TagProviderService.UnsTagProvidersRun.CanStop">
            <summary>
            Get a value indicating whether the module can be stopped once it has started.
            </summary>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvidersRun.OnStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvidersRun.OnAfterStart(System.String[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Specifies actions to take when the module after starts.
            </summary>
            <param name="args">Data passed by the command line</param>
            <param name="parameters">Array of parameters</param>
            <param name="isActivated">Flag indicating whether module should start as activated</param>
            <param name="isHotStartup">Flag indicating whether module should start as hot startup</param>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvidersRun.OnInitialWaitingValueFromServer(System.Int32)">
            <summary>
            Specifies actions to take when the module waiting initial value from server.
            </summary>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvidersRun.OnPause">
            <summary>
            Specifies actions to take when a module pauses.
            </summary>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvidersRun.OnContinue">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being paused.
            </summary>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvidersRun.OnDeactivate">
            <summary>
            Specifies actions to take when a module is deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvidersRun.OnActivate">
            <summary>
            Specifies actions to take when a module resumes normal functioning after being deactivated.
            </summary>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvidersRun.OnStop(System.Boolean)">
            <summary>
            Specifies actions to take when a module stops running.
            </summary>
            <param name="isHotStarting">Flag indicating whether module should shutdown prepared to after hot starting</param>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvidersRun.HandlerTraceMessages(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called for updating Trace messages.
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
        <member name="M:T.Modules.TagProviderService.UnsTagProvidersRun.HandlerForOnlineConfig(System.Object,T.Kernel.Core.RuntimeEventArgs)">
            <summary>
            This method is called for updating main DataSet (configuration online).
            </summary>
            <param name="sender">Reference to sender object</param>
            <param name="e">Event to be handled</param>
        </member>
    </members>
</doc>
